/* automatically generated by rust-bindgen 0.69.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const __USE_ANSI: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _BSD_SOURCE: u32 = 1;
pub const _SVID_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __UCLIBC__: u32 = 1;
pub const __UCLIBC_MAJOR__: u32 = 1;
pub const __UCLIBC_MINOR__: u32 = 0;
pub const __UCLIBC_SUBLEVEL__: u32 = 31;
pub const __TARGET_arm__: u32 = 1;
pub const __TARGET_ARCH__: &[u8; 4] = b"arm\0";
pub const __FORCE_OPTIONS_FOR_ARCH__: u32 = 1;
pub const __CONFIG_ARM_EABI__: u32 = 1;
pub const __TARGET_SUBARCH__: &[u8; 1] = b"\0";
pub const __ARCH_HAS_DEPRECATED_SYSCALLS__: u32 = 1;
pub const __ARCH_ANY_ENDIAN__: u32 = 1;
pub const __ARCH_LITTLE_ENDIAN__: u32 = 1;
pub const __ARCH_WANTS_LITTLE_ENDIAN__: u32 = 1;
pub const __ARCH_HAS_MMU__: u32 = 1;
pub const __ARCH_USE_MMU__: u32 = 1;
pub const __UCLIBC_HAS_FLOATS__: u32 = 1;
pub const __UCLIBC_HAS_FPU__: u32 = 1;
pub const __DO_C99_MATH__: u32 = 1;
pub const __UCLIBC_HAS_LONG_DOUBLE_MATH__: u32 = 1;
pub const __KERNEL_HEADERS__: &[u8; 108] = b"/opt/x-tool/arm-rockchip830-linux-uclibcgnueabihf/arm-rockchip830-linux-uclibcgnueabihf/sysroot/usr/include\0";
pub const __HAVE_DOT_CONFIG__: u32 = 1;
pub const __DOPIC__: u32 = 1;
pub const __ARCH_HAS_UCONTEXT__: u32 = 1;
pub const __HAVE_SHARED__: u32 = 1;
pub const __LDSO_LDD_SUPPORT__: u32 = 1;
pub const __LDSO_PRELOAD_ENV_SUPPORT__: u32 = 1;
pub const __LDSO_RUNPATH__: u32 = 1;
pub const __LDSO_RUNPATH_OF_EXECUTABLE__: u32 = 1;
pub const __LDSO_SAFE_RUNPATH__: u32 = 1;
pub const __LDSO_SEARCH_INTERP_PATH__: u32 = 1;
pub const __LDSO_LD_LIBRARY_PATH__: u32 = 1;
pub const __UCLIBC_CTOR_DTOR__: u32 = 1;
pub const __UCLIBC_HAS_THREADS_NATIVE__: u32 = 1;
pub const __UCLIBC_HAS_THREADS__: u32 = 1;
pub const __UCLIBC_HAS_TLS__: u32 = 1;
pub const __PTHREADS_DEBUG_SUPPORT__: u32 = 1;
pub const __UCLIBC_HAS_SYSLOG__: u32 = 1;
pub const __UCLIBC_HAS_LFS__: u32 = 1;
pub const __MALLOC_STANDARD__: u32 = 1;
pub const __UCLIBC_DYNAMIC_ATEXIT__: u32 = 1;
pub const __UCLIBC_HAS_UTMPX__: u32 = 1;
pub const __UCLIBC_HAS_UTMP__: u32 = 1;
pub const __UCLIBC_SUSV2_LEGACY__: u32 = 1;
pub const __UCLIBC_SUSV3_LEGACY__: u32 = 1;
pub const __UCLIBC_HAS_CONTEXT_FUNCS__: u32 = 1;
pub const __UCLIBC_SUSV4_LEGACY__: u32 = 1;
pub const __UCLIBC_HAS_SHADOW__: u32 = 1;
pub const __UCLIBC_HAS_PROGRAM_INVOCATION_NAME__: u32 = 1;
pub const __UCLIBC_HAS___PROGNAME__: u32 = 1;
pub const __UCLIBC_HAS_PTY__: u32 = 1;
pub const __ASSUME_DEVPTS__: u32 = 1;
pub const __UNIX98PTY_ONLY__: u32 = 1;
pub const __UCLIBC_HAS_GETPT__: u32 = 1;
pub const __UCLIBC_HAS_LIBUTIL__: u32 = 1;
pub const __UCLIBC_HAS_TM_EXTENSIONS__: u32 = 1;
pub const __UCLIBC_HAS_TZ_CACHING__: u32 = 1;
pub const __UCLIBC_HAS_TZ_FILE__: u32 = 1;
pub const __UCLIBC_HAS_TZ_FILE_READ_MANY__: u32 = 1;
pub const __UCLIBC_TZ_FILE_PATH__: &[u8; 8] = b"/etc/TZ\0";
pub const __UCLIBC_FALLBACK_TO_ETC_LOCALTIME__: u32 = 1;
pub const __UCLIBC_PWD_BUFFER_SIZE__: u32 = 256;
pub const __UCLIBC_GRP_BUFFER_SIZE__: u32 = 256;
pub const __UCLIBC_LINUX_SPECIFIC__: u32 = 1;
pub const __UCLIBC_HAS_GNU_ERROR__: u32 = 1;
pub const __UCLIBC_BSD_SPECIFIC__: u32 = 1;
pub const __UCLIBC_HAS_BSD_ERR__: u32 = 1;
pub const __UCLIBC_HAS_OBSOLETE_BSD_SIGNAL__: u32 = 1;
pub const __UCLIBC_HAS_REALTIME__: u32 = 1;
pub const __UCLIBC_HAS_ADVANCED_REALTIME__: u32 = 1;
pub const __UCLIBC_HAS_EPOLL__: u32 = 1;
pub const __UCLIBC_HAS_XATTR__: u32 = 1;
pub const __UCLIBC_HAS_PROFILING__: u32 = 1;
pub const __UCLIBC_HAS_CRYPT_IMPL__: u32 = 1;
pub const __UCLIBC_HAS_CRYPT__: u32 = 1;
pub const __UCLIBC_HAS_NETWORK_SUPPORT__: u32 = 1;
pub const __UCLIBC_HAS_SOCKET__: u32 = 1;
pub const __UCLIBC_HAS_IPV4__: u32 = 1;
pub const __UCLIBC_HAS_IPV6__: u32 = 1;
pub const __UCLIBC_USE_NETLINK__: u32 = 1;
pub const __UCLIBC_SUPPORT_AI_ADDRCONFIG__: u32 = 1;
pub const __UCLIBC_HAS_COMPAT_RES_STATE__: u32 = 1;
pub const __UCLIBC_HAS_RESOLVER_SUPPORT__: u32 = 1;
pub const __UCLIBC_HAS_STRING_GENERIC_OPT__: u32 = 1;
pub const __UCLIBC_HAS_STRING_ARCH_OPT__: u32 = 1;
pub const __UCLIBC_HAS_STDIO_FUTEXES__: u32 = 1;
pub const __UCLIBC_HAS_CTYPE_TABLES__: u32 = 1;
pub const __UCLIBC_HAS_CTYPE_SIGNED__: u32 = 1;
pub const __UCLIBC_HAS_CTYPE_CHECKED__: u32 = 1;
pub const __UCLIBC_HAS_WCHAR__: u32 = 1;
pub const __UCLIBC_HAS_HEXADECIMAL_FLOATS__: u32 = 1;
pub const __UCLIBC_HAS_GLIBC_CUSTOM_PRINTF__: u32 = 1;
pub const __UCLIBC_PRINTF_SCANF_POSITIONAL_ARGS__: u32 = 9;
pub const __UCLIBC_HAS_STDIO_BUFSIZ_4096__: u32 = 1;
pub const __UCLIBC_HAS_STDIO_BUILTIN_BUFFER_NONE__: u32 = 1;
pub const __UCLIBC_HAS_STDIO_GETC_MACRO__: u32 = 1;
pub const __UCLIBC_HAS_STDIO_PUTC_MACRO__: u32 = 1;
pub const __UCLIBC_HAS_STDIO_AUTO_RW_TRANSITION__: u32 = 1;
pub const __UCLIBC_HAS_FOPEN_EXCLUSIVE_MODE__: u32 = 1;
pub const __UCLIBC_HAS_GLIBC_CUSTOM_STREAMS__: u32 = 1;
pub const __UCLIBC_HAS_PRINTF_M_SPEC__: u32 = 1;
pub const __UCLIBC_HAS_ERRNO_MESSAGES__: u32 = 1;
pub const __UCLIBC_HAS_SIGNUM_MESSAGES__: u32 = 1;
pub const __UCLIBC_HAS_GNU_GETOPT__: u32 = 1;
pub const __UCLIBC_HAS_GETOPT_LONG__: u32 = 1;
pub const __UCLIBC_HAS_GNU_GETSUBOPT__: u32 = 1;
pub const __UCLIBC_HAS_REGEX__: u32 = 1;
pub const __UCLIBC_HAS_FNMATCH__: u32 = 1;
pub const __UCLIBC_HAS_NFTW__: u32 = 1;
pub const __UCLIBC_HAS_FTW__: u32 = 1;
pub const __UCLIBC_HAS_GLOB__: u32 = 1;
pub const __UCLIBC_HAS_GNU_GLOB__: u32 = 1;
pub const __RUNTIME_PREFIX__: &[u8; 2] = b"/\0";
pub const __DEVEL_PREFIX__: &[u8; 6] = b"/usr/\0";
pub const __MULTILIB_DIR__: &[u8; 4] = b"lib\0";
pub const __HARDWIRED_ABSPATH__: u32 = 1;
pub const __UCLIBC_HAS_SSP__: u32 = 1;
pub const __UCLIBC_BUILD_RELRO__: u32 = 1;
pub const __UCLIBC_BUILD_NOW__: u32 = 1;
pub const __UCLIBC_BUILD_NOEXECSTACK__: u32 = 1;
pub const __CROSS_COMPILER_PREFIX__: &[u8; 1] = b"\0";
pub const __UCLIBC_EXTRA_CFLAGS__: &[u8; 1] = b"\0";
pub const __WARNINGS__: &[u8; 6] = b"-Wall\0";
pub const __OPTIMIZE_SIZE__: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_BSD: u32 = 1;
pub const __USE_SVID: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 200009;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 2;
pub const _SYS_CDEFS_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const __WORDSIZE: u32 = 32;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const NULL: u32 = 0;
pub const RK_NULL: u32 = 0;
pub const RK_SUCCESS: u32 = 0;
pub const RK_FAILURE: i32 = -1;
pub const VENC_MAX_CHN_NUM: u32 = 64;
pub const VENC_MAX_ROI_NUM: u32 = 8;
pub const VDEC_MAX_CHN_NUM: u32 = 8;
pub const RGN_MAX_HANDLE_NUM: u32 = 128;
pub const VI_MAX_DEV_NUM: u32 = 2;
pub const VI_MAX_PHY_PIPE_NUM: u32 = 2;
pub const VI_MAX_VIR_PIPE_NUM: u32 = 0;
pub const VI_MAX_PIPE_NUM: u32 = 2;
pub const VI_MAX_PHY_CHN_NUM: u32 = 6;
pub const VI_MAX_EXT_CHN_NUM: u32 = 0;
pub const VI_MAX_CHN_NUM: u32 = 6;
pub const VO_SPLICE_DEVICE_TYPE: u32 = 1;
pub const VO_MAX_DEV_NUM: u32 = 1;
pub const VO_MAX_LAYER_NUM: u32 = 1;
pub const VO_MAX_CHN_NUM: u32 = 128;
pub const VO_MAX_WBC_NUM: u32 = 0;
pub const VO_MAX_BUF_NUM: u32 = 15;
pub const VO_MAX_PRIORITY: u32 = 7;
pub const VO_MAX_PHY_DEV_NUM: u32 = 1;
pub const AI_DEV_MAX_NUM: u32 = 2;
pub const AI_MAX_CHN_NUM: u32 = 1;
pub const AO_DEV_MAX_NUM: u32 = 2;
pub const AO_MAX_CHN_NUM: u32 = 3;
pub const AENC_MAX_CHN_NUM: u32 = 32;
pub const ADEC_MAX_CHN_NUM: u32 = 32;
pub const AF_MAX_CHN_NUM: u32 = 8;
pub const VPSS_MAX_GRP_NUM: u32 = 256;
pub const VPSS_MAX_CHN_NUM: u32 = 4;
pub const VPSS_MIN_IMAGE_WIDTH: u32 = 64;
pub const VPSS_MIN_IMAGE_HEIGHT: u32 = 64;
pub const VPSS_MAX_IMAGE_WIDTH: u32 = 4096;
pub const VPSS_MAX_IMAGE_HEIGHT: u32 = 4096;
pub const VPSS_VIDEO_PROC_DEVICE_TYPE: u32 = 1;
pub const VGS_MAX_JOB_NUM: u32 = 128;
pub const VGS_MAX_TASK_NUM: u32 = 200;
pub const TDE_MAX_JOB_NUM: u32 = 128;
pub const TDE_MAX_TASK_NUM: u32 = 200;
pub const IVS_MAX_CHN_NUM: u32 = 32;
pub const AVS_MAX_GRP_NUM: u32 = 2;
pub const AVS_PIPE_NUM: u32 = 2;
pub const AVS_MAX_CHN_NUM: u32 = 2;
pub const AVS_MAX_IN_WIDTH: u32 = 4096;
pub const AVS_MAX_IN_HEIGHT: u32 = 4096;
pub const AVS_MIN_IN_WIDTH: u32 = 720;
pub const AVS_MIN_IN_HEIGHT: u32 = 720;
pub const AVS_MAX_OUT_WIDTH: u32 = 4096;
pub const AVS_MAX_OUT_HEIGHT: u32 = 4096;
pub const AVS_MIN_OUT_WIDTH: u32 = 256;
pub const AVS_MIN_OUT_HEIGHT: u32 = 256;
pub const ALIGN_NUM: u32 = 16;
pub const VERSION_NAME_MAXLEN: u32 = 64;
pub const RK_INVALID_CHN: i32 = -1;
pub const RK_INVALID_WAY: i32 = -1;
pub const RK_INVALID_LAYER: i32 = -1;
pub const RK_INVALID_DEV: i32 = -1;
pub const RK_INVALID_HANDLE: i32 = -1;
pub const RK_INVALID_VALUE: i32 = -1;
pub const RK_INVALID_TYPE: i32 = -1;
pub const CCM_MATRIX_SIZE: u32 = 9;
pub const CCM_MATRIX_NUM: u32 = 7;
pub const CLUT_R_NUM: u32 = 17;
pub const CLUT_B_NUM: u32 = 17;
pub const CLUT_G_NUM: u32 = 17;
pub const RK_ISP_CLUT_COEFACMCNT: u32 = 4850;
pub const CUBIC_POINT_MAX: u32 = 5;
pub const RK_MOD_CMPI: &[u8; 5] = b"cmpi\0";
pub const RK_MOD_MB: &[u8; 3] = b"mb\0";
pub const RK_MOD_SYS: &[u8; 4] = b"sys\0";
pub const RK_MOD_RGN: &[u8; 4] = b"rgn\0";
pub const RK_MOD_VENC: &[u8; 5] = b"venc\0";
pub const RK_MOD_VDEC: &[u8; 5] = b"vdec\0";
pub const RK_MOD_VPSS: &[u8; 5] = b"vpss\0";
pub const RK_MOD_VGS: &[u8; 4] = b"vgs\0";
pub const RK_MOD_VI: &[u8; 3] = b"vi\0";
pub const RK_MOD_VO: &[u8; 3] = b"vo\0";
pub const RK_MOD_AI: &[u8; 3] = b"ai\0";
pub const RK_MOD_AO: &[u8; 3] = b"ao\0";
pub const RK_MOD_AENC: &[u8; 5] = b"aenc\0";
pub const RK_MOD_ADEC: &[u8; 5] = b"adec\0";
pub const RK_MOD_TDE: &[u8; 4] = b"tde\0";
pub const RK_MOD_ISP: &[u8; 4] = b"isp\0";
pub const RK_MOD_WBC: &[u8; 4] = b"wbc\0";
pub const RK_MOD_AVS: &[u8; 4] = b"avs\0";
pub const RK_MOD_RGA: &[u8; 4] = b"rga\0";
pub const RK_MOD_AF: &[u8; 3] = b"af\0";
pub const RK_MOD_IVS: &[u8; 4] = b"ivs\0";
pub const RK_MOD_GPU: &[u8; 4] = b"gpu\0";
pub const RK_MOD_NN: &[u8; 3] = b"nn\0";
pub const RK_ERR_APPID: u32 = 2684354560;
pub const MB_INVALID_POOLID: i32 = -1;
pub const MB_INVALID_HANDLE: u32 = 0;
pub const MB_MAX_COMM_POOLS: u32 = 16;
pub const MB_MAX_MOD_COMM_POOLS: u32 = 16;
pub const MB_MAX_COUNT: u32 = 10240;
pub const POOL_OWNER_COMMON: i32 = -1;
pub const POOL_OWNER_PRIVATE: i32 = -2;
pub const MAX_AUDIO_FILE_PATH_LEN: u32 = 256;
pub const MAX_AUDIO_FILE_NAME_LEN: u32 = 256;
pub const SRC_LENS_COEF_SEG: u32 = 2;
pub const DST_LENS_COEF_SEG: u32 = 3;
pub const SRC_LENS_COEF_NUM: u32 = 4;
pub const DST_LENS_COEF_NUM: u32 = 4;
pub const DST_LENS_COEF_SEG_POINT: u32 = 2;
pub const RK_COLOR_YUV_Y_PLANE: u32 = 0;
pub const RK_COLOR_YUV_UV_PLANE: u32 = 1;
pub const RK_COLOR_RGB_PLANE: u32 = 0;
pub const RK_MAX_COLOR_COMPONENT: u32 = 2;
pub const ISP_BAYER_CHN: u32 = 4;
pub const RK_VIDEO_FMT_MASK: u32 = 983040;
pub const RK_VIDEO_FMT_YUV: u32 = 0;
pub const RK_VIDEO_FMT_RGB: u32 = 65536;
pub const RK_VIDEO_FMT_BAYER: u32 = 131072;
pub const LDCI_STAT_WND_X: u32 = 24;
pub const LDCI_STAT_WND_Y: u32 = 16;
pub const DCF_DRSCRIPTION_LENGTH: u32 = 32;
pub const DCF_CAPTURE_TIME_LENGTH: u32 = 20;
pub const CFACOLORPLANE: u32 = 3;
pub const DNG_NP_SIZE: u32 = 6;
pub const ISP_WB_GAIN_NUM: u32 = 4;
pub const ISP_CAP_CCM_NUM: u32 = 9;
pub const AVS_SPLIT_NUM: u32 = 2;
pub const AVS_SPLIT_PIPE_NUM: u32 = 6;
pub const AVS_CUBE_MAP_SURFACE_NUM: u32 = 6;
pub const RK_AVS_OK: u32 = 0;
pub const IVS_MAX_AREA_NUM: u32 = 16;
pub const IVS_MAX_AREA_POINT_NUM: u32 = 6;
pub const RGN_CLUT_NUM: u32 = 256;
pub const RGN_MAX_BUF_NUM: u32 = 2;
pub const RGN_COLOR_LUT_NUM: u32 = 2;
pub const RGN_MIN_WIDTH: u32 = 16;
pub const RGN_MIN_HEIGHT: u32 = 16;
pub const RGN_COVER_MIN_X: u32 = 0;
pub const RGN_COVER_MIN_Y: u32 = 0;
pub const RGN_COVER_MAX_X: u32 = 8192;
pub const RGN_COVER_MAX_Y: u32 = 8192;
pub const RGN_COVER_MAX_WIDTH: u32 = 8192;
pub const RGN_COVER_MAX_HEIGHT: u32 = 8192;
pub const RGN_OVERLAY_MIN_X: u32 = 0;
pub const RGN_OVERLAY_MIN_Y: u32 = 0;
pub const RGN_OVERLAY_MAX_X: u32 = 8192;
pub const RGN_OVERLAY_MAX_Y: u32 = 8192;
pub const RGN_OVERLAY_MAX_WIDTH: u32 = 8192;
pub const RGN_OVERLAY_MAX_HEIGHT: u32 = 8192;
pub const RGN_MOSAIC_MIN_X: u32 = 0;
pub const RGN_MOSAIC_MIN_Y: u32 = 0;
pub const RGN_MOSAIC_MAX_X: u32 = 8192;
pub const RGN_MOSAIC_MAX_Y: u32 = 8192;
pub const RGN_MOSAIC_MIN_WIDTH: u32 = 32;
pub const RGN_MOSAIC_MIN_HEIGHT: u32 = 32;
pub const RGN_MOSAIC_MAX_WIDTH: u32 = 8192;
pub const RGN_MOSAIC_MAX_HEIGHT: u32 = 8192;
pub const BIND_DEST_MAXNUM: u32 = 64;
pub const VENC_QP_SGRM_NUM: u32 = 52;
pub const MAX_TILE_NUM: u32 = 1;
pub const RC_TEXTURE_THR_SIZE: u32 = 16;
pub const RK_VGS_SUCCESS: u32 = 0;
pub const VGS_MAX_ARRAY_SIZE: u32 = 100;
pub const VI_CHN0: u32 = 0;
pub const VI_CHN1: u32 = 1;
pub const VI_CHN2: u32 = 2;
pub const VI_CHN3: u32 = 3;
pub const VI_CHN4: u32 = 4;
pub const VI_CHN5: u32 = 5;
pub const MAX_VI_FILE_PATH_LEN: u32 = 256;
pub const MAX_VI_FILE_NAME_LEN: u32 = 256;
pub const MAX_VI_ENTITY_NAME_LEN: u32 = 32;
pub const MAX_VI_BIND_PIPE_NUM: u32 = 16;
pub const VO_DEF_WBC_DEPTH_LEN: u32 = 8;
pub const VO_INTF_CVBS: u32 = 1;
pub const VO_INTF_YPBPR: u32 = 2;
pub const VO_INTF_VGA: u32 = 4;
pub const VO_INTF_BT656: u32 = 8;
pub const VO_INTF_BT1120: u32 = 16;
pub const VO_INTF_LCD: u32 = 64;
pub const VO_INTF_LVDS: u32 = 128;
pub const VO_INTF_MIPI: u32 = 512;
pub const VO_INTF_MIPI1: u32 = 1024;
pub const VO_INTF_EDP: u32 = 2048;
pub const VO_INTF_EDP1: u32 = 4096;
pub const VO_INTF_HDMI: u32 = 8192;
pub const VO_INTF_HDMI1: u32 = 16384;
pub const VO_INTF_DP: u32 = 32768;
pub const VO_INTF_DP1: u32 = 65536;
pub const VO_INTF_DEFAULT: u32 = 131072;
pub const VO_INTF_NUM: u32 = 18;
pub const RK_VPSS_OK: u32 = 0;
pub const VPSS_INVALID_FRMRATE: i32 = -1;
pub const VPSS_CHN0: u32 = 0;
pub const VPSS_CHN1: u32 = 1;
pub const VPSS_CHN2: u32 = 2;
pub const VPSS_CHN3: u32 = 3;
pub const VPSS_INVALID_CHN: i32 = -1;
pub const _STDIO_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __FILE_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __STDIO_BUFSIZ: u32 = 4096;
pub const __STDIO_BUILTIN_BUF_SIZE: u32 = 0;
pub const __STDIO_HAS_OPENLIST: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const __STDIO_IOFBF: u32 = 0;
pub const __STDIO_IOLBF: u32 = 1;
pub const __STDIO_IONBF: u32 = 2;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BYTESWAP_H: u32 = 1;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 36;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 24;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_COND_COMPAT_T: u32 = 12;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 32;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 20;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __MASK_READING: u32 = 3;
pub const __FLAG_READING: u32 = 1;
pub const __FLAG_UNGOT: u32 = 2;
pub const __FLAG_EOF: u32 = 4;
pub const __FLAG_ERROR: u32 = 8;
pub const __FLAG_WRITEONLY: u32 = 16;
pub const __FLAG_READONLY: u32 = 32;
pub const __FLAG_WRITING: u32 = 64;
pub const __FLAG_NARROW: u32 = 128;
pub const __FLAG_FBF: u32 = 0;
pub const __FLAG_LBF: u32 = 256;
pub const __FLAG_NBF: u32 = 512;
pub const __MASK_BUFMODE: u32 = 768;
pub const __FLAG_APPEND: u32 = 1024;
pub const __FLAG_WIDE: u32 = 2048;
pub const __FLAG_FREEFILE: u32 = 8192;
pub const __FLAG_FREEBUF: u32 = 16384;
pub const __FLAG_LARGEFILE: u32 = 32768;
pub const __FLAG_FAILED_FREOPEN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 4096;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4095;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RK_DBG_FATAL: u32 = 1;
pub const RK_DBG_ERR: u32 = 2;
pub const RK_DBG_WARN: u32 = 3;
pub const RK_DBG_INFO: u32 = 4;
pub const RK_DBG_DEBUG: u32 = 5;
pub const RK_DBG_VERBOSE: u32 = 6;
pub const CONFIG_RK_LOG_TRACE_SUPPORT: u32 = 1;
pub const RK_MMZ_ALLOC_TYPE_IOMMU: u32 = 0;
pub const RK_MMZ_ALLOC_TYPE_CMA: u32 = 1;
pub const RK_MMZ_ALLOC_CACHEABLE: u32 = 0;
pub const RK_MMZ_ALLOC_UNCACHEABLE: u32 = 16;
pub const RK_MMZ_SYNC_READONLY: u32 = 0;
pub const RK_MMZ_SYNC_WRITEONLY: u32 = 1;
pub const RK_MMZ_SYNC_RW: u32 = 2;

pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type RK_UCHAR = ::std::os::raw::c_uchar;
pub type RK_U8 = u8;
pub type RK_U16 = u16;
pub type RK_U32 = u32;
pub type RK_UL = u32;
pub type RK_UINTPTR_T = usize;
pub type RK_CHAR = ::std::os::raw::c_char;
pub type RK_S8 = i8;
pub type RK_S16 = i16;
pub type RK_S32 = i32;
pub type RK_SL = i32;
pub type RK_FLOAT = f32;
pub type RK_DOUBLE = f64;
pub type RK_U64 = u64;
pub type RK_S64 = i64;
pub type RK_SIZE_T = u32;
pub type RK_LENGTH_T = u32;
pub type RK_HANDLE = ::std::os::raw::c_uint;

pub const RK_BOOL_RK_FALSE: RK_BOOL = 0;
pub const RK_BOOL_RK_TRUE: RK_BOOL = 1;

pub type RK_BOOL = ::std::os::raw::c_uint;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkMPP_VERSION_S {
    pub aVersion: [RK_CHAR; 64usize],
}

#[test]
fn bindgen_test_layout_rkMPP_VERSION_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkMPP_VERSION_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkMPP_VERSION_S>(),
        64usize,
        concat!("Size of: ", stringify!(rkMPP_VERSION_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkMPP_VERSION_S>(),
        1usize,
        concat!("Alignment of ", stringify!(rkMPP_VERSION_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aVersion) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMPP_VERSION_S),
        "::",
        stringify!(aVersion)
        )
    );
}

impl Default for rkMPP_VERSION_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type MPP_VERSION_S = rkMPP_VERSION_S;
pub type AI_CHN = RK_S32;
pub type AO_CHN = RK_S32;
pub type AENC_CHN = RK_S32;
pub type ADEC_CHN = RK_S32;
pub type AF_CHN = RK_S32;
pub type AUDIO_DEV = RK_S32;
pub type VI_DEV = RK_S32;
pub type VI_PIPE = RK_S32;
pub type VI_CHN = RK_S32;
pub type VI_STITCH_GRP = RK_S32;
pub type VO_DEV = RK_S32;
pub type VO_LAYER = RK_S32;
pub type VO_CHN = RK_S32;
pub type VO_WBC = RK_S32;
pub type GRAPHIC_LAYER = RK_S32;
pub type VENC_CHN = RK_S32;
pub type VDEC_CHN = RK_S32;
pub type IVE_HANDLE = RK_S32;
pub type CLS_HANDLE = RK_S32;
pub type FD_CHN = RK_S32;
pub type MD_CHN = RK_S32;
pub type ISP_DEV = RK_S32;
pub type BLK_DEV = RK_S32;
pub type SENSOR_ID = RK_S32;
pub type MIPI_DEV = RK_S32;
pub type SLAVE_DEV = RK_S32;
pub type SVP_NNIE_HANDLE = RK_S32;
pub type SVP_DSP_HANDLE = RK_S32;
pub type SVP_ALG_CHN = RK_S32;
pub type VPSS_GRP = RK_S32;
pub type VPSS_GRP_PIPE = RK_S32;
pub type VPSS_CHN = RK_S32;
pub type AVS_GRP = RK_S32;
pub type AVS_PIPE = RK_S32;
pub type AVS_CHN = RK_S32;
pub type MCF_GRP = RK_S32;
pub type MCF_PIPE = RK_S32;
pub type MCF_CHN = RK_S32;
pub type IVS_CHN = RK_S32;

pub const rkMOD_ID_E_RK_ID_CMPI: rkMOD_ID_E = 0;
pub const rkMOD_ID_E_RK_ID_MB: rkMOD_ID_E = 1;
pub const rkMOD_ID_E_RK_ID_SYS: rkMOD_ID_E = 2;
pub const rkMOD_ID_E_RK_ID_RGN: rkMOD_ID_E = 3;
pub const rkMOD_ID_E_RK_ID_VENC: rkMOD_ID_E = 4;
pub const rkMOD_ID_E_RK_ID_VDEC: rkMOD_ID_E = 5;
pub const rkMOD_ID_E_RK_ID_VPSS: rkMOD_ID_E = 6;
pub const rkMOD_ID_E_RK_ID_VGS: rkMOD_ID_E = 7;
pub const rkMOD_ID_E_RK_ID_VI: rkMOD_ID_E = 8;
pub const rkMOD_ID_E_RK_ID_VO: rkMOD_ID_E = 9;
pub const rkMOD_ID_E_RK_ID_AI: rkMOD_ID_E = 10;
pub const rkMOD_ID_E_RK_ID_AO: rkMOD_ID_E = 11;
pub const rkMOD_ID_E_RK_ID_AENC: rkMOD_ID_E = 12;
pub const rkMOD_ID_E_RK_ID_ADEC: rkMOD_ID_E = 13;
pub const rkMOD_ID_E_RK_ID_TDE: rkMOD_ID_E = 14;
pub const rkMOD_ID_E_RK_ID_ISP: rkMOD_ID_E = 15;
pub const rkMOD_ID_E_RK_ID_WBC: rkMOD_ID_E = 16;
pub const rkMOD_ID_E_RK_ID_AVS: rkMOD_ID_E = 17;
pub const rkMOD_ID_E_RK_ID_RGA: rkMOD_ID_E = 18;
pub const rkMOD_ID_E_RK_ID_AF: rkMOD_ID_E = 19;
pub const rkMOD_ID_E_RK_ID_IVS: rkMOD_ID_E = 20;
pub const rkMOD_ID_E_RK_ID_GPU: rkMOD_ID_E = 21;
pub const rkMOD_ID_E_RK_ID_NN: rkMOD_ID_E = 22;
pub const rkMOD_ID_E_RK_ID_BUTT: rkMOD_ID_E = 23;

pub type rkMOD_ID_E = ::std::os::raw::c_uint;

pub use self::rkMOD_ID_E as MOD_ID_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkMPP_CHN_S {
    pub enModId: MOD_ID_E,
    pub s32DevId: RK_S32,
    pub s32ChnId: RK_S32,
}

#[test]
fn bindgen_test_layout_rkMPP_CHN_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkMPP_CHN_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkMPP_CHN_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkMPP_CHN_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkMPP_CHN_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkMPP_CHN_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enModId) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMPP_CHN_S),
        "::",
        stringify!(enModId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DevId) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMPP_CHN_S),
        "::",
        stringify!(s32DevId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32ChnId) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMPP_CHN_S),
        "::",
        stringify!(s32ChnId)
        )
    );
}

impl Default for rkMPP_CHN_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type MPP_CHN_S = rkMPP_CHN_S;

#[doc = "< Value when coding is N/A"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_Unused: rkCODEC_ID_E = 0;
#[doc = "< Autodetection of coding type"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_AutoDetect: rkCODEC_ID_E = 1;
pub const rkCODEC_ID_E_RK_VIDEO_ID_MPEG1VIDEO: rkCODEC_ID_E = 2;
#[doc = "< AKA: H.262"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_MPEG2VIDEO: rkCODEC_ID_E = 3;
#[doc = "< H.263"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_H263: rkCODEC_ID_E = 4;
#[doc = "< MPEG-4"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_MPEG4: rkCODEC_ID_E = 5;
#[doc = "< Windows Media Video (WMV1,WMV2,WMV3)"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_WMV: rkCODEC_ID_E = 6;
#[doc = "< all versions of Real Video"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_RV: rkCODEC_ID_E = 7;
#[doc = "< H.264/AVC"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_AVC: rkCODEC_ID_E = 8;
#[doc = "< Motion JPEG"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_MJPEG: rkCODEC_ID_E = 9;
#[doc = "< VP8"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_VP8: rkCODEC_ID_E = 10;
#[doc = "< VP9"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_VP9: rkCODEC_ID_E = 11;
#[doc = "< ITU H.265/HEVC"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_HEVC: rkCODEC_ID_E = 12;
#[doc = "< Tsylf Vision"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_TsylfVision: rkCODEC_ID_E = 13;
#[doc = "< HEIF image encoded with HEVC"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_ImageHEIC: rkCODEC_ID_E = 14;
#[doc = "< JPEG"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_JPEG: rkCODEC_ID_E = 15;
#[doc = "< Windows Media Video (WMV1,WMV2,WMV3)"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_VC1: rkCODEC_ID_E = 16777216;
#[doc = "< Sorenson H.263"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_FLV1: rkCODEC_ID_E = 16777217;
#[doc = "< DIVX3"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_DIVX3: rkCODEC_ID_E = 16777218;
pub const rkCODEC_ID_E_RK_VIDEO_ID_VP6: rkCODEC_ID_E = 16777219;
#[doc = "< AVS+ profile=0x48"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_AVSPLUS: rkCODEC_ID_E = 16777220;
#[doc = "< AVS  profile=0x20"]
pub const rkCODEC_ID_E_RK_VIDEO_ID_AVS: rkCODEC_ID_E = 16777221;
pub const rkCODEC_ID_E_RK_VIDEO_ID_KhronosExtensions: rkCODEC_ID_E = 788529152;
pub const rkCODEC_ID_E_RK_VIDEO_ID_VendorStartUnused: rkCODEC_ID_E = 1056964608;
pub const rkCODEC_ID_E_RK_VIDEO_ID_Max: rkCODEC_ID_E = 1073741823;
#[doc = "< Placeholder value when coding is N/A"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_Unused: rkCODEC_ID_E = 1073741824;
#[doc = "< auto detection of audio format"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_AutoDetect: rkCODEC_ID_E = 1073741825;
pub const rkCODEC_ID_E_RK_AUDIO_ID_PCM_ALAW: rkCODEC_ID_E = 1073741826;
#[doc = " <g711a>"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_PCM_MULAW: rkCODEC_ID_E = 1073741827;
#[doc = "< Any variant of PCM_S16LE coding"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_PCM_S16LE: rkCODEC_ID_E = 1073741828;
#[doc = "< Any variant of PCM_S24LE coding"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_PCM_S24LE: rkCODEC_ID_E = 1073741829;
#[doc = "< Any variant of PCM_S32LE coding"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_PCM_S32LE: rkCODEC_ID_E = 1073741830;
#[doc = "< Any variant of ADPCM_G722 encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_ADPCM_G722: rkCODEC_ID_E = 1073741831;
#[doc = "< Any variant of ADPCM_G726 encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_ADPCM_G726: rkCODEC_ID_E = 1073741832;
#[doc = "< Any variant of ADPCM_IMA encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_ADPCM_IMA_QT: rkCODEC_ID_E = 1073741833;
#[doc = "< Any variant of AMR_NB encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_AMR_NB: rkCODEC_ID_E = 1073741834;
#[doc = "< Any variant of AMR_WB encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_AMR_WB: rkCODEC_ID_E = 1073741835;
#[doc = "< Any variant of GSM fullrate (i.e. GSM610)"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_GSMFR: rkCODEC_ID_E = 1073741836;
#[doc = "< Any variant of GSM Enhanced Fullrate encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_GSMEFR: rkCODEC_ID_E = 1073741837;
#[doc = "< Any variant of GSM Halfrate encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_GSMHR: rkCODEC_ID_E = 1073741838;
#[doc = "< Any variant of PDC Fullrate encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_PDCFR: rkCODEC_ID_E = 1073741839;
#[doc = "< Any variant of PDC Enhanced Fullrate encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_PDCEFR: rkCODEC_ID_E = 1073741840;
#[doc = "< Any variant of PDC Halfrate encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_PDCHR: rkCODEC_ID_E = 1073741841;
#[doc = "< Any variant of TDMA Fullrate encoded data (TIA/EIA-136-420)"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_TDMAFR: rkCODEC_ID_E = 1073741842;
#[doc = "< Any variant of TDMA Enhanced Fullrate encoded data (TIA/EIA-136-410)"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_TDMAEFR: rkCODEC_ID_E = 1073741843;
#[doc = "< Any variant of QCELP 8kbps encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_QCELP8: rkCODEC_ID_E = 1073741844;
#[doc = "< Any variant of QCELP 13kbps encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_QCELP13: rkCODEC_ID_E = 1073741845;
#[doc = "< Any variant of EVRC encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_EVRC: rkCODEC_ID_E = 1073741846;
#[doc = "< Any variant of SMV encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_SMV: rkCODEC_ID_E = 1073741847;
#[doc = "< Any variant of G.729 encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_G729: rkCODEC_ID_E = 1073741848;
#[doc = "< Any variant of OPUS encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_OPUS: rkCODEC_ID_E = 1073741849;
#[doc = "< Any variant of TMD encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_TMD: rkCODEC_ID_E = 1073741850;
#[doc = "< Any variant of MP3 encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_MP3: rkCODEC_ID_E = 1073741851;
#[doc = "< Any variant of SBC encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_SBC: rkCODEC_ID_E = 1073741852;
#[doc = "< Any variant of VORBIS encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_VORBIS: rkCODEC_ID_E = 1073741853;
#[doc = "< Any variant of WMA encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_WMA: rkCODEC_ID_E = 1073741854;
#[doc = "< Any variant of RA encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_RA: rkCODEC_ID_E = 1073741855;
#[doc = "< Any variant of MIDI encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_MIDI: rkCODEC_ID_E = 1073741856;
#[doc = "< Any variant of FLAC encoded data"]
pub const rkCODEC_ID_E_RK_AUDIO_ID_FLAC: rkCODEC_ID_E = 1073741857;
pub const rkCODEC_ID_E_RK_AUDIO_ID_APE: rkCODEC_ID_E = 1342177280;
pub const rkCODEC_ID_E_RK_AUDIO_CodingKhronosExtensions: rkCODEC_ID_E = 1862270976;
pub const rkCODEC_ID_E_RK_AUDIO_CodingVendorStartUnused: rkCODEC_ID_E = 2130706432;
pub const rkCODEC_ID_E_RK_AUDIO_ID_WMAV1: rkCODEC_ID_E = 2130706433;
pub const rkCODEC_ID_E_RK_AUDIO_ID_WMAV2: rkCODEC_ID_E = 2130706434;
pub const rkCODEC_ID_E_RK_AUDIO_ID_WMAPRO: rkCODEC_ID_E = 2130706435;
pub const rkCODEC_ID_E_RK_AUDIO_ID_WMALOSSLESS: rkCODEC_ID_E = 2130706436;
pub const rkCODEC_ID_E_RK_AUDIO_ID_MP1: rkCODEC_ID_E = 2130706437;
pub const rkCODEC_ID_E_RK_AUDIO_ID_MP2: rkCODEC_ID_E = 2130706438;
pub const rkCODEC_ID_E_RK_AUDIO_ID_BPM: rkCODEC_ID_E = 2130706439;
pub const rkCODEC_ID_E_RK_AUDIO_ID_ACC: rkCODEC_ID_E = 2130706440;
pub const rkCODEC_ID_E_RK_AUDIO_ID_EACC: rkCODEC_ID_E = 2130706441;
pub const rkCODEC_ID_E_RK_AUDIO_ID_TSYLF_JQXGKH: rkCODEC_ID_E = 2130706442;
pub const rkCODEC_ID_E_RK_AUDIO_ID_XYZ: rkCODEC_ID_E = 2130706443;
pub const rkCODEC_ID_E_RK_AUDIO_ID_BPM_HD: rkCODEC_ID_E = 2130706444;
pub const rkCODEC_ID_E_RK_AUDIO_CodingMax: rkCODEC_ID_E = 2147483647;
#[doc = "< A dummy ID pointing at the start of subtitle codecs."]
pub const rkCODEC_ID_E_RK_SUB_ID_Unused: rkCODEC_ID_E = 94208;
pub const rkCODEC_ID_E_RK_SUB_ID_DVD: rkCODEC_ID_E = 94209;
pub const rkCODEC_ID_E_RK_SUB_ID_DVB: rkCODEC_ID_E = 94210;
#[doc = "< raw UTF-8 text"]
pub const rkCODEC_ID_E_RK_SUB_ID_TEXT: rkCODEC_ID_E = 94211;
pub const rkCODEC_ID_E_RK_SUB_ID_XSUB: rkCODEC_ID_E = 94212;
pub const rkCODEC_ID_E_RK_SUB_ID_SSA: rkCODEC_ID_E = 94213;
pub const rkCODEC_ID_E_RK_SUB_ID_MOV_TEXT: rkCODEC_ID_E = 94214;
pub const rkCODEC_ID_E_RK_SUB_ID_HDMV_PGS: rkCODEC_ID_E = 94215;
pub const rkCODEC_ID_E_RK_SUB_ID_DVB_TELETEXT: rkCODEC_ID_E = 94216;
pub const rkCODEC_ID_E_RK_SUB_ID_SRT: rkCODEC_ID_E = 94217;
pub const rkCODEC_ID_E_RK_SUB_ID_MICRODVD: rkCODEC_ID_E = 96256;
pub const rkCODEC_ID_E_RK_SUB_ID_EIA_608: rkCODEC_ID_E = 96257;
pub const rkCODEC_ID_E_RK_SUB_ID_JACOSUB: rkCODEC_ID_E = 96258;
pub const rkCODEC_ID_E_RK_SUB_ID_SAMI: rkCODEC_ID_E = 96259;
pub const rkCODEC_ID_E_RK_SUB_ID_REALTEXT: rkCODEC_ID_E = 96260;
pub const rkCODEC_ID_E_RK_SUB_ID_STL: rkCODEC_ID_E = 96261;
pub const rkCODEC_ID_E_RK_SUB_ID_SUBVIEWER1: rkCODEC_ID_E = 96262;
pub const rkCODEC_ID_E_RK_SUB_ID_SUBVIEWER: rkCODEC_ID_E = 96263;
pub const rkCODEC_ID_E_RK_SUB_ID_SUBRIP: rkCODEC_ID_E = 96264;
pub const rkCODEC_ID_E_RK_SUB_ID_WEBVTT: rkCODEC_ID_E = 96265;
pub const rkCODEC_ID_E_RK_SUB_ID_MPL2: rkCODEC_ID_E = 96266;
pub const rkCODEC_ID_E_RK_SUB_ID_VPLAYER: rkCODEC_ID_E = 96267;
pub const rkCODEC_ID_E_RK_SUB_ID_PJS: rkCODEC_ID_E = 96268;
pub const rkCODEC_ID_E_RK_SUB_ID_ASS: rkCODEC_ID_E = 96269;
pub const rkCODEC_ID_E_RK_SUB_ID_HDMV_TEXT: rkCODEC_ID_E = 96270;
pub const rkCODEC_ID_E_RK_SUB_CodingMax: rkCODEC_ID_E = 96271;

pub type rkCODEC_ID_E = ::std::os::raw::c_uint;

pub use self::rkCODEC_ID_E as RK_CODEC_ID_E;

pub const rkERR_LEVEL_E_RK_ERR_LEVEL_DEBUG: rkERR_LEVEL_E = 0;
pub const rkERR_LEVEL_E_RK_ERR_LEVEL_INFO: rkERR_LEVEL_E = 1;
pub const rkERR_LEVEL_E_RK_ERR_LEVEL_NOTICE: rkERR_LEVEL_E = 2;
pub const rkERR_LEVEL_E_RK_ERR_LEVEL_WARNING: rkERR_LEVEL_E = 3;
pub const rkERR_LEVEL_E_RK_ERR_LEVEL_ERROR: rkERR_LEVEL_E = 4;
pub const rkERR_LEVEL_E_RK_ERR_LEVEL_CRIT: rkERR_LEVEL_E = 5;
pub const rkERR_LEVEL_E_RK_ERR_LEVEL_ALERT: rkERR_LEVEL_E = 6;
pub const rkERR_LEVEL_E_RK_ERR_LEVEL_FATAL: rkERR_LEVEL_E = 7;
pub const rkERR_LEVEL_E_RK_ERR_LEVEL_BUTT: rkERR_LEVEL_E = 8;

pub type rkERR_LEVEL_E = ::std::os::raw::c_uint;

pub use self::rkERR_LEVEL_E as ERR_LEVEL_E;

pub const rkEN_ERR_CODE_E_RK_ERR_INVALID_DEVID: rkEN_ERR_CODE_E = 1;
pub const rkEN_ERR_CODE_E_RK_ERR_INVALID_CHNID: rkEN_ERR_CODE_E = 2;
pub const rkEN_ERR_CODE_E_RK_ERR_ILLEGAL_PARAM: rkEN_ERR_CODE_E = 3;
pub const rkEN_ERR_CODE_E_RK_ERR_EXIST: rkEN_ERR_CODE_E = 4;
pub const rkEN_ERR_CODE_E_RK_ERR_UNEXIST: rkEN_ERR_CODE_E = 5;
pub const rkEN_ERR_CODE_E_RK_ERR_NULL_PTR: rkEN_ERR_CODE_E = 6;
pub const rkEN_ERR_CODE_E_RK_ERR_NOT_CONFIG: rkEN_ERR_CODE_E = 7;
pub const rkEN_ERR_CODE_E_RK_ERR_NOT_SUPPORT: rkEN_ERR_CODE_E = 8;
pub const rkEN_ERR_CODE_E_RK_ERR_NOT_PERM: rkEN_ERR_CODE_E = 9;
pub const rkEN_ERR_CODE_E_RK_ERR_INVALID_PIPEID: rkEN_ERR_CODE_E = 10;
pub const rkEN_ERR_CODE_E_RK_ERR_INVALID_STITCHGRPID: rkEN_ERR_CODE_E = 11;
pub const rkEN_ERR_CODE_E_RK_ERR_NOMEM: rkEN_ERR_CODE_E = 12;
pub const rkEN_ERR_CODE_E_RK_ERR_NOBUF: rkEN_ERR_CODE_E = 13;
pub const rkEN_ERR_CODE_E_RK_ERR_BUF_EMPTY: rkEN_ERR_CODE_E = 14;
pub const rkEN_ERR_CODE_E_RK_ERR_BUF_FULL: rkEN_ERR_CODE_E = 15;
pub const rkEN_ERR_CODE_E_RK_ERR_NOTREADY: rkEN_ERR_CODE_E = 16;
pub const rkEN_ERR_CODE_E_RK_ERR_BADADDR: rkEN_ERR_CODE_E = 17;
pub const rkEN_ERR_CODE_E_RK_ERR_BUSY: rkEN_ERR_CODE_E = 18;
pub const rkEN_ERR_CODE_E_RK_ERR_SIZE_NOT_ENOUGH: rkEN_ERR_CODE_E = 19;
pub const rkEN_ERR_CODE_E_RK_ERR_BUTT: rkEN_ERR_CODE_E = 63;

pub type rkEN_ERR_CODE_E = ::std::os::raw::c_uint;

pub use self::rkEN_ERR_CODE_E as RK_ERR_CODE_E;

pub const rkMB_UID_E_MB_UID_VI: rkMB_UID_E = 0;
pub const rkMB_UID_E_MB_UID_VO: rkMB_UID_E = 1;
pub const rkMB_UID_E_MB_UID_VGS: rkMB_UID_E = 2;
pub const rkMB_UID_E_MB_UID_VENC: rkMB_UID_E = 3;
pub const rkMB_UID_E_MB_UID_VDEC: rkMB_UID_E = 4;
pub const rkMB_UID_E_MB_UID_VPSS: rkMB_UID_E = 5;
pub const rkMB_UID_E_MB_UID_AI: rkMB_UID_E = 6;
pub const rkMB_UID_E_MB_UID_AENC: rkMB_UID_E = 7;
pub const rkMB_UID_E_MB_UID_ADEC: rkMB_UID_E = 8;
pub const rkMB_UID_E_MB_UID_AVS: rkMB_UID_E = 9;
pub const rkMB_UID_E_MB_UID_BUTT: rkMB_UID_E = 10;

pub type rkMB_UID_E = ::std::os::raw::c_uint;

pub use self::rkMB_UID_E as MB_UID_E;

pub type MB_POOL = RK_U32;
pub type MB_BLK = *mut ::std::os::raw::c_void;

pub const rkMB_BUF_SYNC_TYPE_E_MB_BUF_SYNC_TYPE_READ: rkMB_BUF_SYNC_TYPE_E = 0;
pub const rkMB_BUF_SYNC_TYPE_E_MB_BUF_SYNC_TYPE_WRITE: rkMB_BUF_SYNC_TYPE_E = 1;
pub const rkMB_BUF_SYNC_TYPE_E_MB_BUF_SYNC_TYPE_RW: rkMB_BUF_SYNC_TYPE_E = 2;

pub type rkMB_BUF_SYNC_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkMB_BUF_SYNC_TYPE_E as MB_BUF_SYNC_TYPE_E;

pub const rkMB_ALLOC_TYPE_MB_ALLOC_TYPE_UNUSED: rkMB_ALLOC_TYPE = -1;
pub const rkMB_ALLOC_TYPE_MB_ALLOC_TYPE_DMA: rkMB_ALLOC_TYPE = 0;
pub const rkMB_ALLOC_TYPE_MB_ALLOC_TYPE_MALLOC: rkMB_ALLOC_TYPE = 1;
pub const rkMB_ALLOC_TYPE_MB_ALLOC_TYPE_MAX: rkMB_ALLOC_TYPE = 2;

pub type rkMB_ALLOC_TYPE = ::std::os::raw::c_int;

pub use self::rkMB_ALLOC_TYPE as MB_ALLOC_TYPE_E;

pub const rkMB_REMAP_MODE_E_MB_REMAP_MODE_NONE: rkMB_REMAP_MODE_E = 0;
pub const rkMB_REMAP_MODE_E_MB_REMAP_MODE_NOCACHE: rkMB_REMAP_MODE_E = 256;
pub const rkMB_REMAP_MODE_E_MB_REMAP_MODE_CACHED: rkMB_REMAP_MODE_E = 512;
pub const rkMB_REMAP_MODE_E_MB_REMAP_MODE_BUTT: rkMB_REMAP_MODE_E = 513;

pub type rkMB_REMAP_MODE_E = ::std::os::raw::c_uint;

pub use self::rkMB_REMAP_MODE_E as MB_REMAP_MODE_E;

pub const rkMB_DMA_TYPE_E_MB_DMA_TYPE_NONE: rkMB_DMA_TYPE_E = 0;
pub const rkMB_DMA_TYPE_E_MB_DMA_TYPE_CMA: rkMB_DMA_TYPE_E = 4096;
pub const rkMB_DMA_TYPE_E_MB_DMA_TYPE_BUTT: rkMB_DMA_TYPE_E = 4097;

pub type rkMB_DMA_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkMB_DMA_TYPE_E as MB_DMA_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkMB_POOL_CONFIG_S {
    pub u64MBSize: RK_U64,
    pub u32MBCnt: RK_U32,
    pub enRemapMode: MB_REMAP_MODE_E,
    pub enAllocType: MB_ALLOC_TYPE_E,
    pub enDmaType: MB_DMA_TYPE_E,
    pub bPreAlloc: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkMB_POOL_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkMB_POOL_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkMB_POOL_CONFIG_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkMB_POOL_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkMB_POOL_CONFIG_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkMB_POOL_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64MBSize) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_POOL_CONFIG_S),
        "::",
        stringify!(u64MBSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MBCnt) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_POOL_CONFIG_S),
        "::",
        stringify!(u32MBCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enRemapMode) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_POOL_CONFIG_S),
        "::",
        stringify!(enRemapMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enAllocType) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_POOL_CONFIG_S),
        "::",
        stringify!(enAllocType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDmaType) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_POOL_CONFIG_S),
        "::",
        stringify!(enDmaType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPreAlloc) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_POOL_CONFIG_S),
        "::",
        stringify!(bPreAlloc)
        )
    );
}

impl Default for rkMB_POOL_CONFIG_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type MB_POOL_CONFIG_S = rkMB_POOL_CONFIG_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkMB_CONFIG_S {
    pub u32MaxPoolCnt: RK_U32,
    pub astCommPool: [MB_POOL_CONFIG_S; 16usize],
}

#[test]
fn bindgen_test_layout_rkMB_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkMB_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkMB_CONFIG_S>(),
        520usize,
        concat!("Size of: ", stringify!(rkMB_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkMB_CONFIG_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkMB_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxPoolCnt) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_CONFIG_S),
        "::",
        stringify!(u32MaxPoolCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).astCommPool) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_CONFIG_S),
        "::",
        stringify!(astCommPool)
        )
    );
}

impl Default for rkMB_CONFIG_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type MB_CONFIG_S = rkMB_CONFIG_S;
pub type RK_MPI_MB_FREE_CB =
::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> RK_S32>;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rkMB_EXT_CONFIG_S {
    pub pu8VirAddr: *mut RK_U8,
    pub u64PhyAddr: RK_U64,
    pub s32Fd: RK_S32,
    pub u64Size: RK_U64,
    pub pFreeCB: RK_MPI_MB_FREE_CB,
    pub pOpaque: *mut ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout__rkMB_EXT_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<_rkMB_EXT_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_rkMB_EXT_CONFIG_S>(),
        40usize,
        concat!("Size of: ", stringify!(_rkMB_EXT_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<_rkMB_EXT_CONFIG_S>(),
        8usize,
        concat!("Alignment of ", stringify!(_rkMB_EXT_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pu8VirAddr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(_rkMB_EXT_CONFIG_S),
        "::",
        stringify!(pu8VirAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64PhyAddr) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(_rkMB_EXT_CONFIG_S),
        "::",
        stringify!(u64PhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Fd) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(_rkMB_EXT_CONFIG_S),
        "::",
        stringify!(s32Fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64Size) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(_rkMB_EXT_CONFIG_S),
        "::",
        stringify!(u64Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFreeCB) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(_rkMB_EXT_CONFIG_S),
        "::",
        stringify!(pFreeCB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOpaque) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(_rkMB_EXT_CONFIG_S),
        "::",
        stringify!(pOpaque)
        )
    );
}

impl Default for _rkMB_EXT_CONFIG_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type MB_EXT_CONFIG_S = _rkMB_EXT_CONFIG_S;

pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_DISABLE: rkAUDIO_SAMPLE_RATE_E = 0;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_8000: rkAUDIO_SAMPLE_RATE_E = 8000;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_12000: rkAUDIO_SAMPLE_RATE_E = 12000;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_11025: rkAUDIO_SAMPLE_RATE_E = 11025;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_16000: rkAUDIO_SAMPLE_RATE_E = 16000;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_22050: rkAUDIO_SAMPLE_RATE_E = 22050;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_24000: rkAUDIO_SAMPLE_RATE_E = 24000;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_32000: rkAUDIO_SAMPLE_RATE_E = 32000;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_44100: rkAUDIO_SAMPLE_RATE_E = 44100;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_48000: rkAUDIO_SAMPLE_RATE_E = 48000;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_64000: rkAUDIO_SAMPLE_RATE_E = 64000;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_96000: rkAUDIO_SAMPLE_RATE_E = 96000;
pub const rkAUDIO_SAMPLE_RATE_E_AUDIO_SAMPLE_RATE_BUTT: rkAUDIO_SAMPLE_RATE_E = 96001;

pub type rkAUDIO_SAMPLE_RATE_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_SAMPLE_RATE_E as AUDIO_SAMPLE_RATE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAUDIO_STREAM_S {
    pub pMbBlk: MB_BLK,
    pub u32Len: RK_U32,
    pub u64TimeStamp: RK_U64,
    pub u32Seq: RK_U32,
    pub bBypassMbBlk: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkAUDIO_STREAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_STREAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_STREAM_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkAUDIO_STREAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_STREAM_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkAUDIO_STREAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_STREAM_S),
        "::",
        stringify!(pMbBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Len) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_STREAM_S),
        "::",
        stringify!(u32Len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64TimeStamp) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_STREAM_S),
        "::",
        stringify!(u64TimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Seq) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_STREAM_S),
        "::",
        stringify!(u32Seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBypassMbBlk) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_STREAM_S),
        "::",
        stringify!(bBypassMbBlk)
        )
    );
}

impl Default for rkAUDIO_STREAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AUDIO_STREAM_S = rkAUDIO_STREAM_S;

pub const rkAUDIO_BIT_WIDTH_E_AUDIO_BIT_WIDTH_8: rkAUDIO_BIT_WIDTH_E = 0;
pub const rkAUDIO_BIT_WIDTH_E_AUDIO_BIT_WIDTH_16: rkAUDIO_BIT_WIDTH_E = 1;
pub const rkAUDIO_BIT_WIDTH_E_AUDIO_BIT_WIDTH_24: rkAUDIO_BIT_WIDTH_E = 2;
pub const rkAUDIO_BIT_WIDTH_E_AUDIO_BIT_WIDTH_32: rkAUDIO_BIT_WIDTH_E = 3;
pub const rkAUDIO_BIT_WIDTH_E_AUDIO_BIT_WIDTH_FLT: rkAUDIO_BIT_WIDTH_E = 4;
pub const rkAUDIO_BIT_WIDTH_E_AUDIO_BIT_WIDTH_BUTT: rkAUDIO_BIT_WIDTH_E = 5;

pub type rkAUDIO_BIT_WIDTH_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_BIT_WIDTH_E as AUDIO_BIT_WIDTH_E;

pub const rkAIO_SOUND_MODE_E_AUDIO_SOUND_MODE_MONO: rkAIO_SOUND_MODE_E = 0;
pub const rkAIO_SOUND_MODE_E_AUDIO_SOUND_MODE_STEREO: rkAIO_SOUND_MODE_E = 1;
pub const rkAIO_SOUND_MODE_E_AUDIO_SOUND_MODE_4_CHN: rkAIO_SOUND_MODE_E = 4;
pub const rkAIO_SOUND_MODE_E_AUDIO_SOUND_MODE_6_CHN: rkAIO_SOUND_MODE_E = 6;
pub const rkAIO_SOUND_MODE_E_AUDIO_SOUND_MODE_8_CHN: rkAIO_SOUND_MODE_E = 8;
pub const rkAIO_SOUND_MODE_E_AUDIO_SOUND_MODE_BUTT: rkAIO_SOUND_MODE_E = 9;

pub type rkAIO_SOUND_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAIO_SOUND_MODE_E as AUDIO_SOUND_MODE_E;

pub const rkAUDIO_CHN_MODE_E_AUDIO_CHN_MODE_LEFT: rkAUDIO_CHN_MODE_E = 10;
pub const rkAUDIO_CHN_MODE_E_AUDIO_CHN_MODE_RIGHT: rkAUDIO_CHN_MODE_E = 11;
pub const rkAUDIO_CHN_MODE_E_AUDIO_CHN_MODE_BUTT: rkAUDIO_CHN_MODE_E = 12;

pub type rkAUDIO_CHN_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_CHN_MODE_E as AUDIO_CHN_MODE_E;

pub const rkAUDIO_LOOPBACK_MODE_E_AUDIO_LOOPBACK_NONE: rkAUDIO_LOOPBACK_MODE_E = 0;
pub const rkAUDIO_LOOPBACK_MODE_E_AUDIO_LOOPBACK_SW_MICL_REFR: rkAUDIO_LOOPBACK_MODE_E = 1;
pub const rkAUDIO_LOOPBACK_MODE_E_AUDIO_LOOPBACK_SW_REFL_MICR: rkAUDIO_LOOPBACK_MODE_E = 2;
pub const rkAUDIO_LOOPBACK_MODE_E_AUDIO_LOOPBACK_BUTT: rkAUDIO_LOOPBACK_MODE_E = 3;

pub type rkAUDIO_LOOPBACK_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_LOOPBACK_MODE_E as AUDIO_LOOPBACK_MODE_E;

pub const rkAUDIO_CHN_ATTR_MODE_E_AUDIO_CHN_ATTR_PPM: rkAUDIO_CHN_ATTR_MODE_E = 1;
pub const rkAUDIO_CHN_ATTR_MODE_E_AUDIO_CHN_ATTR_RATE: rkAUDIO_CHN_ATTR_MODE_E = 2;
pub const rkAUDIO_CHN_ATTR_MODE_E_AUDIO_CHN_ATTR_BUTT: rkAUDIO_CHN_ATTR_MODE_E = 3;

pub type rkAUDIO_CHN_ATTR_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_CHN_ATTR_MODE_E as AUDIO_CHN_ATTR_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAUDIO_FRAME_S {
    pub pMbBlk: MB_BLK,
    pub enBitWidth: AUDIO_BIT_WIDTH_E,
    pub enSoundMode: AUDIO_SOUND_MODE_E,
    pub u64TimeStamp: RK_U64,
    pub u32Seq: RK_U32,
    pub u32Len: RK_U32,
    pub bBypassMbBlk: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkAUDIO_FRAME_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_FRAME_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_FRAME_S>(),
        40usize,
        concat!("Size of: ", stringify!(rkAUDIO_FRAME_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_FRAME_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkAUDIO_FRAME_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_S),
        "::",
        stringify!(pMbBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enBitWidth) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_S),
        "::",
        stringify!(enBitWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enSoundMode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_S),
        "::",
        stringify!(enSoundMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64TimeStamp) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_S),
        "::",
        stringify!(u64TimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Seq) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_S),
        "::",
        stringify!(u32Seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Len) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_S),
        "::",
        stringify!(u32Len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBypassMbBlk) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_S),
        "::",
        stringify!(bBypassMbBlk)
        )
    );
}

impl Default for rkAUDIO_FRAME_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AUDIO_FRAME_S = rkAUDIO_FRAME_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAEC_FRAME_S {
    pub stRefFrame: AUDIO_FRAME_S,
    pub bValid: RK_BOOL,
    pub bSysBind: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkAEC_FRAME_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAEC_FRAME_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAEC_FRAME_S>(),
        48usize,
        concat!("Size of: ", stringify!(rkAEC_FRAME_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAEC_FRAME_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkAEC_FRAME_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRefFrame) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAEC_FRAME_S),
        "::",
        stringify!(stRefFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bValid) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAEC_FRAME_S),
        "::",
        stringify!(bValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSysBind) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAEC_FRAME_S),
        "::",
        stringify!(bSysBind)
        )
    );
}

impl Default for rkAEC_FRAME_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AEC_FRAME_S = rkAEC_FRAME_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAUDIO_FRAME_INFO_S {
    pub pstFrame: *mut AUDIO_FRAME_S,
    pub u32Id: RK_U32,
}

#[test]
fn bindgen_test_layout_rkAUDIO_FRAME_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_FRAME_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_FRAME_INFO_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAUDIO_FRAME_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_FRAME_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAUDIO_FRAME_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstFrame) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_INFO_S),
        "::",
        stringify!(pstFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Id) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FRAME_INFO_S),
        "::",
        stringify!(u32Id)
        )
    );
}

impl Default for rkAUDIO_FRAME_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AUDIO_FRAME_INFO_S = rkAUDIO_FRAME_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAUDIO_ADENC_PARAM_S {
    pub pu8InBuf: *mut RK_U8,
    pub u32InLen: RK_U32,
    pub u64InTimeStamp: RK_U64,
    pub pu8OutBuf: *mut RK_U8,
    pub u32OutLen: RK_U32,
    pub u64OutTimeStamp: RK_U64,
}

#[test]
fn bindgen_test_layout_rkAUDIO_ADENC_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_ADENC_PARAM_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_ADENC_PARAM_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkAUDIO_ADENC_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_ADENC_PARAM_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkAUDIO_ADENC_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pu8InBuf) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ADENC_PARAM_S),
        "::",
        stringify!(pu8InBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32InLen) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ADENC_PARAM_S),
        "::",
        stringify!(u32InLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64InTimeStamp) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ADENC_PARAM_S),
        "::",
        stringify!(u64InTimeStamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pu8OutBuf) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ADENC_PARAM_S),
        "::",
        stringify!(pu8OutBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OutLen) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ADENC_PARAM_S),
        "::",
        stringify!(u32OutLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64OutTimeStamp) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ADENC_PARAM_S),
        "::",
        stringify!(u64OutTimeStamp)
        )
    );
}

impl Default for rkAUDIO_ADENC_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AUDIO_ADENC_PARAM_S = rkAUDIO_ADENC_PARAM_S;

pub const rkAIO_MODE_E_AIO_MODE_I2S_MASTER: rkAIO_MODE_E = 0;
pub const rkAIO_MODE_E_AIO_MODE_I2S_SLAVE: rkAIO_MODE_E = 1;
pub const rkAIO_MODE_E_AIO_MODE_PCM_SLAVE_STD: rkAIO_MODE_E = 2;
pub const rkAIO_MODE_E_AIO_MODE_PCM_SLAVE_NSTD: rkAIO_MODE_E = 3;
pub const rkAIO_MODE_E_AIO_MODE_PCM_MASTER_STD: rkAIO_MODE_E = 4;
pub const rkAIO_MODE_E_AIO_MODE_PCM_MASTER_NSTD: rkAIO_MODE_E = 5;
pub const rkAIO_MODE_E_AIO_MODE_BUTT: rkAIO_MODE_E = 6;

pub type rkAIO_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAIO_MODE_E as AIO_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAIO_SOUND_CARD {
    pub channels: RK_U32,
    pub sampleRate: RK_U32,
    pub bitWidth: AUDIO_BIT_WIDTH_E,
}

#[test]
fn bindgen_test_layout_rkAIO_SOUND_CARD() {
    const UNINIT: ::std::mem::MaybeUninit<rkAIO_SOUND_CARD> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAIO_SOUND_CARD>(),
        12usize,
        concat!("Size of: ", stringify!(rkAIO_SOUND_CARD))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAIO_SOUND_CARD>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAIO_SOUND_CARD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_SOUND_CARD),
        "::",
        stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_SOUND_CARD),
        "::",
        stringify!(sampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitWidth) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_SOUND_CARD),
        "::",
        stringify!(bitWidth)
        )
    );
}

impl Default for rkAIO_SOUND_CARD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AIO_SOUND_CARD = rkAIO_SOUND_CARD;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAIO_ATTR_S {
    pub soundCard: AIO_SOUND_CARD,
    pub enSamplerate: AUDIO_SAMPLE_RATE_E,
    pub enBitwidth: AUDIO_BIT_WIDTH_E,
    pub enSoundmode: AUDIO_SOUND_MODE_E,
    pub u32EXFlag: RK_U32,
    pub u32FrmNum: RK_U32,
    pub u32PtNumPerFrm: RK_U32,
    pub u32ChnCnt: RK_U32,
    pub u8CardName: [RK_U8; 64usize],
}

#[test]
fn bindgen_test_layout_rkAIO_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAIO_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAIO_ATTR_S>(),
        104usize,
        concat!("Size of: ", stringify!(rkAIO_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAIO_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAIO_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).soundCard) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(soundCard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enSamplerate) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(enSamplerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enBitwidth) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(enBitwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enSoundmode) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(enSoundmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32EXFlag) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(u32EXFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmNum) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(u32FrmNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PtNumPerFrm) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(u32PtNumPerFrm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ChnCnt) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(u32ChnCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8CardName) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAIO_ATTR_S),
        "::",
        stringify!(u8CardName)
        )
    );
}

impl Default for rkAIO_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AIO_ATTR_S = rkAIO_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAI_CHN_PARAM_S {
    pub s32UsrFrmDepth: RK_S32,
    pub enLoopbackMode: AUDIO_LOOPBACK_MODE_E,
}

#[test]
fn bindgen_test_layout_rkAI_CHN_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_CHN_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_CHN_PARAM_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAI_CHN_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_CHN_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_CHN_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32UsrFrmDepth) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_CHN_PARAM_S),
        "::",
        stringify!(s32UsrFrmDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enLoopbackMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_CHN_PARAM_S),
        "::",
        stringify!(enLoopbackMode)
        )
    );
}

impl Default for rkAI_CHN_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AI_CHN_PARAM_S = rkAI_CHN_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAO_CHN_PARAM_S {
    pub enMode: AUDIO_CHN_MODE_E,
    pub enLoopbackMode: AUDIO_LOOPBACK_MODE_E,
}

#[test]
fn bindgen_test_layout_rkAO_CHN_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAO_CHN_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAO_CHN_PARAM_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAO_CHN_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAO_CHN_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAO_CHN_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_CHN_PARAM_S),
        "::",
        stringify!(enMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enLoopbackMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_CHN_PARAM_S),
        "::",
        stringify!(enLoopbackMode)
        )
    );
}

impl Default for rkAO_CHN_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AO_CHN_PARAM_S = rkAO_CHN_PARAM_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkAI_CHN_ATTR_S {
    pub enChnAttr: AUDIO_CHN_ATTR_MODE_E,
    pub __bindgen_anon_1: rkAI_CHN_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkAI_CHN_ATTR_S__bindgen_ty_1 {
    pub s32Ppm: RK_S32,
    pub u32SampleRate: RK_U32,
}

#[test]
fn bindgen_test_layout_rkAI_CHN_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_CHN_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_CHN_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rkAI_CHN_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_CHN_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_CHN_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Ppm) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_CHN_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(s32Ppm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SampleRate) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_CHN_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(u32SampleRate)
        )
    );
}

impl Default for rkAI_CHN_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkAI_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_CHN_ATTR_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAI_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enChnAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_CHN_ATTR_S),
        "::",
        stringify!(enChnAttr)
        )
    );
}

impl Default for rkAI_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AI_CHN_ATTR_S = rkAI_CHN_ATTR_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkAO_CHN_ATTR_S {
    pub enChnAttr: AUDIO_CHN_ATTR_MODE_E,
    pub __bindgen_anon_1: rkAO_CHN_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkAO_CHN_ATTR_S__bindgen_ty_1 {
    pub s32Ppm: RK_S32,
    pub u32SampleRate: RK_U32,
}

#[test]
fn bindgen_test_layout_rkAO_CHN_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkAO_CHN_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAO_CHN_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rkAO_CHN_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAO_CHN_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAO_CHN_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Ppm) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_CHN_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(s32Ppm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SampleRate) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_CHN_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(u32SampleRate)
        )
    );
}

impl Default for rkAO_CHN_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkAO_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAO_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAO_CHN_ATTR_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAO_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAO_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAO_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enChnAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_CHN_ATTR_S),
        "::",
        stringify!(enChnAttr)
        )
    );
}

impl Default for rkAO_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AO_CHN_ATTR_S = rkAO_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAO_CHN_STATE_S {
    pub u32ChnTotalNum: RK_U32,
    pub u32ChnFreeNum: RK_U32,
    pub u32ChnBusyNum: RK_U32,
}

#[test]
fn bindgen_test_layout_rkAO_CHN_STATE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAO_CHN_STATE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAO_CHN_STATE_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkAO_CHN_STATE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAO_CHN_STATE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAO_CHN_STATE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ChnTotalNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_CHN_STATE_S),
        "::",
        stringify!(u32ChnTotalNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ChnFreeNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_CHN_STATE_S),
        "::",
        stringify!(u32ChnFreeNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ChnBusyNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_CHN_STATE_S),
        "::",
        stringify!(u32ChnBusyNum)
        )
    );
}

pub type AO_CHN_STATE_S = rkAO_CHN_STATE_S;

pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_NORMAL: rkAUDIO_TRACK_MODE_E = 0;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_BOTH_LEFT: rkAUDIO_TRACK_MODE_E = 1;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_BOTH_RIGHT: rkAUDIO_TRACK_MODE_E = 2;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_EXCHANGE: rkAUDIO_TRACK_MODE_E = 3;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_MIX: rkAUDIO_TRACK_MODE_E = 4;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_LEFT_MUTE: rkAUDIO_TRACK_MODE_E = 5;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_RIGHT_MUTE: rkAUDIO_TRACK_MODE_E = 6;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_BOTH_MUTE: rkAUDIO_TRACK_MODE_E = 7;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_FRONT_LEFT: rkAUDIO_TRACK_MODE_E = 8;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_FRONT_RIGHT: rkAUDIO_TRACK_MODE_E = 9;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_OUT_STEREO: rkAUDIO_TRACK_MODE_E = 10;
pub const rkAUDIO_TRACK_MODE_E_AUDIO_TRACK_BUTT: rkAUDIO_TRACK_MODE_E = 11;

pub type rkAUDIO_TRACK_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_TRACK_MODE_E as AUDIO_TRACK_MODE_E;

pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_1: rkAUDIO_FADE_RATE_E = 0;
pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_2: rkAUDIO_FADE_RATE_E = 1;
pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_4: rkAUDIO_FADE_RATE_E = 2;
pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_8: rkAUDIO_FADE_RATE_E = 3;
pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_16: rkAUDIO_FADE_RATE_E = 4;
pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_32: rkAUDIO_FADE_RATE_E = 5;
pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_64: rkAUDIO_FADE_RATE_E = 6;
pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_128: rkAUDIO_FADE_RATE_E = 7;
pub const rkAUDIO_FADE_RATE_E_AUDIO_FADE_RATE_BUTT: rkAUDIO_FADE_RATE_E = 8;

pub type rkAUDIO_FADE_RATE_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_FADE_RATE_E as AUDIO_FADE_RATE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAUDIO_FADE_S {
    pub bFade: RK_BOOL,
    pub enFadeInRate: AUDIO_FADE_RATE_E,
    pub enFadeOutRate: AUDIO_FADE_RATE_E,
}

#[test]
fn bindgen_test_layout_rkAUDIO_FADE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_FADE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_FADE_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkAUDIO_FADE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_FADE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAUDIO_FADE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFade) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FADE_S),
        "::",
        stringify!(bFade)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enFadeInRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FADE_S),
        "::",
        stringify!(enFadeInRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enFadeOutRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FADE_S),
        "::",
        stringify!(enFadeOutRate)
        )
    );
}

impl Default for rkAUDIO_FADE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AUDIO_FADE_S = rkAUDIO_FADE_S;

pub const rkAUDIO_VOLUME_CURVE_E_AUDIO_CURVE_UNSET: rkAUDIO_VOLUME_CURVE_E = 0;
pub const rkAUDIO_VOLUME_CURVE_E_AUDIO_CURVE_LINEAR: rkAUDIO_VOLUME_CURVE_E = 1;
pub const rkAUDIO_VOLUME_CURVE_E_AUDIO_CURVE_LOGARITHM: rkAUDIO_VOLUME_CURVE_E = 2;
pub const rkAUDIO_VOLUME_CURVE_E_AUDIO_CURVE_CUSTOMIZE: rkAUDIO_VOLUME_CURVE_E = 3;
pub const rkAUDIO_VOLUME_CURVE_E_AUDIO_CURVE_BUTT: rkAUDIO_VOLUME_CURVE_E = 4;

pub type rkAUDIO_VOLUME_CURVE_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_VOLUME_CURVE_E as AUDIO_VOLUME_CURVE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAUDIO_VOLUME_CURVE_S {
    pub enCurveType: AUDIO_VOLUME_CURVE_E,
    pub s32Resolution: RK_S32,
    pub fMinDB: RK_FLOAT,
    pub fMaxDB: RK_FLOAT,
    pub pCurveTable: *mut RK_U32,
}

#[test]
fn bindgen_test_layout_rkAUDIO_VOLUME_CURVE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_VOLUME_CURVE_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_VOLUME_CURVE_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkAUDIO_VOLUME_CURVE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_VOLUME_CURVE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAUDIO_VOLUME_CURVE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCurveType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_VOLUME_CURVE_S),
        "::",
        stringify!(enCurveType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Resolution) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_VOLUME_CURVE_S),
        "::",
        stringify!(s32Resolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fMinDB) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_VOLUME_CURVE_S),
        "::",
        stringify!(fMinDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fMaxDB) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_VOLUME_CURVE_S),
        "::",
        stringify!(fMaxDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCurveTable) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_VOLUME_CURVE_S),
        "::",
        stringify!(pCurveTable)
        )
    );
}

impl Default for rkAUDIO_VOLUME_CURVE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AUDIO_VOLUME_CURVE_S = rkAUDIO_VOLUME_CURVE_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAUDIO_SAVE_FILE_INFO_S {
    pub bCfg: RK_BOOL,
    pub aFilePath: [RK_CHAR; 256usize],
    pub aFileName: [RK_CHAR; 256usize],
    pub u32FileSize: RK_U32,
}

#[test]
fn bindgen_test_layout_rkAUDIO_SAVE_FILE_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_SAVE_FILE_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_SAVE_FILE_INFO_S>(),
        520usize,
        concat!("Size of: ", stringify!(rkAUDIO_SAVE_FILE_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_SAVE_FILE_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAUDIO_SAVE_FILE_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bCfg) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_SAVE_FILE_INFO_S),
        "::",
        stringify!(bCfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aFilePath) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_SAVE_FILE_INFO_S),
        "::",
        stringify!(aFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aFileName) as usize - ptr as usize },
        260usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_SAVE_FILE_INFO_S),
        "::",
        stringify!(aFileName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FileSize) as usize - ptr as usize },
        516usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_SAVE_FILE_INFO_S),
        "::",
        stringify!(u32FileSize)
        )
    );
}

impl Default for rkAUDIO_SAVE_FILE_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AUDIO_SAVE_FILE_INFO_S = rkAUDIO_SAVE_FILE_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAUDIO_FILE_STATUS_S {
    pub bSaving: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkAUDIO_FILE_STATUS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_FILE_STATUS_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_FILE_STATUS_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkAUDIO_FILE_STATUS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_FILE_STATUS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAUDIO_FILE_STATUS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSaving) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_FILE_STATUS_S),
        "::",
        stringify!(bSaving)
        )
    );
}

impl Default for rkAUDIO_FILE_STATUS_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AUDIO_FILE_STATUS_S = rkAUDIO_FILE_STATUS_S;

pub const rkAIO_VQE_CONFIG_METHOD_AIO_VQE_CONFIG_NONE: rkAIO_VQE_CONFIG_METHOD = 0;
pub const rkAIO_VQE_CONFIG_METHOD_AIO_VQE_CONFIG_USER: rkAIO_VQE_CONFIG_METHOD = 1;
pub const rkAIO_VQE_CONFIG_METHOD_AIO_VQE_CONFIG_LOAD_FILE: rkAIO_VQE_CONFIG_METHOD = 2;

pub type rkAIO_VQE_CONFIG_METHOD = ::std::os::raw::c_uint;

pub use self::rkAIO_VQE_CONFIG_METHOD as AIO_VQE_CONFIG_METHOD;

pub const rkAI_VQE_TYPE_S_AI_VQE_NONE: rkAI_VQE_TYPE_S = 0;
pub const rkAI_VQE_TYPE_S_AI_VQE_RECORD: rkAI_VQE_TYPE_S = 1;
pub const rkAI_VQE_TYPE_S_AI_VQE_TALK: rkAI_VQE_TYPE_S = 2;

pub type rkAI_VQE_TYPE_S = ::std::os::raw::c_uint;

pub use self::rkAI_VQE_TYPE_S as AI_VQE_TYPE_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkAI_VQE_CONFIG_S {
    pub enCfgMode: AIO_VQE_CONFIG_METHOD,
    pub s32WorkSampleRate: RK_S32,
    pub s32FrameSample: RK_S32,
    pub __bindgen_anon_1: rkAI_VQE_CONFIG_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkAI_VQE_CONFIG_S__bindgen_ty_1 {
    pub aCfgFile: [RK_CHAR; 256usize],
}

#[test]
fn bindgen_test_layout_rkAI_VQE_CONFIG_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_VQE_CONFIG_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_VQE_CONFIG_S__bindgen_ty_1>(),
        256usize,
        concat!("Size of: ", stringify!(rkAI_VQE_CONFIG_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_VQE_CONFIG_S__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(rkAI_VQE_CONFIG_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aCfgFile) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_VQE_CONFIG_S__bindgen_ty_1),
        "::",
        stringify!(aCfgFile)
        )
    );
}

impl Default for rkAI_VQE_CONFIG_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkAI_VQE_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_VQE_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_VQE_CONFIG_S>(),
        268usize,
        concat!("Size of: ", stringify!(rkAI_VQE_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_VQE_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_VQE_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCfgMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_VQE_CONFIG_S),
        "::",
        stringify!(enCfgMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32WorkSampleRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_VQE_CONFIG_S),
        "::",
        stringify!(s32WorkSampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32FrameSample) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_VQE_CONFIG_S),
        "::",
        stringify!(s32FrameSample)
        )
    );
}

impl Default for rkAI_VQE_CONFIG_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AI_VQE_CONFIG_S = rkAI_VQE_CONFIG_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAI_AED_CONFIG_S {
    pub fSnrDB: RK_FLOAT,
    pub fLsdDB: RK_FLOAT,
    pub s32Policy: RK_S32,
}

#[test]
fn bindgen_test_layout_rkAI_AED_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_AED_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_AED_CONFIG_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkAI_AED_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_AED_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_AED_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fSnrDB) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_AED_CONFIG_S),
        "::",
        stringify!(fSnrDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fLsdDB) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_AED_CONFIG_S),
        "::",
        stringify!(fLsdDB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Policy) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_AED_CONFIG_S),
        "::",
        stringify!(s32Policy)
        )
    );
}

pub type AI_AED_CONFIG_S = rkAI_AED_CONFIG_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAI_AED_RESULT_S {
    pub bAcousticEventDetected: RK_BOOL,
    pub bLoudSoundDetected: RK_BOOL,
    pub lsdResult: RK_FLOAT,
}

#[test]
fn bindgen_test_layout_rkAI_AED_RESULT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_AED_RESULT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_AED_RESULT_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkAI_AED_RESULT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_AED_RESULT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_AED_RESULT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAcousticEventDetected) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_AED_RESULT_S),
        "::",
        stringify!(bAcousticEventDetected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bLoudSoundDetected) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_AED_RESULT_S),
        "::",
        stringify!(bLoudSoundDetected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lsdResult) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_AED_RESULT_S),
        "::",
        stringify!(lsdResult)
        )
    );
}

impl Default for rkAI_AED_RESULT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AI_AED_RESULT_S = rkAI_AED_RESULT_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAI_BCD_CONFIG_S {
    pub mFrameLen: RK_S32,
    pub mBlankFrameMax: RK_S32,
    pub mCryEnergy: RK_FLOAT,
    pub mJudgeEnergy: RK_FLOAT,
    pub mCryThres1: RK_FLOAT,
    pub mCryThres2: RK_FLOAT,
}

#[test]
fn bindgen_test_layout_rkAI_BCD_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_BCD_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_BCD_CONFIG_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkAI_BCD_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_BCD_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_BCD_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mFrameLen) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BCD_CONFIG_S),
        "::",
        stringify!(mFrameLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mBlankFrameMax) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BCD_CONFIG_S),
        "::",
        stringify!(mBlankFrameMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mCryEnergy) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BCD_CONFIG_S),
        "::",
        stringify!(mCryEnergy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mJudgeEnergy) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BCD_CONFIG_S),
        "::",
        stringify!(mJudgeEnergy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mCryThres1) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BCD_CONFIG_S),
        "::",
        stringify!(mCryThres1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mCryThres2) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BCD_CONFIG_S),
        "::",
        stringify!(mCryThres2)
        )
    );
}

pub type AI_BCD_CONFIG_S = rkAI_BCD_CONFIG_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAI_BCD_RESULT_S {
    pub bBabyCry: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkAI_BCD_RESULT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_BCD_RESULT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_BCD_RESULT_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkAI_BCD_RESULT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_BCD_RESULT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_BCD_RESULT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBabyCry) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BCD_RESULT_S),
        "::",
        stringify!(bBabyCry)
        )
    );
}

impl Default for rkAI_BCD_RESULT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AI_BCD_RESULT_S = rkAI_BCD_RESULT_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAI_BUZ_CONFIG_S {
    pub mFrameLen: RK_S32,
    pub mBlankFrameMax: RK_S32,
    pub mEnergyMean: RK_FLOAT,
    pub mEnergyMax: RK_FLOAT,
    pub mBuzThres1: RK_FLOAT,
    pub mBuzThres2: RK_FLOAT,
}

#[test]
fn bindgen_test_layout_rkAI_BUZ_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_BUZ_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_BUZ_CONFIG_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkAI_BUZ_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_BUZ_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_BUZ_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mFrameLen) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BUZ_CONFIG_S),
        "::",
        stringify!(mFrameLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mBlankFrameMax) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BUZ_CONFIG_S),
        "::",
        stringify!(mBlankFrameMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mEnergyMean) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BUZ_CONFIG_S),
        "::",
        stringify!(mEnergyMean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mEnergyMax) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BUZ_CONFIG_S),
        "::",
        stringify!(mEnergyMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mBuzThres1) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BUZ_CONFIG_S),
        "::",
        stringify!(mBuzThres1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mBuzThres2) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BUZ_CONFIG_S),
        "::",
        stringify!(mBuzThres2)
        )
    );
}

pub type AI_BUZ_CONFIG_S = rkAI_BUZ_CONFIG_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAI_BUZ_RESULT_S {
    pub bBuzz: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkAI_BUZ_RESULT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_BUZ_RESULT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_BUZ_RESULT_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkAI_BUZ_RESULT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_BUZ_RESULT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_BUZ_RESULT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBuzz) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_BUZ_RESULT_S),
        "::",
        stringify!(bBuzz)
        )
    );
}

impl Default for rkAI_BUZ_RESULT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AI_BUZ_RESULT_S = rkAI_BUZ_RESULT_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAI_GBS_CONFIG_S {
    pub mFrameLen: RK_S32,
}

#[test]
fn bindgen_test_layout_rkAI_GBS_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_GBS_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_GBS_CONFIG_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkAI_GBS_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_GBS_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_GBS_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mFrameLen) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_GBS_CONFIG_S),
        "::",
        stringify!(mFrameLen)
        )
    );
}

pub type AI_GBS_CONFIG_S = rkAI_GBS_CONFIG_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAI_GBS_RESULT_S {
    pub bGbs: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkAI_GBS_RESULT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAI_GBS_RESULT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAI_GBS_RESULT_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkAI_GBS_RESULT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAI_GBS_RESULT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAI_GBS_RESULT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bGbs) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAI_GBS_RESULT_S),
        "::",
        stringify!(bGbs)
        )
    );
}

impl Default for rkAI_GBS_RESULT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AI_GBS_RESULT_S = rkAI_GBS_RESULT_S;

#[doc = "Defines the configure parameters of ANR."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAUDIO_ANR_CONFIG_S {
    pub fNoiseFactor: RK_FLOAT,
    pub s32SwU: RK_S32,
    pub fPsiMin: RK_FLOAT,
    pub fPsiMax: RK_FLOAT,
    pub fGmin: RK_FLOAT,
}

#[test]
fn bindgen_test_layout_rkAUDIO_ANR_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_ANR_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_ANR_CONFIG_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkAUDIO_ANR_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_ANR_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAUDIO_ANR_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fNoiseFactor) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ANR_CONFIG_S),
        "::",
        stringify!(fNoiseFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SwU) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ANR_CONFIG_S),
        "::",
        stringify!(s32SwU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fPsiMin) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ANR_CONFIG_S),
        "::",
        stringify!(fPsiMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fPsiMax) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ANR_CONFIG_S),
        "::",
        stringify!(fPsiMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fGmin) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_ANR_CONFIG_S),
        "::",
        stringify!(fGmin)
        )
    );
}

#[doc = "Defines the configure parameters of ANR."]
pub type AUDIO_ANR_CONFIG_S = rkAUDIO_ANR_CONFIG_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAUDIO_AGC_CONFIG_S {
    pub fAttackTime: RK_FLOAT,
    pub fReleaseTime: RK_FLOAT,
    pub fAttenuateTime: RK_FLOAT,
    pub fMaxGain: RK_FLOAT,
    pub fMaxPeak: RK_FLOAT,
    pub fRth0: RK_FLOAT,
    pub fRth1: RK_FLOAT,
    pub fRth2: RK_FLOAT,
    pub fRk0: RK_FLOAT,
    pub fRk1: RK_FLOAT,
    pub fRk2: RK_FLOAT,
    pub fLineGainDb: RK_FLOAT,
    pub s32SwSmL0: RK_S32,
    pub s32SwSmL1: RK_S32,
    pub s32SwSmL2: RK_S32,
}

#[test]
fn bindgen_test_layout_rkAUDIO_AGC_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAUDIO_AGC_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAUDIO_AGC_CONFIG_S>(),
        60usize,
        concat!("Size of: ", stringify!(rkAUDIO_AGC_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAUDIO_AGC_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAUDIO_AGC_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fAttackTime) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fAttackTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fReleaseTime) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fReleaseTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fAttenuateTime) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fAttenuateTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fMaxGain) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fMaxGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fMaxPeak) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fMaxPeak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fRth0) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fRth0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fRth1) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fRth1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fRth2) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fRth2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fRk0) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fRk0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fRk1) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fRk1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fRk2) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fRk2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fLineGainDb) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(fLineGainDb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SwSmL0) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(s32SwSmL0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SwSmL1) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(s32SwSmL1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SwSmL2) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAUDIO_AGC_CONFIG_S),
        "::",
        stringify!(s32SwSmL2)
        )
    );
}

pub type AUDIO_AGC_CONFIG_S = rkAUDIO_AGC_CONFIG_S;

pub const rkAO_VQE_MASK_AO_VQE_MASK_NONE: rkAO_VQE_MASK = 1;
pub const rkAO_VQE_MASK_AO_VQE_MASK_3A: rkAO_VQE_MASK = 2;
pub const rkAO_VQE_MASK_AO_VQE_MASK_AGC: rkAO_VQE_MASK = 4;
pub const rkAO_VQE_MASK_AO_VQE_MASK_ANR: rkAO_VQE_MASK = 8;

pub type rkAO_VQE_MASK = ::std::os::raw::c_uint;

pub use self::rkAO_VQE_MASK as AO_VQE_MASK;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAO_VQE_USER_CONFIG_S {
    pub u32OpenMask: RK_U32,
    pub stAgcCfg: AUDIO_AGC_CONFIG_S,
    pub stAnrCfg: AUDIO_ANR_CONFIG_S,
}

#[test]
fn bindgen_test_layout_rkAO_VQE_USER_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAO_VQE_USER_CONFIG_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAO_VQE_USER_CONFIG_S>(),
        84usize,
        concat!("Size of: ", stringify!(rkAO_VQE_USER_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAO_VQE_USER_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAO_VQE_USER_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OpenMask) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_VQE_USER_CONFIG_S),
        "::",
        stringify!(u32OpenMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAgcCfg) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_VQE_USER_CONFIG_S),
        "::",
        stringify!(stAgcCfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAnrCfg) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_VQE_USER_CONFIG_S),
        "::",
        stringify!(stAnrCfg)
        )
    );
}

pub type AO_VQE_USER_CONFIG_S = rkAO_VQE_USER_CONFIG_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkAO_VQE_CONFIG_S {
    pub enCfgMode: AIO_VQE_CONFIG_METHOD,
    pub s32WorkSampleRate: RK_S32,
    pub s32FrameSample: RK_S32,
    pub __bindgen_anon_1: rkAO_VQE_CONFIG_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkAO_VQE_CONFIG_S__bindgen_ty_1 {
    pub aCfgFile: [RK_CHAR; 256usize],
    pub stUsrCfg: AO_VQE_USER_CONFIG_S,
}

#[test]
fn bindgen_test_layout_rkAO_VQE_CONFIG_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkAO_VQE_CONFIG_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAO_VQE_CONFIG_S__bindgen_ty_1>(),
        256usize,
        concat!("Size of: ", stringify!(rkAO_VQE_CONFIG_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAO_VQE_CONFIG_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAO_VQE_CONFIG_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aCfgFile) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_VQE_CONFIG_S__bindgen_ty_1),
        "::",
        stringify!(aCfgFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stUsrCfg) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_VQE_CONFIG_S__bindgen_ty_1),
        "::",
        stringify!(stUsrCfg)
        )
    );
}

impl Default for rkAO_VQE_CONFIG_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkAO_VQE_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAO_VQE_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAO_VQE_CONFIG_S>(),
        268usize,
        concat!("Size of: ", stringify!(rkAO_VQE_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAO_VQE_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAO_VQE_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCfgMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_VQE_CONFIG_S),
        "::",
        stringify!(enCfgMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32WorkSampleRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_VQE_CONFIG_S),
        "::",
        stringify!(s32WorkSampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32FrameSample) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAO_VQE_CONFIG_S),
        "::",
        stringify!(s32FrameSample)
        )
    );
}

impl Default for rkAO_VQE_CONFIG_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AO_VQE_CONFIG_S = rkAO_VQE_CONFIG_S;

pub const rkEN_AIO_ERR_CODE_E_AIO_ERR_VQE_ERR: rkEN_AIO_ERR_CODE_E = 65;

pub type rkEN_AIO_ERR_CODE_E = ::std::os::raw::c_uint;

pub use self::rkEN_AIO_ERR_CODE_E as RK_AIO_ERR_CODE_E;

pub const rkADEC_MODE_E_ADEC_MODE_PACK: rkADEC_MODE_E = 0;
pub const rkADEC_MODE_E_ADEC_MODE_STREAM: rkADEC_MODE_E = 1;
pub const rkADEC_MODE_E_ADEC_MODE_BUTT: rkADEC_MODE_E = 2;

pub type rkADEC_MODE_E = ::std::os::raw::c_uint;

pub use self::rkADEC_MODE_E as ADEC_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkADEC_ATTR_CODEC_S {
    pub enType: RK_CODEC_ID_E,
    pub u32Channels: RK_U32,
    pub u32SampleRate: RK_U32,
    pub u32BitPerCodedSample: RK_U32,
    pub pExtraData: *mut ::std::os::raw::c_void,
    pub u32ExtraDataSize: RK_U32,
    pub u32Resv: [RK_U32; 4usize],
    pub pstResv: *mut ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout_rkADEC_ATTR_CODEC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkADEC_ATTR_CODEC_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkADEC_ATTR_CODEC_S>(),
        44usize,
        concat!("Size of: ", stringify!(rkADEC_ATTR_CODEC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkADEC_ATTR_CODEC_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkADEC_ATTR_CODEC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_ATTR_CODEC_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_ATTR_CODEC_S),
        "::",
        stringify!(u32Channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SampleRate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_ATTR_CODEC_S),
        "::",
        stringify!(u32SampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BitPerCodedSample) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_ATTR_CODEC_S),
        "::",
        stringify!(u32BitPerCodedSample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pExtraData) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_ATTR_CODEC_S),
        "::",
        stringify!(pExtraData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ExtraDataSize) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_ATTR_CODEC_S),
        "::",
        stringify!(u32ExtraDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Resv) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_ATTR_CODEC_S),
        "::",
        stringify!(u32Resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstResv) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_ATTR_CODEC_S),
        "::",
        stringify!(pstResv)
        )
    );
}

impl Default for rkADEC_ATTR_CODEC_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type ADEC_ATTR_CODEC_S = rkADEC_ATTR_CODEC_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkADEC_FRAME_INFO_S {
    pub u32SampleRate: RK_U32,
    pub u32Channels: RK_U32,
    pub u64ChnLayout: RK_U64,
    pub enBitWidth: AUDIO_BIT_WIDTH_E,
    pub resv: [RK_U32; 2usize],
}

#[test]
fn bindgen_test_layout_rkADEC_FRAME_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkADEC_FRAME_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkADEC_FRAME_INFO_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkADEC_FRAME_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkADEC_FRAME_INFO_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkADEC_FRAME_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SampleRate) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_FRAME_INFO_S),
        "::",
        stringify!(u32SampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Channels) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_FRAME_INFO_S),
        "::",
        stringify!(u32Channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64ChnLayout) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_FRAME_INFO_S),
        "::",
        stringify!(u64ChnLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enBitWidth) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_FRAME_INFO_S),
        "::",
        stringify!(enBitWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resv) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_FRAME_INFO_S),
        "::",
        stringify!(resv)
        )
    );
}

impl Default for rkADEC_FRAME_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type ADEC_FRAME_INFO_S = rkADEC_FRAME_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkADEC_CH_ATTR_S {
    pub enType: RK_CODEC_ID_E,
    pub enMode: ADEC_MODE_E,
    pub u32BufCount: RK_U32,
    pub u32BufSize: RK_U32,
    pub stCodecAttr: ADEC_ATTR_CODEC_S,
}

#[test]
fn bindgen_test_layout_rkADEC_CH_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkADEC_CH_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkADEC_CH_ATTR_S>(),
        60usize,
        concat!("Size of: ", stringify!(rkADEC_CH_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkADEC_CH_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkADEC_CH_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_ATTR_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_ATTR_S),
        "::",
        stringify!(enMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufCount) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_ATTR_S),
        "::",
        stringify!(u32BufCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufSize) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_ATTR_S),
        "::",
        stringify!(u32BufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCodecAttr) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_ATTR_S),
        "::",
        stringify!(stCodecAttr)
        )
    );
}

impl Default for rkADEC_CH_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type ADEC_CHN_ATTR_S = rkADEC_CH_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkADEC_CH_STATE_S {
    pub bEndOfStream: RK_BOOL,
    pub u32BufferFrmNum: RK_U32,
    pub u32BufferFreeNum: RK_U32,
    pub u32BufferBusyNum: RK_U32,
}

#[test]
fn bindgen_test_layout_rkADEC_CH_STATE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkADEC_CH_STATE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkADEC_CH_STATE_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkADEC_CH_STATE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkADEC_CH_STATE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkADEC_CH_STATE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEndOfStream) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_STATE_S),
        "::",
        stringify!(bEndOfStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufferFrmNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_STATE_S),
        "::",
        stringify!(u32BufferFrmNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufferFreeNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_STATE_S),
        "::",
        stringify!(u32BufferFreeNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufferBusyNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_CH_STATE_S),
        "::",
        stringify!(u32BufferBusyNum)
        )
    );
}

impl Default for rkADEC_CH_STATE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type ADEC_CHN_STATE_S = rkADEC_CH_STATE_S;

pub const rkEN_ADEC_ERR_CODE_E_ADEC_ERR_DECODER_ERR: rkEN_ADEC_ERR_CODE_E = 64;
pub const rkEN_ADEC_ERR_CODE_E_ADEC_ERR_BUF_LACK: rkEN_ADEC_ERR_CODE_E = 65;
pub const rkEN_ADEC_ERR_CODE_E_ADEC_ERR_REGISTER_ERR: rkEN_ADEC_ERR_CODE_E = 66;

pub type rkEN_ADEC_ERR_CODE_E = ::std::os::raw::c_uint;

pub use self::rkEN_ADEC_ERR_CODE_E as RK_ADEC_ERR_CODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkADEC_DECODER_S {
    pub enType: RK_CODEC_ID_E,
    pub aszName: [RK_UCHAR; 17usize],
    pub pfnOpenDecoder: ::std::option::Option<
        unsafe extern "C" fn(
            pDecoderAttr: *mut ::std::os::raw::c_void,
            ppDecoder: *mut *mut ::std::os::raw::c_void,
        ) -> RK_S32,
    >,
    pub pfnDecodeFrm: ::std::option::Option<
        unsafe extern "C" fn(
            pDecoder: *mut ::std::os::raw::c_void,
            pParam: *mut ::std::os::raw::c_void,
        ) -> RK_S32,
    >,
    pub pfnGetFrmInfo: ::std::option::Option<
        unsafe extern "C" fn(
            pDecoder: *mut ::std::os::raw::c_void,
            pInfo: *mut ::std::os::raw::c_void,
        ) -> RK_S32,
    >,
    pub pfnCloseDecoder: ::std::option::Option<
        unsafe extern "C" fn(pDecoder: *mut ::std::os::raw::c_void) -> RK_S32,
    >,
    pub pfnResetDecoder: ::std::option::Option<
        unsafe extern "C" fn(pDecoder: *mut ::std::os::raw::c_void) -> RK_S32,
    >,
}

#[test]
fn bindgen_test_layout_rkADEC_DECODER_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkADEC_DECODER_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkADEC_DECODER_S>(),
        44usize,
        concat!("Size of: ", stringify!(rkADEC_DECODER_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkADEC_DECODER_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkADEC_DECODER_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_DECODER_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aszName) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_DECODER_S),
        "::",
        stringify!(aszName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnOpenDecoder) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_DECODER_S),
        "::",
        stringify!(pfnOpenDecoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnDecodeFrm) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_DECODER_S),
        "::",
        stringify!(pfnDecodeFrm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetFrmInfo) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_DECODER_S),
        "::",
        stringify!(pfnGetFrmInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCloseDecoder) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_DECODER_S),
        "::",
        stringify!(pfnCloseDecoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnResetDecoder) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkADEC_DECODER_S),
        "::",
        stringify!(pfnResetDecoder)
        )
    );
}

impl Default for rkADEC_DECODER_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type ADEC_DECODER_S = rkADEC_DECODER_S;

pub const rkADEC_DECODER_RESULT_ADEC_DECODER_OK: rkADEC_DECODER_RESULT = 0;
pub const rkADEC_DECODER_RESULT_ADEC_DECODER_TRY_AGAIN: rkADEC_DECODER_RESULT = 1;
pub const rkADEC_DECODER_RESULT_ADEC_DECODER_ERROR: rkADEC_DECODER_RESULT = 2;
pub const rkADEC_DECODER_RESULT_ADEC_DECODER_EOS: rkADEC_DECODER_RESULT = 3;

pub type rkADEC_DECODER_RESULT = ::std::os::raw::c_uint;

pub use self::rkADEC_DECODER_RESULT as ADEC_DECODER_RESULT;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAENC_ATTR_CODEC_S {
    pub enType: RK_CODEC_ID_E,
    pub enBitwidth: AUDIO_BIT_WIDTH_E,
    pub u32Channels: RK_U32,
    pub u32SampleRate: RK_U32,
    pub u32Resv: [RK_U32; 4usize],
    pub pstResv: *mut ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout_rkAENC_ATTR_CODEC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAENC_ATTR_CODEC_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAENC_ATTR_CODEC_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkAENC_ATTR_CODEC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAENC_ATTR_CODEC_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAENC_ATTR_CODEC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ATTR_CODEC_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enBitwidth) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ATTR_CODEC_S),
        "::",
        stringify!(enBitwidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Channels) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ATTR_CODEC_S),
        "::",
        stringify!(u32Channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SampleRate) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ATTR_CODEC_S),
        "::",
        stringify!(u32SampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Resv) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ATTR_CODEC_S),
        "::",
        stringify!(u32Resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstResv) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ATTR_CODEC_S),
        "::",
        stringify!(pstResv)
        )
    );
}

impl Default for rkAENC_ATTR_CODEC_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AENC_ATTR_CODEC_S = rkAENC_ATTR_CODEC_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAENC_CHN_ATTR_S {
    pub enType: RK_CODEC_ID_E,
    pub u32BufCount: RK_U32,
    pub stCodecAttr: AENC_ATTR_CODEC_S,
}

#[test]
fn bindgen_test_layout_rkAENC_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAENC_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAENC_CHN_ATTR_S>(),
        44usize,
        concat!("Size of: ", stringify!(rkAENC_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAENC_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAENC_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_CHN_ATTR_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufCount) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_CHN_ATTR_S),
        "::",
        stringify!(u32BufCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCodecAttr) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_CHN_ATTR_S),
        "::",
        stringify!(stCodecAttr)
        )
    );
}

impl Default for rkAENC_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AENC_CHN_ATTR_S = rkAENC_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAENC_ENCODER_S {
    pub enType: RK_CODEC_ID_E,
    pub u32MaxFrmLen: RK_U32,
    pub aszName: [RK_CHAR; 17usize],
    pub pfnOpenEncoder: ::std::option::Option<
        unsafe extern "C" fn(
            pEncoderAttr: *mut ::std::os::raw::c_void,
            ppEncoder: *mut *mut ::std::os::raw::c_void,
        ) -> RK_S32,
    >,
    pub pfnEncodeFrm: ::std::option::Option<
        unsafe extern "C" fn(
            pEncoder: *mut ::std::os::raw::c_void,
            pParam: *mut ::std::os::raw::c_void,
        ) -> RK_S32,
    >,
    pub pfnCloseEncoder: ::std::option::Option<
        unsafe extern "C" fn(pEncoder: *mut ::std::os::raw::c_void) -> RK_S32,
    >,
}

#[test]
fn bindgen_test_layout_rkAENC_ENCODER_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAENC_ENCODER_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAENC_ENCODER_S>(),
        40usize,
        concat!("Size of: ", stringify!(rkAENC_ENCODER_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAENC_ENCODER_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAENC_ENCODER_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ENCODER_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxFrmLen) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ENCODER_S),
        "::",
        stringify!(u32MaxFrmLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aszName) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ENCODER_S),
        "::",
        stringify!(aszName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnOpenEncoder) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ENCODER_S),
        "::",
        stringify!(pfnOpenEncoder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnEncodeFrm) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ENCODER_S),
        "::",
        stringify!(pfnEncodeFrm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCloseEncoder) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAENC_ENCODER_S),
        "::",
        stringify!(pfnCloseEncoder)
        )
    );
}

impl Default for rkAENC_ENCODER_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AENC_ENCODER_S = rkAENC_ENCODER_S;

pub const rkEN_AENC_ERR_CODE_E_AENC_ERR_ENCODER_ERR: rkEN_AENC_ERR_CODE_E = 64;
pub const rkEN_AENC_ERR_CODE_E_AENC_ERR_VQE_ERR: rkEN_AENC_ERR_CODE_E = 65;
pub const rkEN_AENC_ERR_CODE_E_AENC_ERR_REGISTER_ERR: rkEN_AENC_ERR_CODE_E = 66;

pub type rkEN_AENC_ERR_CODE_E = ::std::os::raw::c_uint;

pub use self::rkEN_AENC_ERR_CODE_E as EN_AENC_ERR_CODE_E;

pub const rkENC_ENCODER_RESULT_AENC_ENCODER_OK: rkENC_ENCODER_RESULT = 0;
pub const rkENC_ENCODER_RESULT_AENC_ENCODER_TRY_AGAIN: rkENC_ENCODER_RESULT = 1;
pub const rkENC_ENCODER_RESULT_AENC_ENCODER_ERROR: rkENC_ENCODER_RESULT = 2;
pub const rkENC_ENCODER_RESULT_AENC_ENCODER_EOS: rkENC_ENCODER_RESULT = 3;

pub type rkENC_ENCODER_RESULT = ::std::os::raw::c_uint;

pub use self::rkENC_ENCODER_RESULT as AENC_ENCODER_RESULT;

pub const rkAUDIO_FILTER_TYPE_E_AUDIO_FILTER_RESAMPLE: rkAUDIO_FILTER_TYPE_E = 0;
pub const rkAUDIO_FILTER_TYPE_E_AUDIO_FILTER_3A: rkAUDIO_FILTER_TYPE_E = 1;
pub const rkAUDIO_FILTER_TYPE_E_AUDIO_FILTER_BUTT: rkAUDIO_FILTER_TYPE_E = 2;

pub type rkAUDIO_FILTER_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkAUDIO_FILTER_TYPE_E as AUDIO_FILTER_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAF_RESAMPLE_ATTR_S {
    pub u32InRate: RK_U32,
    pub u32InChn: RK_U32,
    pub enInBitWidth: AUDIO_BIT_WIDTH_E,
    pub u32OutRate: RK_U32,
    pub u32OutChn: RK_U32,
    pub enOutBitWidth: AUDIO_BIT_WIDTH_E,
}

#[test]
fn bindgen_test_layout_rkAF_RESAMPLE_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAF_RESAMPLE_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAF_RESAMPLE_ATTR_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkAF_RESAMPLE_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAF_RESAMPLE_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAF_RESAMPLE_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32InRate) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_RESAMPLE_ATTR_S),
        "::",
        stringify!(u32InRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32InChn) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_RESAMPLE_ATTR_S),
        "::",
        stringify!(u32InChn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enInBitWidth) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_RESAMPLE_ATTR_S),
        "::",
        stringify!(enInBitWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OutRate) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_RESAMPLE_ATTR_S),
        "::",
        stringify!(u32OutRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OutChn) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_RESAMPLE_ATTR_S),
        "::",
        stringify!(u32OutChn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enOutBitWidth) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_RESAMPLE_ATTR_S),
        "::",
        stringify!(enOutBitWidth)
        )
    );
}

impl Default for rkAF_RESAMPLE_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AF_RESAMPLE_ATTR_S = rkAF_RESAMPLE_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAF_3A_ATTR_S {
    pub cfgPath: [::std::os::raw::c_char; 256usize],
    pub u32SampleRate: RK_U32,
    pub u32Channels: RK_U32,
    pub enBitWidth: AUDIO_BIT_WIDTH_E,
    pub u32ChnLayout: RK_U32,
    pub u32RefLayout: RK_U32,
    pub u32RecLayout: RK_U32,
}

#[test]
fn bindgen_test_layout_rkAF_3A_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAF_3A_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAF_3A_ATTR_S>(),
        280usize,
        concat!("Size of: ", stringify!(rkAF_3A_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAF_3A_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAF_3A_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cfgPath) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_3A_ATTR_S),
        "::",
        stringify!(cfgPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SampleRate) as usize - ptr as usize },
        256usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_3A_ATTR_S),
        "::",
        stringify!(u32SampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Channels) as usize - ptr as usize },
        260usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_3A_ATTR_S),
        "::",
        stringify!(u32Channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enBitWidth) as usize - ptr as usize },
        264usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_3A_ATTR_S),
        "::",
        stringify!(enBitWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ChnLayout) as usize - ptr as usize },
        268usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_3A_ATTR_S),
        "::",
        stringify!(u32ChnLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RefLayout) as usize - ptr as usize },
        272usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_3A_ATTR_S),
        "::",
        stringify!(u32RefLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RecLayout) as usize - ptr as usize },
        276usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_3A_ATTR_S),
        "::",
        stringify!(u32RecLayout)
        )
    );
}

impl Default for rkAF_3A_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AF_3A_ATTR_S = rkAF_3A_ATTR_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkAF_ATTR_S {
    pub enType: AUDIO_FILTER_TYPE_E,
    pub u32InBufCount: RK_U32,
    pub u32OutBufCount: RK_U32,
    pub __bindgen_anon_1: rkAF_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkAF_ATTR_S__bindgen_ty_1 {
    pub stResAttr: AF_RESAMPLE_ATTR_S,
    pub st3AAttr: AF_3A_ATTR_S,
}

#[test]
fn bindgen_test_layout_rkAF_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkAF_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAF_ATTR_S__bindgen_ty_1>(),
        280usize,
        concat!("Size of: ", stringify!(rkAF_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAF_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAF_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stResAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stResAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st3AAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(st3AAttr)
        )
    );
}

impl Default for rkAF_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkAF_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAF_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAF_ATTR_S>(),
        292usize,
        concat!("Size of: ", stringify!(rkAF_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAF_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAF_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_ATTR_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32InBufCount) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_ATTR_S),
        "::",
        stringify!(u32InBufCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OutBufCount) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAF_ATTR_S),
        "::",
        stringify!(u32OutBufCount)
        )
    );
}

impl Default for rkAF_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AF_ATTR_S = rkAF_ATTR_S;

pub const rkOPERATION_MODE_E_OPERATION_MODE_AUTO: rkOPERATION_MODE_E = 0;
pub const rkOPERATION_MODE_E_OPERATION_MODE_MANUAL: rkOPERATION_MODE_E = 1;
pub const rkOPERATION_MODE_E_OPERATION_MODE_BUTT: rkOPERATION_MODE_E = 2;

pub type rkOPERATION_MODE_E = ::std::os::raw::c_uint;

pub use self::rkOPERATION_MODE_E as OPERATION_MODE_E;

pub const rkROTATION_E_ROTATION_0: rkROTATION_E = 0;
pub const rkROTATION_E_ROTATION_90: rkROTATION_E = 1;
pub const rkROTATION_E_ROTATION_180: rkROTATION_E = 2;
pub const rkROTATION_E_ROTATION_270: rkROTATION_E = 3;
pub const rkROTATION_E_ROTATION_BUTT: rkROTATION_E = 4;

pub type rkROTATION_E = ::std::os::raw::c_uint;

pub use self::rkROTATION_E as ROTATION_E;

pub const rkMIRROR_E_MIRROR_NONE: rkMIRROR_E = 0;
pub const rkMIRROR_E_MIRROR_HORIZONTAL: rkMIRROR_E = 1;
pub const rkMIRROR_E_MIRROR_VERTICAL: rkMIRROR_E = 2;
pub const rkMIRROR_E_MIRROR_BOTH: rkMIRROR_E = 3;
pub const rkMIRROR_E_MIRROR_BUTT: rkMIRROR_E = 4;

pub type rkMIRROR_E = ::std::os::raw::c_uint;

pub use self::rkMIRROR_E as MIRROR_E;

pub const rkMB_SOURCE_E_MB_SOURCE_COMMON: rkMB_SOURCE_E = 0;
pub const rkMB_SOURCE_E_MB_SOURCE_MODULE: rkMB_SOURCE_E = 1;
pub const rkMB_SOURCE_E_MB_SOURCE_PRIVATE: rkMB_SOURCE_E = 2;
pub const rkMB_SOURCE_E_MB_SOURCE_USER: rkMB_SOURCE_E = 3;
pub const rkMB_SOURCE_E_MB_SOURCE_BUTT: rkMB_SOURCE_E = 4;

pub type rkMB_SOURCE_E = ::std::os::raw::c_uint;

pub use self::rkMB_SOURCE_E as MB_SOURCE_E;

pub const rkDATA_RATE_E_DATA_RATE_X1: rkDATA_RATE_E = 0;
pub const rkDATA_RATE_E_DATA_RATE_X2: rkDATA_RATE_E = 1;
pub const rkDATA_RATE_E_DATA_RATE_BUTT: rkDATA_RATE_E = 2;

pub type rkDATA_RATE_E = ::std::os::raw::c_uint;

pub use self::rkDATA_RATE_E as DATA_RATE_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkBORDER_S {
    pub u32TopWidth: RK_U32,
    pub u32BottomWidth: RK_U32,
    pub u32LeftWidth: RK_U32,
    pub u32RightWidth: RK_U32,
    pub u32Color: RK_U32,
}

#[test]
fn bindgen_test_layout_rkBORDER_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkBORDER_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkBORDER_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkBORDER_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkBORDER_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkBORDER_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32TopWidth) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBORDER_S),
        "::",
        stringify!(u32TopWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BottomWidth) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBORDER_S),
        "::",
        stringify!(u32BottomWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftWidth) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBORDER_S),
        "::",
        stringify!(u32LeftWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RightWidth) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBORDER_S),
        "::",
        stringify!(u32RightWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Color) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBORDER_S),
        "::",
        stringify!(u32Color)
        )
    );
}

pub type BORDER_S = rkBORDER_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkPOINT_S {
    pub s32X: RK_S32,
    pub s32Y: RK_S32,
}

#[test]
fn bindgen_test_layout_rkPOINT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkPOINT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkPOINT_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkPOINT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkPOINT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkPOINT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32X) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkPOINT_S),
        "::",
        stringify!(s32X)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Y) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkPOINT_S),
        "::",
        stringify!(s32Y)
        )
    );
}

pub type POINT_S = rkPOINT_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkSIZE_S {
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
}

#[test]
fn bindgen_test_layout_rkSIZE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkSIZE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkSIZE_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkSIZE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkSIZE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkSIZE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSIZE_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSIZE_S),
        "::",
        stringify!(u32Height)
        )
    );
}

pub type SIZE_S = rkSIZE_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkRECT_S {
    pub s32X: RK_S32,
    pub s32Y: RK_S32,
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
}

#[test]
fn bindgen_test_layout_rkRECT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkRECT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkRECT_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkRECT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkRECT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkRECT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32X) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRECT_S),
        "::",
        stringify!(s32X)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Y) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRECT_S),
        "::",
        stringify!(s32Y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRECT_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRECT_S),
        "::",
        stringify!(u32Height)
        )
    );
}

pub type RECT_S = rkRECT_S;

#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct rkVIDEO_REGION_INFO_S {
    pub u32RegionNum: RK_U32,
    pub __bindgen_padding_0: [u32; 3usize],
    pub pstRegion: *mut RECT_S,
}

#[test]
fn bindgen_test_layout_rkVIDEO_REGION_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVIDEO_REGION_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVIDEO_REGION_INFO_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVIDEO_REGION_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVIDEO_REGION_INFO_S>(),
        16usize,
        concat!("Alignment of ", stringify!(rkVIDEO_REGION_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RegionNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_REGION_INFO_S),
        "::",
        stringify!(u32RegionNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstRegion) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_REGION_INFO_S),
        "::",
        stringify!(pstRegion)
        )
    );
}

impl Default for rkVIDEO_REGION_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VIDEO_REGION_INFO_S = rkVIDEO_REGION_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkCROP_INFO_S {
    pub bEnable: RK_BOOL,
    pub stRect: RECT_S,
}

#[test]
fn bindgen_test_layout_rkCROP_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkCROP_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkCROP_INFO_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkCROP_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkCROP_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkCROP_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkCROP_INFO_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkCROP_INFO_S),
        "::",
        stringify!(stRect)
        )
    );
}

impl Default for rkCROP_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type CROP_INFO_S = rkCROP_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkFRAME_RATE_CTRL_S {
    pub s32SrcFrameRate: RK_S32,
    pub s32DstFrameRate: RK_S32,
}

#[test]
fn bindgen_test_layout_rkFRAME_RATE_CTRL_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkFRAME_RATE_CTRL_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkFRAME_RATE_CTRL_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkFRAME_RATE_CTRL_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkFRAME_RATE_CTRL_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkFRAME_RATE_CTRL_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SrcFrameRate) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkFRAME_RATE_CTRL_S),
        "::",
        stringify!(s32SrcFrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DstFrameRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkFRAME_RATE_CTRL_S),
        "::",
        stringify!(s32DstFrameRate)
        )
    );
}

pub type FRAME_RATE_CTRL_S = rkFRAME_RATE_CTRL_S;

pub const rkASPECT_RATIO_E_ASPECT_RATIO_NONE: rkASPECT_RATIO_E = 0;
pub const rkASPECT_RATIO_E_ASPECT_RATIO_AUTO: rkASPECT_RATIO_E = 1;
pub const rkASPECT_RATIO_E_ASPECT_RATIO_MANUAL: rkASPECT_RATIO_E = 2;
pub const rkASPECT_RATIO_E_ASPECT_RATIO_BUTT: rkASPECT_RATIO_E = 3;

pub type rkASPECT_RATIO_E = ::std::os::raw::c_uint;

pub use self::rkASPECT_RATIO_E as ASPECT_RATIO_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkASPECT_RATIO_S {
    pub enMode: ASPECT_RATIO_E,
    pub u32BgColor: RK_U32,
    pub stVideoRect: RECT_S,
}

#[test]
fn bindgen_test_layout_rkASPECT_RATIO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkASPECT_RATIO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkASPECT_RATIO_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkASPECT_RATIO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkASPECT_RATIO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkASPECT_RATIO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkASPECT_RATIO_S),
        "::",
        stringify!(enMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BgColor) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkASPECT_RATIO_S),
        "::",
        stringify!(u32BgColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVideoRect) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkASPECT_RATIO_S),
        "::",
        stringify!(stVideoRect)
        )
    );
}

impl Default for rkASPECT_RATIO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type ASPECT_RATIO_S = rkASPECT_RATIO_S;

pub const rkPIXEL_FORMAT_E_RK_FMT_YUV420SP: rkPIXEL_FORMAT_E = 0;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV420SP_10BIT: rkPIXEL_FORMAT_E = 1;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV422SP: rkPIXEL_FORMAT_E = 2;
#[doc = "< Not part of ABI"]
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV422SP_10BIT: rkPIXEL_FORMAT_E = 3;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV420P: rkPIXEL_FORMAT_E = 4;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV420P_VU: rkPIXEL_FORMAT_E = 5;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV420SP_VU: rkPIXEL_FORMAT_E = 6;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV422P: rkPIXEL_FORMAT_E = 7;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV422SP_VU: rkPIXEL_FORMAT_E = 8;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV422_YUYV: rkPIXEL_FORMAT_E = 9;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV422_UYVY: rkPIXEL_FORMAT_E = 10;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV400SP: rkPIXEL_FORMAT_E = 11;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV440SP: rkPIXEL_FORMAT_E = 12;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV411SP: rkPIXEL_FORMAT_E = 13;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV444: rkPIXEL_FORMAT_E = 14;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV444SP: rkPIXEL_FORMAT_E = 15;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV444P: rkPIXEL_FORMAT_E = 16;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV422_YVYU: rkPIXEL_FORMAT_E = 17;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV422_VYUY: rkPIXEL_FORMAT_E = 18;
pub const rkPIXEL_FORMAT_E_RK_FMT_YUV_BUTT: rkPIXEL_FORMAT_E = 19;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB565: rkPIXEL_FORMAT_E = 65536;
pub const rkPIXEL_FORMAT_E_RK_FMT_BGR565: rkPIXEL_FORMAT_E = 65537;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB555: rkPIXEL_FORMAT_E = 65538;
pub const rkPIXEL_FORMAT_E_RK_FMT_BGR555: rkPIXEL_FORMAT_E = 65539;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB444: rkPIXEL_FORMAT_E = 65540;
pub const rkPIXEL_FORMAT_E_RK_FMT_BGR444: rkPIXEL_FORMAT_E = 65541;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB888: rkPIXEL_FORMAT_E = 65542;
pub const rkPIXEL_FORMAT_E_RK_FMT_BGR888: rkPIXEL_FORMAT_E = 65543;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB101010: rkPIXEL_FORMAT_E = 65544;
pub const rkPIXEL_FORMAT_E_RK_FMT_BGR101010: rkPIXEL_FORMAT_E = 65545;
pub const rkPIXEL_FORMAT_E_RK_FMT_ARGB1555: rkPIXEL_FORMAT_E = 65546;
pub const rkPIXEL_FORMAT_E_RK_FMT_ABGR1555: rkPIXEL_FORMAT_E = 65547;
pub const rkPIXEL_FORMAT_E_RK_FMT_ARGB4444: rkPIXEL_FORMAT_E = 65548;
pub const rkPIXEL_FORMAT_E_RK_FMT_ABGR4444: rkPIXEL_FORMAT_E = 65549;
pub const rkPIXEL_FORMAT_E_RK_FMT_ARGB8565: rkPIXEL_FORMAT_E = 65550;
pub const rkPIXEL_FORMAT_E_RK_FMT_ABGR8565: rkPIXEL_FORMAT_E = 65551;
pub const rkPIXEL_FORMAT_E_RK_FMT_ARGB8888: rkPIXEL_FORMAT_E = 65552;
pub const rkPIXEL_FORMAT_E_RK_FMT_ABGR8888: rkPIXEL_FORMAT_E = 65553;
pub const rkPIXEL_FORMAT_E_RK_FMT_BGRA8888: rkPIXEL_FORMAT_E = 65554;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGBA8888: rkPIXEL_FORMAT_E = 65555;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGBA5551: rkPIXEL_FORMAT_E = 65556;
pub const rkPIXEL_FORMAT_E_RK_FMT_BGRA5551: rkPIXEL_FORMAT_E = 65557;
pub const rkPIXEL_FORMAT_E_RK_FMT_BGRA4444: rkPIXEL_FORMAT_E = 65558;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGBA4444: rkPIXEL_FORMAT_E = 65559;
pub const rkPIXEL_FORMAT_E_RK_FMT_XBGR8888: rkPIXEL_FORMAT_E = 65560;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BUTT: rkPIXEL_FORMAT_E = 65561;
pub const rkPIXEL_FORMAT_E_RK_FMT_2BPP: rkPIXEL_FORMAT_E = 65562;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SBGGR_8BPP: rkPIXEL_FORMAT_E = 131072;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SGBRG_8BPP: rkPIXEL_FORMAT_E = 131073;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SGRBG_8BPP: rkPIXEL_FORMAT_E = 131074;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SRGGB_8BPP: rkPIXEL_FORMAT_E = 131075;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SBGGR_10BPP: rkPIXEL_FORMAT_E = 131076;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SGBRG_10BPP: rkPIXEL_FORMAT_E = 131077;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SGRBG_10BPP: rkPIXEL_FORMAT_E = 131078;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SRGGB_10BPP: rkPIXEL_FORMAT_E = 131079;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SBGGR_12BPP: rkPIXEL_FORMAT_E = 131080;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SGBRG_12BPP: rkPIXEL_FORMAT_E = 131081;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SGRBG_12BPP: rkPIXEL_FORMAT_E = 131082;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SRGGB_12BPP: rkPIXEL_FORMAT_E = 131083;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_14BPP: rkPIXEL_FORMAT_E = 131084;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_SBGGR_16BPP: rkPIXEL_FORMAT_E = 131085;
pub const rkPIXEL_FORMAT_E_RK_FMT_RGB_BAYER_BUTT: rkPIXEL_FORMAT_E = 131086;
pub const rkPIXEL_FORMAT_E_RK_FMT_BUTT: rkPIXEL_FORMAT_E = 131086;

pub type rkPIXEL_FORMAT_E = ::std::os::raw::c_uint;

pub use self::rkPIXEL_FORMAT_E as PIXEL_FORMAT_E;

pub const rkVIDEO_PROC_DEV_TYPE_E_VIDEO_PROC_DEV_GPU: rkVIDEO_PROC_DEV_TYPE_E = 0;
pub const rkVIDEO_PROC_DEV_TYPE_E_VIDEO_PROC_DEV_RGA: rkVIDEO_PROC_DEV_TYPE_E = 1;
pub const rkVIDEO_PROC_DEV_TYPE_E_VIDEO_PROC_DEV_BUTT: rkVIDEO_PROC_DEV_TYPE_E = 2;

pub type rkVIDEO_PROC_DEV_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkVIDEO_PROC_DEV_TYPE_E as VIDEO_PROC_DEV_TYPE_E;

pub const rkVIDEO_FIELD_E_VIDEO_FIELD_TOP: rkVIDEO_FIELD_E = 1;
pub const rkVIDEO_FIELD_E_VIDEO_FIELD_BOTTOM: rkVIDEO_FIELD_E = 2;
pub const rkVIDEO_FIELD_E_VIDEO_FIELD_INTERLACED: rkVIDEO_FIELD_E = 3;
pub const rkVIDEO_FIELD_E_VIDEO_FIELD_FRAME: rkVIDEO_FIELD_E = 4;
pub const rkVIDEO_FIELD_E_VIDEO_FIELD_BUTT: rkVIDEO_FIELD_E = 5;

pub type rkVIDEO_FIELD_E = ::std::os::raw::c_uint;

pub use self::rkVIDEO_FIELD_E as VIDEO_FIELD_E;

pub const rkVIDEO_FORMAT_E_VIDEO_FORMAT_LINEAR: rkVIDEO_FORMAT_E = 0;
pub const rkVIDEO_FORMAT_E_VIDEO_FORMAT_TILE_64x16: rkVIDEO_FORMAT_E = 1;
pub const rkVIDEO_FORMAT_E_VIDEO_FORMAT_TILE_16x8: rkVIDEO_FORMAT_E = 2;
pub const rkVIDEO_FORMAT_E_VIDEO_FORMAT_LINEAR_DISCRETE: rkVIDEO_FORMAT_E = 3;
pub const rkVIDEO_FORMAT_E_VIDEO_FORMAT_BUTT: rkVIDEO_FORMAT_E = 4;

pub type rkVIDEO_FORMAT_E = ::std::os::raw::c_uint;

pub use self::rkVIDEO_FORMAT_E as VIDEO_FORMAT_E;

pub const rkCOMPRESS_MODE_E_COMPRESS_MODE_NONE: rkCOMPRESS_MODE_E = 0;
pub const rkCOMPRESS_MODE_E_COMPRESS_AFBC_16x16: rkCOMPRESS_MODE_E = 1;
pub const rkCOMPRESS_MODE_E_COMPRESS_MODE_BUTT: rkCOMPRESS_MODE_E = 2;

pub type rkCOMPRESS_MODE_E = ::std::os::raw::c_uint;

pub use self::rkCOMPRESS_MODE_E as COMPRESS_MODE_E;

pub const rkVIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PREVIEW: rkVIDEO_DISPLAY_MODE_E = 0;
pub const rkVIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PLAYBACK: rkVIDEO_DISPLAY_MODE_E = 1;
pub const rkVIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_BUTT: rkVIDEO_DISPLAY_MODE_E = 2;

pub type rkVIDEO_DISPLAY_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVIDEO_DISPLAY_MODE_E as VIDEO_DISPLAY_MODE_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkLUMA_INFO_S {
    pub u64LumaPixSum: RK_U64,
    pub u32LumaPixAverage: RK_U32,
    pub u64PTS: RK_U64,
}

#[test]
fn bindgen_test_layout_rkLUMA_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkLUMA_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkLUMA_INFO_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkLUMA_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkLUMA_INFO_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkLUMA_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64LumaPixSum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLUMA_INFO_S),
        "::",
        stringify!(u64LumaPixSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LumaPixAverage) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLUMA_INFO_S),
        "::",
        stringify!(u32LumaPixAverage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64PTS) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLUMA_INFO_S),
        "::",
        stringify!(u64PTS)
        )
    );
}

pub type LUMA_INFO_S = rkLUMA_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkISP_DCF_CONST_INFO_S {
    pub au8ImageDescription: [RK_U8; 32usize],
    pub au8Make: [RK_U8; 32usize],
    pub au8Model: [RK_U8; 32usize],
    pub au8Software: [RK_U8; 32usize],
    pub u8LightSource: RK_U8,
    pub u32FocalLength: RK_U32,
    pub u8SceneType: RK_U8,
    pub u8CustomRendered: RK_U8,
    pub u8FocalLengthIn35mmFilm: RK_U8,
    pub u8SceneCaptureType: RK_U8,
    pub u8GainControl: RK_U8,
    pub u8Contrast: RK_U8,
    pub u8Saturation: RK_U8,
    pub u8Sharpness: RK_U8,
    pub u8MeteringMode: RK_U8,
}

#[test]
fn bindgen_test_layout_rkISP_DCF_CONST_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_DCF_CONST_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_DCF_CONST_INFO_S>(),
        148usize,
        concat!("Size of: ", stringify!(rkISP_DCF_CONST_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_DCF_CONST_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkISP_DCF_CONST_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au8ImageDescription) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(au8ImageDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au8Make) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(au8Make)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au8Model) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(au8Model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au8Software) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(au8Software)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8LightSource) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8LightSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FocalLength) as usize - ptr as usize },
        132usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u32FocalLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8SceneType) as usize - ptr as usize },
        136usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8SceneType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8CustomRendered) as usize - ptr as usize },
        137usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8CustomRendered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8FocalLengthIn35mmFilm) as usize - ptr as usize },
        138usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8FocalLengthIn35mmFilm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8SceneCaptureType) as usize - ptr as usize },
        139usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8SceneCaptureType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8GainControl) as usize - ptr as usize },
        140usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8GainControl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8Contrast) as usize - ptr as usize },
        141usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8Contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8Saturation) as usize - ptr as usize },
        142usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8Saturation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8Sharpness) as usize - ptr as usize },
        143usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8Sharpness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8MeteringMode) as usize - ptr as usize },
        144usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_CONST_INFO_S),
        "::",
        stringify!(u8MeteringMode)
        )
    );
}

pub type ISP_DCF_CONST_INFO_S = rkISP_DCF_CONST_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkISP_DCF_UPDATE_INFO_S {
    pub u32ISOSpeedRatings: RK_U32,
    pub u32ExposureTime: RK_U32,
    pub u32ExposureBiasValue: RK_U32,
    pub u8ExposureProgram: RK_U8,
    pub u32FNumber: RK_U32,
    pub u32MaxApertureValue: RK_U32,
    pub u8ExposureMode: RK_U8,
    pub u8WhiteBalance: RK_U8,
}

#[test]
fn bindgen_test_layout_rkISP_DCF_UPDATE_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_DCF_UPDATE_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_DCF_UPDATE_INFO_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkISP_DCF_UPDATE_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_DCF_UPDATE_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkISP_DCF_UPDATE_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ISOSpeedRatings) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_UPDATE_INFO_S),
        "::",
        stringify!(u32ISOSpeedRatings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ExposureTime) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_UPDATE_INFO_S),
        "::",
        stringify!(u32ExposureTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ExposureBiasValue) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_UPDATE_INFO_S),
        "::",
        stringify!(u32ExposureBiasValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8ExposureProgram) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_UPDATE_INFO_S),
        "::",
        stringify!(u8ExposureProgram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FNumber) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_UPDATE_INFO_S),
        "::",
        stringify!(u32FNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxApertureValue) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_UPDATE_INFO_S),
        "::",
        stringify!(u32MaxApertureValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8ExposureMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_UPDATE_INFO_S),
        "::",
        stringify!(u8ExposureMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8WhiteBalance) as usize - ptr as usize },
        25usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_UPDATE_INFO_S),
        "::",
        stringify!(u8WhiteBalance)
        )
    );
}

pub type ISP_DCF_UPDATE_INFO_S = rkISP_DCF_UPDATE_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkISP_DCF_INFO_S {
    pub stIspDCFConstInfo: ISP_DCF_CONST_INFO_S,
    pub stIspDCFUpdateInfo: ISP_DCF_UPDATE_INFO_S,
}

#[test]
fn bindgen_test_layout_rkISP_DCF_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_DCF_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_DCF_INFO_S>(),
        176usize,
        concat!("Size of: ", stringify!(rkISP_DCF_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_DCF_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkISP_DCF_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stIspDCFConstInfo) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_INFO_S),
        "::",
        stringify!(stIspDCFConstInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stIspDCFUpdateInfo) as usize - ptr as usize },
        148usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_DCF_INFO_S),
        "::",
        stringify!(stIspDCFUpdateInfo)
        )
    );
}

pub type ISP_DCF_INFO_S = rkISP_DCF_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkJPEG_DCF_S {
    pub au8CaptureTime: [RK_U8; 20usize],
    pub bFlash: RK_BOOL,
    pub u32DigitalZoomRatio: RK_U32,
    pub stIspDCFInfo: ISP_DCF_INFO_S,
}

#[test]
fn bindgen_test_layout_rkJPEG_DCF_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkJPEG_DCF_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkJPEG_DCF_S>(),
        204usize,
        concat!("Size of: ", stringify!(rkJPEG_DCF_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkJPEG_DCF_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkJPEG_DCF_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au8CaptureTime) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkJPEG_DCF_S),
        "::",
        stringify!(au8CaptureTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFlash) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkJPEG_DCF_S),
        "::",
        stringify!(bFlash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32DigitalZoomRatio) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkJPEG_DCF_S),
        "::",
        stringify!(u32DigitalZoomRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stIspDCFInfo) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkJPEG_DCF_S),
        "::",
        stringify!(stIspDCFInfo)
        )
    );
}

impl Default for rkJPEG_DCF_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type JPEG_DCF_S = rkJPEG_DCF_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkISP_FRAME_INFO_S {
    pub u32ISO: RK_U32,
    pub u32ExposureTime: RK_U32,
    pub u32IspDgain: RK_U32,
    pub u32Again: RK_U32,
    pub u32Dgain: RK_U32,
    pub au32Ratio: [RK_U32; 3usize],
    pub u32IspNrStrength: RK_U32,
    pub u32FNumber: RK_U32,
    pub u32SensorID: RK_U32,
    pub u32SensorMode: RK_U32,
    pub u32HmaxTimes: RK_U32,
    pub u32Vmax: RK_U32,
    pub u32VcNum: RK_U32,
}

#[test]
fn bindgen_test_layout_rkISP_FRAME_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_FRAME_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_FRAME_INFO_S>(),
        60usize,
        concat!("Size of: ", stringify!(rkISP_FRAME_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_FRAME_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkISP_FRAME_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ISO) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32ISO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ExposureTime) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32ExposureTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32IspDgain) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32IspDgain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Again) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32Again)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Dgain) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32Dgain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au32Ratio) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(au32Ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32IspNrStrength) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32IspNrStrength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FNumber) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32FNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SensorID) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32SensorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SensorMode) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32SensorMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32HmaxTimes) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32HmaxTimes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Vmax) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32Vmax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VcNum) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_FRAME_INFO_S),
        "::",
        stringify!(u32VcNum)
        )
    );
}

pub type ISP_FRAME_INFO_S = rkISP_FRAME_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkDNG_RATIONAL_S {
    pub u32Numerator: RK_U32,
    pub u32Denominator: RK_U32,
}

#[test]
fn bindgen_test_layout_rkDNG_RATIONAL_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkDNG_RATIONAL_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkDNG_RATIONAL_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkDNG_RATIONAL_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkDNG_RATIONAL_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkDNG_RATIONAL_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Numerator) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkDNG_RATIONAL_S),
        "::",
        stringify!(u32Numerator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Denominator) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkDNG_RATIONAL_S),
        "::",
        stringify!(u32Denominator)
        )
    );
}

pub type DNG_RATIONAL_S = rkDNG_RATIONAL_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkDNG_IMAGE_DYNAMIC_INFO_S {
    pub au32BlackLevel: [RK_U32; 4usize],
    pub astAsShotNeutral: [DNG_RATIONAL_S; 3usize],
    pub adNoiseProfile: [RK_DOUBLE; 6usize],
}

#[test]
fn bindgen_test_layout_rkDNG_IMAGE_DYNAMIC_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkDNG_IMAGE_DYNAMIC_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkDNG_IMAGE_DYNAMIC_INFO_S>(),
        88usize,
        concat!("Size of: ", stringify!(rkDNG_IMAGE_DYNAMIC_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkDNG_IMAGE_DYNAMIC_INFO_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkDNG_IMAGE_DYNAMIC_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au32BlackLevel) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkDNG_IMAGE_DYNAMIC_INFO_S),
        "::",
        stringify!(au32BlackLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).astAsShotNeutral) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkDNG_IMAGE_DYNAMIC_INFO_S),
        "::",
        stringify!(astAsShotNeutral)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adNoiseProfile) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkDNG_IMAGE_DYNAMIC_INFO_S),
        "::",
        stringify!(adNoiseProfile)
        )
    );
}

pub type DNG_IMAGE_DYNAMIC_INFO_S = rkDNG_IMAGE_DYNAMIC_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkISP_HDR_INFO_S {
    pub u32ColorTemp: RK_U32,
    pub au16CCM: [RK_U16; 9usize],
    pub u8Saturation: RK_U8,
}

#[test]
fn bindgen_test_layout_rkISP_HDR_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_HDR_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_HDR_INFO_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkISP_HDR_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_HDR_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkISP_HDR_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ColorTemp) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_HDR_INFO_S),
        "::",
        stringify!(u32ColorTemp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au16CCM) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_HDR_INFO_S),
        "::",
        stringify!(au16CCM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8Saturation) as usize - ptr as usize },
        22usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_HDR_INFO_S),
        "::",
        stringify!(u8Saturation)
        )
    );
}

pub type ISP_HDR_INFO_S = rkISP_HDR_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkISP_ATTACH_INFO_S {
    pub stIspHdr: ISP_HDR_INFO_S,
    pub u32ISO: RK_U32,
    pub u8SnsWDRMode: RK_U8,
}

#[test]
fn bindgen_test_layout_rkISP_ATTACH_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_ATTACH_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_ATTACH_INFO_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkISP_ATTACH_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_ATTACH_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkISP_ATTACH_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stIspHdr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_ATTACH_INFO_S),
        "::",
        stringify!(stIspHdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ISO) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_ATTACH_INFO_S),
        "::",
        stringify!(u32ISO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8SnsWDRMode) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_ATTACH_INFO_S),
        "::",
        stringify!(u8SnsWDRMode)
        )
    );
}

pub type ISP_ATTACH_INFO_S = rkISP_ATTACH_INFO_S;

pub const rkFRAME_FLAG_E_FRAME_FLAG_SNAP_FLASH: rkFRAME_FLAG_E = 1;
pub const rkFRAME_FLAG_E_FRAME_FLAG_SNAP_CUR: rkFRAME_FLAG_E = 2;
pub const rkFRAME_FLAG_E_FRAME_FLAG_SNAP_REF: rkFRAME_FLAG_E = 4;
pub const rkFRAME_FLAG_E_FRAME_FLAG_SNAP_END: rkFRAME_FLAG_E = -2147483648;
pub const rkFRAME_FLAG_E_FRAME_FLAG_BUTT: rkFRAME_FLAG_E = -2147483647;

pub type rkFRAME_FLAG_E = ::std::os::raw::c_int;

pub use self::rkFRAME_FLAG_E as FRAME_FLAG_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkISP_CONFIG_INFO_S {
    pub u32ISO: RK_U32,
    pub u32IspDgain: RK_U32,
    pub u32ExposureTime: RK_U32,
    pub au32WhiteBalanceGain: [RK_U32; 4usize],
    pub u32ColorTemperature: RK_U32,
    pub au16CapCCM: [RK_U16; 9usize],
}

#[test]
fn bindgen_test_layout_rkISP_CONFIG_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_CONFIG_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_CONFIG_INFO_S>(),
        52usize,
        concat!("Size of: ", stringify!(rkISP_CONFIG_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_CONFIG_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkISP_CONFIG_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ISO) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_CONFIG_INFO_S),
        "::",
        stringify!(u32ISO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32IspDgain) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_CONFIG_INFO_S),
        "::",
        stringify!(u32IspDgain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ExposureTime) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_CONFIG_INFO_S),
        "::",
        stringify!(u32ExposureTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au32WhiteBalanceGain) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_CONFIG_INFO_S),
        "::",
        stringify!(au32WhiteBalanceGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ColorTemperature) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_CONFIG_INFO_S),
        "::",
        stringify!(u32ColorTemperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au16CapCCM) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_CONFIG_INFO_S),
        "::",
        stringify!(au16CapCCM)
        )
    );
}

pub type ISP_CONFIG_INFO_S = rkISP_CONFIG_INFO_S;

#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct rkVIDEO_SUPPLEMENT_S {
    pub u64JpegDCFPhyAddr: RK_U64,
    pub u64IspInfoPhyAddr: RK_U64,
    pub u64LowDelayPhyAddr: RK_U64,
    pub u64MotionDataPhyAddr: RK_U64,
    pub u64FrameDNGPhyAddr: RK_U64,
    pub __bindgen_padding_0: [u32; 2usize],
    pub pJpegDCFVirAddr: *mut ::std::os::raw::c_void,
    pub __bindgen_padding_1: [u32; 3usize],
    pub pIspInfoVirAddr: *mut ::std::os::raw::c_void,
    pub __bindgen_padding_2: [u32; 3usize],
    pub pLowDelayVirAddr: *mut ::std::os::raw::c_void,
    pub __bindgen_padding_3: [u32; 3usize],
    pub pMotionDataVirAddr: *mut ::std::os::raw::c_void,
    pub __bindgen_padding_4: [u32; 3usize],
    pub pFrameDNGVirAddr: *mut ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout_rkVIDEO_SUPPLEMENT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVIDEO_SUPPLEMENT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVIDEO_SUPPLEMENT_S>(),
        128usize,
        concat!("Size of: ", stringify!(rkVIDEO_SUPPLEMENT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVIDEO_SUPPLEMENT_S>(),
        16usize,
        concat!("Alignment of ", stringify!(rkVIDEO_SUPPLEMENT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64JpegDCFPhyAddr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(u64JpegDCFPhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64IspInfoPhyAddr) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(u64IspInfoPhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64LowDelayPhyAddr) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(u64LowDelayPhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64MotionDataPhyAddr) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(u64MotionDataPhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64FrameDNGPhyAddr) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(u64FrameDNGPhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pJpegDCFVirAddr) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(pJpegDCFVirAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIspInfoVirAddr) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(pIspInfoVirAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLowDelayVirAddr) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(pLowDelayVirAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMotionDataVirAddr) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(pMotionDataVirAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFrameDNGVirAddr) as usize - ptr as usize },
        112usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_SUPPLEMENT_S),
        "::",
        stringify!(pFrameDNGVirAddr)
        )
    );
}

impl Default for rkVIDEO_SUPPLEMENT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VIDEO_SUPPLEMENT_S = rkVIDEO_SUPPLEMENT_S;

pub const rkCOLOR_GAMUT_E_COLOR_GAMUT_BT601: rkCOLOR_GAMUT_E = 0;
pub const rkCOLOR_GAMUT_E_COLOR_GAMUT_BT709: rkCOLOR_GAMUT_E = 1;
pub const rkCOLOR_GAMUT_E_COLOR_GAMUT_BT2020: rkCOLOR_GAMUT_E = 2;
pub const rkCOLOR_GAMUT_E_COLOR_GAMUT_USER: rkCOLOR_GAMUT_E = 3;
pub const rkCOLOR_GAMUT_E_COLOR_GAMUT_BUTT: rkCOLOR_GAMUT_E = 4;

pub type rkCOLOR_GAMUT_E = ::std::os::raw::c_uint;

pub use self::rkCOLOR_GAMUT_E as COLOR_GAMUT_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkISP_COLORGAMMUT_INFO_S {
    pub enColorGamut: COLOR_GAMUT_E,
}

#[test]
fn bindgen_test_layout_rkISP_COLORGAMMUT_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_COLORGAMMUT_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_COLORGAMMUT_INFO_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkISP_COLORGAMMUT_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_COLORGAMMUT_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkISP_COLORGAMMUT_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enColorGamut) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_COLORGAMMUT_INFO_S),
        "::",
        stringify!(enColorGamut)
        )
    );
}

impl Default for rkISP_COLORGAMMUT_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type ISP_COLORGAMMUT_INFO_S = rkISP_COLORGAMMUT_INFO_S;

pub const rkDYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR8: rkDYNAMIC_RANGE_E = 0;
pub const rkDYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR10: rkDYNAMIC_RANGE_E = 1;
pub const rkDYNAMIC_RANGE_E_DYNAMIC_RANGE_HDR10: rkDYNAMIC_RANGE_E = 2;
pub const rkDYNAMIC_RANGE_E_DYNAMIC_RANGE_HLG: rkDYNAMIC_RANGE_E = 3;
pub const rkDYNAMIC_RANGE_E_DYNAMIC_RANGE_SLF: rkDYNAMIC_RANGE_E = 4;
pub const rkDYNAMIC_RANGE_E_DYNAMIC_RANGE_XDR: rkDYNAMIC_RANGE_E = 5;
pub const rkDYNAMIC_RANGE_E_DYNAMIC_RANGE_BUTT: rkDYNAMIC_RANGE_E = 6;

pub type rkDYNAMIC_RANGE_E = ::std::os::raw::c_uint;

pub use self::rkDYNAMIC_RANGE_E as DYNAMIC_RANGE_E;

pub const rkDATA_BITWIDTH_E_DATA_BITWIDTH_8: rkDATA_BITWIDTH_E = 0;
pub const rkDATA_BITWIDTH_E_DATA_BITWIDTH_10: rkDATA_BITWIDTH_E = 1;
pub const rkDATA_BITWIDTH_E_DATA_BITWIDTH_12: rkDATA_BITWIDTH_E = 2;
pub const rkDATA_BITWIDTH_E_DATA_BITWIDTH_14: rkDATA_BITWIDTH_E = 3;
pub const rkDATA_BITWIDTH_E_DATA_BITWIDTH_16: rkDATA_BITWIDTH_E = 4;
pub const rkDATA_BITWIDTH_E_DATA_BITWIDTH_BUTT: rkDATA_BITWIDTH_E = 5;

pub type rkDATA_BITWIDTH_E = ::std::os::raw::c_uint;

pub use self::rkDATA_BITWIDTH_E as DATA_BITWIDTH_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVIDEO_FRAME_S {
    pub pMbBlk: MB_BLK,
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
    pub u32VirWidth: RK_U32,
    pub u32VirHeight: RK_U32,
    pub enField: VIDEO_FIELD_E,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enColorGamut: COLOR_GAMUT_E,
    pub pVirAddr: [*mut ::std::os::raw::c_void; 2usize],
    pub u32TimeRef: RK_U32,
    pub u64PTS: RK_U64,
    pub u64PrivateData: RK_U64,
    pub u32FrameFlag: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVIDEO_FRAME_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVIDEO_FRAME_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVIDEO_FRAME_S>(),
        80usize,
        concat!("Size of: ", stringify!(rkVIDEO_FRAME_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVIDEO_FRAME_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkVIDEO_FRAME_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(pMbBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(u32Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirWidth) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(u32VirWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirHeight) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(u32VirHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enField) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(enField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVideoFormat) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(enVideoFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(enCompressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDynamicRange) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(enDynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enColorGamut) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(enColorGamut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVirAddr) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(pVirAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32TimeRef) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(u32TimeRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64PTS) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(u64PTS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64PrivateData) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(u64PrivateData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameFlag) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_S),
        "::",
        stringify!(u32FrameFlag)
        )
    );
}

impl Default for rkVIDEO_FRAME_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VIDEO_FRAME_S = rkVIDEO_FRAME_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVIDEO_FRAME_INFO_S {
    pub stVFrame: VIDEO_FRAME_S,
}

#[test]
fn bindgen_test_layout_rkVIDEO_FRAME_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVIDEO_FRAME_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVIDEO_FRAME_INFO_S>(),
        80usize,
        concat!("Size of: ", stringify!(rkVIDEO_FRAME_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVIDEO_FRAME_INFO_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkVIDEO_FRAME_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVFrame) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVIDEO_FRAME_INFO_S),
        "::",
        stringify!(stVFrame)
        )
    );
}

impl Default for rkVIDEO_FRAME_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VIDEO_FRAME_INFO_S = rkVIDEO_FRAME_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkMB_PIC_CAL_S {
    pub u32MBSize: RK_U32,
    pub u32VirWidth: RK_U32,
    pub u32VirHeight: RK_U32,
}

#[test]
fn bindgen_test_layout_rkMB_PIC_CAL_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkMB_PIC_CAL_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkMB_PIC_CAL_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkMB_PIC_CAL_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkMB_PIC_CAL_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkMB_PIC_CAL_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MBSize) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_PIC_CAL_S),
        "::",
        stringify!(u32MBSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirWidth) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_PIC_CAL_S),
        "::",
        stringify!(u32VirWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirHeight) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMB_PIC_CAL_S),
        "::",
        stringify!(u32VirHeight)
        )
    );
}

pub type MB_PIC_CAL_S = rkMB_PIC_CAL_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkPIC_BUF_ATTR_S {
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enCompMode: COMPRESS_MODE_E,
}

#[test]
fn bindgen_test_layout_rkPIC_BUF_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkPIC_BUF_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkPIC_BUF_ATTR_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkPIC_BUF_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkPIC_BUF_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkPIC_BUF_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkPIC_BUF_ATTR_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkPIC_BUF_ATTR_S),
        "::",
        stringify!(u32Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkPIC_BUF_ATTR_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompMode) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkPIC_BUF_ATTR_S),
        "::",
        stringify!(enCompMode)
        )
    );
}

impl Default for rkPIC_BUF_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type PIC_BUF_ATTR_S = rkPIC_BUF_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVDEC_PIC_BUF_ATTR_S {
    pub enCodecType: RK_CODEC_ID_E,
    pub stPicBufAttr: PIC_BUF_ATTR_S,
}

#[test]
fn bindgen_test_layout_rkVDEC_PIC_BUF_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_PIC_BUF_ATTR_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_PIC_BUF_ATTR_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVDEC_PIC_BUF_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_PIC_BUF_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_PIC_BUF_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCodecType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PIC_BUF_ATTR_S),
        "::",
        stringify!(enCodecType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stPicBufAttr) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PIC_BUF_ATTR_S),
        "::",
        stringify!(stPicBufAttr)
        )
    );
}

impl Default for rkVDEC_PIC_BUF_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_PIC_BUF_ATTR_S = rkVDEC_PIC_BUF_ATTR_S;

#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct rkBITMAP_S {
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
    pub __bindgen_padding_0: u32,
    pub pData: *mut ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout_rkBITMAP_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkBITMAP_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkBITMAP_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkBITMAP_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkBITMAP_S>(),
        16usize,
        concat!("Alignment of ", stringify!(rkBITMAP_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBITMAP_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBITMAP_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBITMAP_S),
        "::",
        stringify!(u32Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkBITMAP_S),
        "::",
        stringify!(pData)
        )
    );
}

impl Default for rkBITMAP_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type BITMAP_S = rkBITMAP_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkLDC_ATTR_S {
    pub bAspect: RK_BOOL,
    pub s32XRatio: RK_S32,
    pub s32YRatio: RK_S32,
    pub s32XYRatio: RK_S32,
    pub s32CenterXOffset: RK_S32,
    pub s32CenterYOffset: RK_S32,
    pub s32DistortionRatio: RK_S32,
}

#[test]
fn bindgen_test_layout_rkLDC_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkLDC_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkLDC_ATTR_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkLDC_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkLDC_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkLDC_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAspect) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDC_ATTR_S),
        "::",
        stringify!(bAspect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32XRatio) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDC_ATTR_S),
        "::",
        stringify!(s32XRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32YRatio) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDC_ATTR_S),
        "::",
        stringify!(s32YRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32XYRatio) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDC_ATTR_S),
        "::",
        stringify!(s32XYRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32CenterXOffset) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDC_ATTR_S),
        "::",
        stringify!(s32CenterXOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32CenterYOffset) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDC_ATTR_S),
        "::",
        stringify!(s32CenterYOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DistortionRatio) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDC_ATTR_S),
        "::",
        stringify!(s32DistortionRatio)
        )
    );
}

impl Default for rkLDC_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type LDC_ATTR_S = rkLDC_ATTR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkLDCV2_ATTR_S {
    pub s32FocalLenX: RK_S32,
    pub s32FocalLenY: RK_S32,
    pub s32CoorShiftX: RK_S32,
    pub s32CoorShiftY: RK_S32,
    pub as32SrcCaliRatio: [[RK_S32; 4usize]; 2usize],
    pub s32SrcJunPt: RK_S32,
    pub as32DstCaliRatio: [[RK_S32; 4usize]; 3usize],
    pub as32DstJunPt: [RK_S32; 2usize],
    pub s32MaxDu: RK_S32,
}

#[test]
fn bindgen_test_layout_rkLDCV2_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkLDCV2_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkLDCV2_ATTR_S>(),
        112usize,
        concat!("Size of: ", stringify!(rkLDCV2_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkLDCV2_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkLDCV2_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32FocalLenX) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(s32FocalLenX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32FocalLenY) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(s32FocalLenY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32CoorShiftX) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(s32CoorShiftX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32CoorShiftY) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(s32CoorShiftY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as32SrcCaliRatio) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(as32SrcCaliRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SrcJunPt) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(s32SrcJunPt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as32DstCaliRatio) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(as32DstCaliRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as32DstJunPt) as usize - ptr as usize },
        100usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(as32DstJunPt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32MaxDu) as usize - ptr as usize },
        108usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV2_ATTR_S),
        "::",
        stringify!(s32MaxDu)
        )
    );
}

pub type LDCV2_ATTR_S = rkLDCV2_ATTR_S;

pub const rkLDC_VIEW_TYPE_E_LDC_VIEW_TYPE_ALL: rkLDC_VIEW_TYPE_E = 0;
pub const rkLDC_VIEW_TYPE_E_LDC_VIEW_TYPE_CROP: rkLDC_VIEW_TYPE_E = 1;
pub const rkLDC_VIEW_TYPE_E_LDC_VIEW_TYPE_BUTT: rkLDC_VIEW_TYPE_E = 2;

pub type rkLDC_VIEW_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkLDC_VIEW_TYPE_E as LDC_VIEW_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkLDCV3_ATTR_S {
    pub enViewType: LDC_VIEW_TYPE_E,
    pub s32CenterXOffset: RK_S32,
    pub s32CenterYOffset: RK_S32,
    pub s32DistortionRatio: RK_S32,
    pub s32MinRatio: RK_S32,
}

#[test]
fn bindgen_test_layout_rkLDCV3_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkLDCV3_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkLDCV3_ATTR_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkLDCV3_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkLDCV3_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkLDCV3_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enViewType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV3_ATTR_S),
        "::",
        stringify!(enViewType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32CenterXOffset) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV3_ATTR_S),
        "::",
        stringify!(s32CenterXOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32CenterYOffset) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV3_ATTR_S),
        "::",
        stringify!(s32CenterYOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DistortionRatio) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV3_ATTR_S),
        "::",
        stringify!(s32DistortionRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32MinRatio) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLDCV3_ATTR_S),
        "::",
        stringify!(s32MinRatio)
        )
    );
}

impl Default for rkLDCV3_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type LDCV3_ATTR_S = rkLDCV3_ATTR_S;

pub const rkROTATION_VIEW_TYPE_E_ROTATION_VIEW_TYPE_ALL: rkROTATION_VIEW_TYPE_E = 0;
pub const rkROTATION_VIEW_TYPE_E_ROTATION_VIEW_TYPE_TYPICAL: rkROTATION_VIEW_TYPE_E = 1;
pub const rkROTATION_VIEW_TYPE_E_ROTATION_VIEW_TYPE_INSIDE: rkROTATION_VIEW_TYPE_E = 2;
pub const rkROTATION_VIEW_TYPE_E_ROTATION_VIEW_TYPE_BUTT: rkROTATION_VIEW_TYPE_E = 3;

pub type rkROTATION_VIEW_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkROTATION_VIEW_TYPE_E as ROTATION_VIEW_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkROTATION_EX_S {
    pub enViewType: ROTATION_VIEW_TYPE_E,
    pub u32Angle: RK_U32,
    pub s32CenterXOffset: RK_S32,
    pub s32CenterYOffset: RK_S32,
    pub stDestSize: SIZE_S,
}

#[test]
fn bindgen_test_layout_rkROTATION_EX_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkROTATION_EX_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkROTATION_EX_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkROTATION_EX_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkROTATION_EX_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkROTATION_EX_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enViewType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkROTATION_EX_S),
        "::",
        stringify!(enViewType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Angle) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkROTATION_EX_S),
        "::",
        stringify!(u32Angle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32CenterXOffset) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkROTATION_EX_S),
        "::",
        stringify!(s32CenterXOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32CenterYOffset) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkROTATION_EX_S),
        "::",
        stringify!(s32CenterYOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stDestSize) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkROTATION_EX_S),
        "::",
        stringify!(stDestSize)
        )
    );
}

impl Default for rkROTATION_EX_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type ROTATION_EX_S = rkROTATION_EX_S;

pub const rkWDR_MODE_E_WDR_MODE_NONE: rkWDR_MODE_E = 0;
pub const rkWDR_MODE_E_WDR_MODE_BUILT_IN: rkWDR_MODE_E = 1;
pub const rkWDR_MODE_E_WDR_MODE_QUDRA: rkWDR_MODE_E = 2;
pub const rkWDR_MODE_E_WDR_MODE_2To1_LINE: rkWDR_MODE_E = 3;
pub const rkWDR_MODE_E_WDR_MODE_2To1_FRAME: rkWDR_MODE_E = 4;
pub const rkWDR_MODE_E_WDR_MODE_2To1_FRAME_FULL_RATE: rkWDR_MODE_E = 5;
pub const rkWDR_MODE_E_WDR_MODE_3To1_LINE: rkWDR_MODE_E = 6;
pub const rkWDR_MODE_E_WDR_MODE_3To1_FRAME: rkWDR_MODE_E = 7;
pub const rkWDR_MODE_E_WDR_MODE_3To1_FRAME_FULL_RATE: rkWDR_MODE_E = 8;
pub const rkWDR_MODE_E_WDR_MODE_4To1_LINE: rkWDR_MODE_E = 9;
pub const rkWDR_MODE_E_WDR_MODE_4To1_FRAME: rkWDR_MODE_E = 10;
pub const rkWDR_MODE_E_WDR_MODE_4To1_FRAME_FULL_RATE: rkWDR_MODE_E = 11;
pub const rkWDR_MODE_E_WDR_MODE_BUTT: rkWDR_MODE_E = 12;

pub type rkWDR_MODE_E = ::std::os::raw::c_uint;

pub use self::rkWDR_MODE_E as WDR_MODE_E;

pub const rkFRAME_INTERRUPT_TYPE_E_FRAME_INTERRUPT_START: rkFRAME_INTERRUPT_TYPE_E = 0;
pub const rkFRAME_INTERRUPT_TYPE_E_FRAME_INTERRUPT_EARLY: rkFRAME_INTERRUPT_TYPE_E = 1;
pub const rkFRAME_INTERRUPT_TYPE_E_FRAME_INTERRUPT_EARLY_END: rkFRAME_INTERRUPT_TYPE_E = 2;
pub const rkFRAME_INTERRUPT_TYPE_E_FRAME_INTERRUPT_BUTT: rkFRAME_INTERRUPT_TYPE_E = 3;

pub type rkFRAME_INTERRUPT_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkFRAME_INTERRUPT_TYPE_E as FRAME_INTERRUPT_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkFRAME_INTERRUPT_ATTR_S {
    pub enIntType: FRAME_INTERRUPT_TYPE_E,
    pub u32EarlyLine: RK_U32,
}

#[test]
fn bindgen_test_layout_rkFRAME_INTERRUPT_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkFRAME_INTERRUPT_ATTR_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkFRAME_INTERRUPT_ATTR_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkFRAME_INTERRUPT_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkFRAME_INTERRUPT_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkFRAME_INTERRUPT_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enIntType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkFRAME_INTERRUPT_ATTR_S),
        "::",
        stringify!(enIntType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32EarlyLine) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkFRAME_INTERRUPT_ATTR_S),
        "::",
        stringify!(u32EarlyLine)
        )
    );
}

impl Default for rkFRAME_INTERRUPT_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type FRAME_INTERRUPT_ATTR_S = rkFRAME_INTERRUPT_ATTR_S;

pub const rkAVS_LUT_ACCURACY_E_AVS_LUT_ACCURACY_HIGH: rkAVS_LUT_ACCURACY_E = 0;
pub const rkAVS_LUT_ACCURACY_E_AVS_LUT_ACCURACY_LOW: rkAVS_LUT_ACCURACY_E = 1;
pub const rkAVS_LUT_ACCURACY_E_AVS_LUT_ACCURACY_BUTT: rkAVS_LUT_ACCURACY_E = 2;

pub type rkAVS_LUT_ACCURACY_E = ::std::os::raw::c_uint;

pub use self::rkAVS_LUT_ACCURACY_E as AVS_LUT_ACCURACY_E;

pub const rkAVS_LUT_STEP_E_AVS_LUT_STEP_HIGH: rkAVS_LUT_STEP_E = 0;
pub const rkAVS_LUT_STEP_E_AVS_LUT_STEP_MEDIUM: rkAVS_LUT_STEP_E = 1;
pub const rkAVS_LUT_STEP_E_AVS_LUT_STEP_LOW: rkAVS_LUT_STEP_E = 2;
pub const rkAVS_LUT_STEP_E_AVS_LUT_STEP_BUTT: rkAVS_LUT_STEP_E = 3;

pub type rkAVS_LUT_STEP_E = ::std::os::raw::c_uint;

pub use self::rkAVS_LUT_STEP_E as AVS_LUT_STEP_E;

pub const rkAVS_FUSE_WIDTH_E_AVS_FUSE_WIDTH_HIGH: rkAVS_FUSE_WIDTH_E = 0;
pub const rkAVS_FUSE_WIDTH_E_AVS_FUSE_WIDTH_MEDIUM: rkAVS_FUSE_WIDTH_E = 1;
pub const rkAVS_FUSE_WIDTH_E_AVS_FUSE_WIDTH_LOW: rkAVS_FUSE_WIDTH_E = 2;
pub const rkAVS_FUSE_WIDTH_E_AVS_FUSE_WIDTH_BUTT: rkAVS_FUSE_WIDTH_E = 3;

pub type rkAVS_FUSE_WIDTH_E = ::std::os::raw::c_uint;

pub use self::rkAVS_FUSE_WIDTH_E as AVS_FUSE_WIDTH_E;

pub const rkAVS_PROJECTION_MODE_E_AVS_PROJECTION_EQUIRECTANGULAR: rkAVS_PROJECTION_MODE_E = 0;
pub const rkAVS_PROJECTION_MODE_E_AVS_PROJECTION_RECTILINEAR: rkAVS_PROJECTION_MODE_E = 1;
pub const rkAVS_PROJECTION_MODE_E_AVS_PROJECTION_CYLINDRICAL: rkAVS_PROJECTION_MODE_E = 2;
pub const rkAVS_PROJECTION_MODE_E_AVS_PROJECTION_CUBE_MAP: rkAVS_PROJECTION_MODE_E = 3;
pub const rkAVS_PROJECTION_MODE_E_AVS_PROJECTION_EQUIRECTANGULAR_TRANS: rkAVS_PROJECTION_MODE_E = 4;
pub const rkAVS_PROJECTION_MODE_E_AVS_PROJECTION_BUTT: rkAVS_PROJECTION_MODE_E = 5;

pub type rkAVS_PROJECTION_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAVS_PROJECTION_MODE_E as AVS_PROJECTION_MODE_E;

pub const rkAVS_GAIN_MODE_E_AVS_GAIN_MODE_MANUAL: rkAVS_GAIN_MODE_E = 0;
pub const rkAVS_GAIN_MODE_E_AVS_GAIN_MODE_AUTO: rkAVS_GAIN_MODE_E = 1;
pub const rkAVS_GAIN_MODE_E_AVS_GAIN_MODE_BUTT: rkAVS_GAIN_MODE_E = 2;

pub type rkAVS_GAIN_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAVS_GAIN_MODE_E as AVS_GAIN_MODE_E;

pub const rkAVS_MODE_E_AVS_MODE_BLEND: rkAVS_MODE_E = 0;
pub const rkAVS_MODE_E_AVS_MODE_NOBLEND_VER: rkAVS_MODE_E = 1;
pub const rkAVS_MODE_E_AVS_MODE_NOBLEND_HOR: rkAVS_MODE_E = 2;
pub const rkAVS_MODE_E_AVS_MODE_NOBLEND_QR: rkAVS_MODE_E = 3;
pub const rkAVS_MODE_E_AVS_MODE_BUTT: rkAVS_MODE_E = 4;

pub type rkAVS_MODE_E = ::std::os::raw::c_uint;

pub use self::rkAVS_MODE_E as AVS_MODE_E;

pub const rkAVS_PARAM_SOURCE_E_AVS_PARAM_SOURCE_LUT: rkAVS_PARAM_SOURCE_E = 0;
pub const rkAVS_PARAM_SOURCE_E_AVS_PARAM_SOURCE_CALIB: rkAVS_PARAM_SOURCE_E = 1;
pub const rkAVS_PARAM_SOURCE_E_AVS_PARAM_SOURCE_MODE_BUT: rkAVS_PARAM_SOURCE_E = 2;

pub type rkAVS_PARAM_SOURCE_E = ::std::os::raw::c_uint;

pub use self::rkAVS_PARAM_SOURCE_E as AVS_PARAM_SOURCE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_GAIN_ATTR_S {
    pub enMode: AVS_GAIN_MODE_E,
    pub s32Coef: [RK_S32; 2usize],
}

#[test]
fn bindgen_test_layout_rkAVS_GAIN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_GAIN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_GAIN_ATTR_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkAVS_GAIN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_GAIN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_GAIN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GAIN_ATTR_S),
        "::",
        stringify!(enMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Coef) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GAIN_ATTR_S),
        "::",
        stringify!(s32Coef)
        )
    );
}

impl Default for rkAVS_GAIN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_GAIN_ATTR_S = rkAVS_GAIN_ATTR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAVS_ROTATION_S {
    pub s32Yaw: RK_S32,
    pub s32Pitch: RK_S32,
    pub s32Roll: RK_S32,
}

#[test]
fn bindgen_test_layout_rkAVS_ROTATION_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_ROTATION_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_ROTATION_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkAVS_ROTATION_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_ROTATION_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_ROTATION_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Yaw) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_ROTATION_S),
        "::",
        stringify!(s32Yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Pitch) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_ROTATION_S),
        "::",
        stringify!(s32Pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Roll) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_ROTATION_S),
        "::",
        stringify!(s32Roll)
        )
    );
}

pub type AVS_ROTATION_S = rkAVS_ROTATION_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAVS_FOV_S {
    pub u32FOVX: RK_U32,
    pub u32FOVY: RK_U32,
}

#[test]
fn bindgen_test_layout_rkAVS_FOV_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_FOV_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_FOV_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAVS_FOV_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_FOV_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_FOV_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FOVX) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_FOV_S),
        "::",
        stringify!(u32FOVX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FOVY) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_FOV_S),
        "::",
        stringify!(u32FOVY)
        )
    );
}

pub type AVS_FOV_S = rkAVS_FOV_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_LUT_STEP_S {
    pub enStepX: AVS_LUT_STEP_E,
    pub enStepY: AVS_LUT_STEP_E,
}

#[test]
fn bindgen_test_layout_rkAVS_LUT_STEP_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_LUT_STEP_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_LUT_STEP_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAVS_LUT_STEP_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_LUT_STEP_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_LUT_STEP_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enStepX) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_LUT_STEP_S),
        "::",
        stringify!(enStepX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enStepY) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_LUT_STEP_S),
        "::",
        stringify!(enStepY)
        )
    );
}

impl Default for rkAVS_LUT_STEP_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_STEP_ATTR_S = rkAVS_LUT_STEP_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkAVS_SPLIT_ATTR_S {
    pub u32PipeNum: RK_U32,
    pub AVSPipe: [AVS_PIPE; 6usize],
}

#[test]
fn bindgen_test_layout_rkAVS_SPLIT_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_SPLIT_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_SPLIT_ATTR_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkAVS_SPLIT_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_SPLIT_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_SPLIT_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PipeNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_SPLIT_ATTR_S),
        "::",
        stringify!(u32PipeNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AVSPipe) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_SPLIT_ATTR_S),
        "::",
        stringify!(AVSPipe)
        )
    );
}

pub type AVS_SPLIT_ATTR_S = rkAVS_SPLIT_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_CUBE_MAP_ATTR_S {
    pub bBgColor: RK_BOOL,
    pub u32BgColor: RK_U32,
    pub u32SurfaceLength: RK_U32,
    pub stStartPoint: [POINT_S; 6usize],
}

#[test]
fn bindgen_test_layout_rkAVS_CUBE_MAP_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_CUBE_MAP_ATTR_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_CUBE_MAP_ATTR_S>(),
        60usize,
        concat!("Size of: ", stringify!(rkAVS_CUBE_MAP_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_CUBE_MAP_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_CUBE_MAP_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBgColor) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CUBE_MAP_ATTR_S),
        "::",
        stringify!(bBgColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BgColor) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CUBE_MAP_ATTR_S),
        "::",
        stringify!(u32BgColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SurfaceLength) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CUBE_MAP_ATTR_S),
        "::",
        stringify!(u32SurfaceLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stStartPoint) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CUBE_MAP_ATTR_S),
        "::",
        stringify!(stStartPoint)
        )
    );
}

impl Default for rkAVS_CUBE_MAP_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_CUBE_MAP_ATTR_S = rkAVS_CUBE_MAP_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_LUT_S {
    pub enAccuracy: AVS_LUT_ACCURACY_E,
    pub enFuseWidth: AVS_FUSE_WIDTH_E,
    pub stLutStep: AVS_STEP_ATTR_S,
    pub pVirAddr: [*mut ::std::os::raw::c_void; 2usize],
}

#[test]
fn bindgen_test_layout_rkAVS_LUT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_LUT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_LUT_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkAVS_LUT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_LUT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_LUT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enAccuracy) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_LUT_S),
        "::",
        stringify!(enAccuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enFuseWidth) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_LUT_S),
        "::",
        stringify!(enFuseWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stLutStep) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_LUT_S),
        "::",
        stringify!(stLutStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVirAddr) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_LUT_S),
        "::",
        stringify!(pVirAddr)
        )
    );
}

impl Default for rkAVS_LUT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_LUT_S = rkAVS_LUT_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_CALIB_S {
    pub pCalibFilePath: *const RK_CHAR,
    pub pMeshAlphaPath: *const RK_CHAR,
}

#[test]
fn bindgen_test_layout_rkAVS_CALIB_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_CALIB_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_CALIB_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAVS_CALIB_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_CALIB_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_CALIB_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCalibFilePath) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CALIB_S),
        "::",
        stringify!(pCalibFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMeshAlphaPath) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CALIB_S),
        "::",
        stringify!(pMeshAlphaPath)
        )
    );
}

impl Default for rkAVS_CALIB_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_CALIB_S = rkAVS_CALIB_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_FINAL_LUT_S {
    pub pMeshBlk: [MB_BLK; 2usize],
    pub pAlphaBlk: [MB_BLK; 2usize],
    pub pLdchBlk: [MB_BLK; 2usize],
    pub pParamBlk: [MB_BLK; 2usize],
}

#[test]
fn bindgen_test_layout_rkAVS_FINAL_LUT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_FINAL_LUT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_FINAL_LUT_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkAVS_FINAL_LUT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_FINAL_LUT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_FINAL_LUT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMeshBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_FINAL_LUT_S),
        "::",
        stringify!(pMeshBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAlphaBlk) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_FINAL_LUT_S),
        "::",
        stringify!(pAlphaBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLdchBlk) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_FINAL_LUT_S),
        "::",
        stringify!(pLdchBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pParamBlk) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_FINAL_LUT_S),
        "::",
        stringify!(pParamBlk)
        )
    );
}

impl Default for rkAVS_FINAL_LUT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_FINAL_LUT_S = rkAVS_FINAL_LUT_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkAVS_INPUT_ATTR_S {
    pub enParamSource: AVS_PARAM_SOURCE_E,
    pub __bindgen_anon_1: rkAVS_INPUT_ATTR_S__bindgen_ty_1,
    pub stSize: SIZE_S,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkAVS_INPUT_ATTR_S__bindgen_ty_1 {
    pub stLUT: AVS_LUT_S,
    pub stCalib: AVS_CALIB_S,
}

#[test]
fn bindgen_test_layout_rkAVS_INPUT_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_INPUT_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_INPUT_ATTR_S__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(rkAVS_INPUT_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_INPUT_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(rkAVS_INPUT_ATTR_S__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stLUT) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_INPUT_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stLUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCalib) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_INPUT_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stCalib)
        )
    );
}

impl Default for rkAVS_INPUT_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkAVS_INPUT_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_INPUT_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_INPUT_ATTR_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkAVS_INPUT_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_INPUT_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_INPUT_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enParamSource) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_INPUT_ATTR_S),
        "::",
        stringify!(enParamSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSize) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_INPUT_ATTR_S),
        "::",
        stringify!(stSize)
        )
    );
}

impl Default for rkAVS_INPUT_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_INPUT_ATTR_S = rkAVS_INPUT_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_OUTPUT_ATTR_S {
    pub enPrjMode: AVS_PROJECTION_MODE_E,
    pub stCenter: POINT_S,
    pub stFOV: AVS_FOV_S,
    pub stORIRotation: AVS_ROTATION_S,
    pub stRotation: AVS_ROTATION_S,
    pub stSplitAttr: [AVS_SPLIT_ATTR_S; 2usize],
    pub stCubeMapAttr: AVS_CUBE_MAP_ATTR_S,
    pub stSize: SIZE_S,
    pub fDistance: RK_FLOAT,
}

#[test]
fn bindgen_test_layout_rkAVS_OUTPUT_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_OUTPUT_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_OUTPUT_ATTR_S>(),
        172usize,
        concat!("Size of: ", stringify!(rkAVS_OUTPUT_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_OUTPUT_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_OUTPUT_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPrjMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(enPrjMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCenter) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(stCenter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stFOV) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(stFOV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stORIRotation) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(stORIRotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRotation) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(stRotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSplitAttr) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(stSplitAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCubeMapAttr) as usize - ptr as usize },
        100usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(stCubeMapAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSize) as usize - ptr as usize },
        160usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(stSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fDistance) as usize - ptr as usize },
        168usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_OUTPUT_ATTR_S),
        "::",
        stringify!(fDistance)
        )
    );
}

impl Default for rkAVS_OUTPUT_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_OUTPUT_ATTR_S = rkAVS_OUTPUT_ATTR_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkAVS_GRP_ATTR_S {
    pub enMode: AVS_MODE_E,
    pub u32PipeNum: RK_U32,
    pub bSyncPipe: RK_BOOL,
    pub stInAttr: AVS_INPUT_ATTR_S,
    pub stGainAttr: AVS_GAIN_ATTR_S,
    pub u64BBoxPhyAddr: [RK_U64; 2usize],
    pub stOutAttr: AVS_OUTPUT_ATTR_S,
    pub stFrameRate: FRAME_RATE_CTRL_S,
}

#[test]
fn bindgen_test_layout_rkAVS_GRP_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_GRP_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_GRP_ATTR_S>(),
        264usize,
        concat!("Size of: ", stringify!(rkAVS_GRP_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_GRP_ATTR_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkAVS_GRP_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GRP_ATTR_S),
        "::",
        stringify!(enMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PipeNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GRP_ATTR_S),
        "::",
        stringify!(u32PipeNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSyncPipe) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GRP_ATTR_S),
        "::",
        stringify!(bSyncPipe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stInAttr) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GRP_ATTR_S),
        "::",
        stringify!(stInAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stGainAttr) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GRP_ATTR_S),
        "::",
        stringify!(stGainAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64BBoxPhyAddr) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GRP_ATTR_S),
        "::",
        stringify!(u64BBoxPhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stOutAttr) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GRP_ATTR_S),
        "::",
        stringify!(stOutAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stFrameRate) as usize - ptr as usize },
        252usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_GRP_ATTR_S),
        "::",
        stringify!(stFrameRate)
        )
    );
}

impl Default for rkAVS_GRP_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_GRP_ATTR_S = rkAVS_GRP_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_CHN_ATTR_S {
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub u32Depth: RK_U32,
    pub stFrameRate: FRAME_RATE_CTRL_S,
    pub u32FrameBufCnt: RK_U32,
}

#[test]
fn bindgen_test_layout_rkAVS_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_CHN_ATTR_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkAVS_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CHN_ATTR_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CHN_ATTR_S),
        "::",
        stringify!(u32Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CHN_ATTR_S),
        "::",
        stringify!(enCompressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDynamicRange) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CHN_ATTR_S),
        "::",
        stringify!(enDynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Depth) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CHN_ATTR_S),
        "::",
        stringify!(u32Depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stFrameRate) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CHN_ATTR_S),
        "::",
        stringify!(stFrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameBufCnt) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_CHN_ATTR_S),
        "::",
        stringify!(u32FrameBufCnt)
        )
    );
}

impl Default for rkAVS_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_CHN_ATTR_S = rkAVS_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkAVS_MOD_PARAM_S {
    pub u32WorkingSetSize: RK_U32,
    pub enMBSource: MB_SOURCE_E,
}

#[test]
fn bindgen_test_layout_rkAVS_MOD_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkAVS_MOD_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkAVS_MOD_PARAM_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkAVS_MOD_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkAVS_MOD_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkAVS_MOD_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32WorkingSetSize) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_MOD_PARAM_S),
        "::",
        stringify!(u32WorkingSetSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMBSource) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkAVS_MOD_PARAM_S),
        "::",
        stringify!(enMBSource)
        )
    );
}

impl Default for rkAVS_MOD_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type AVS_MOD_PARAM_S = rkAVS_MOD_PARAM_S;

pub const rkIVS_MODE_E_IVS_MODE_MD: rkIVS_MODE_E = 1;
pub const rkIVS_MODE_E_IVS_MODE_OD: rkIVS_MODE_E = 2;
pub const rkIVS_MODE_E_IVS_MODE_MD_OD: rkIVS_MODE_E = 3;
pub const rkIVS_MODE_E_IVS_MODE_BUTT: rkIVS_MODE_E = 4;

pub type rkIVS_MODE_E = ::std::os::raw::c_uint;

pub use self::rkIVS_MODE_E as IVS_MODE_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkIVS_AREA_S {
    pub u32PointNum: RK_U32,
    pub points: [POINT_S; 6usize],
}

#[test]
fn bindgen_test_layout_rkIVS_AREA_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_AREA_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_AREA_S>(),
        52usize,
        concat!("Size of: ", stringify!(rkIVS_AREA_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_AREA_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_AREA_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PointNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_AREA_S),
        "::",
        stringify!(u32PointNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).points) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_AREA_S),
        "::",
        stringify!(points)
        )
    );
}

pub type IVS_AREA_S = rkIVS_AREA_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkIVS_AREAS_S {
    pub u32AreaNum: RK_U32,
    pub areas: [IVS_AREA_S; 16usize],
}

#[test]
fn bindgen_test_layout_rkIVS_AREAS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_AREAS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_AREAS_S>(),
        836usize,
        concat!("Size of: ", stringify!(rkIVS_AREAS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_AREAS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_AREAS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32AreaNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_AREAS_S),
        "::",
        stringify!(u32AreaNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).areas) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_AREAS_S),
        "::",
        stringify!(areas)
        )
    );
}

pub type IVS_AREAS_S = rkIVS_AREAS_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkIVS_DET_ATTR_S {
    pub stDetArea: IVS_AREAS_S,
}

#[test]
fn bindgen_test_layout_rkIVS_DET_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_DET_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_DET_ATTR_S>(),
        836usize,
        concat!("Size of: ", stringify!(rkIVS_DET_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_DET_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_DET_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stDetArea) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_DET_ATTR_S),
        "::",
        stringify!(stDetArea)
        )
    );
}

pub type IVS_DET_ATTR_S = rkIVS_DET_ATTR_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkIVS_CHN_ATTR_S {
    pub enMode: IVS_MODE_E,
    pub u32PicWidth: RK_U32,
    pub u32PicHeight: RK_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enRotation: ROTATION_E,
    pub enMirror: MIRROR_E,
    pub bTraceClose: RK_BOOL,
    pub s32Gop: RK_S32,
    pub bSmearEnable: RK_BOOL,
    pub bWeightpEnable: RK_BOOL,
    pub bMDEnable: RK_BOOL,
    pub s32MDInterval: RK_S32,
    pub bMDNightMode: RK_BOOL,
    pub u32MDSensibility: RK_U32,
    pub bODEnable: RK_BOOL,
    pub s32ODInterval: RK_S32,
    pub s32ODPercent: RK_S32,
    pub __bindgen_anon_1: rkIVS_CHN_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkIVS_CHN_ATTR_S__bindgen_ty_1 {
    pub stDetAttr: IVS_DET_ATTR_S,
}

#[test]
fn bindgen_test_layout_rkIVS_CHN_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_CHN_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_CHN_ATTR_S__bindgen_ty_1>(),
        836usize,
        concat!("Size of: ", stringify!(rkIVS_CHN_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_CHN_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_CHN_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stDetAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stDetAttr)
        )
    );
}

impl Default for rkIVS_CHN_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkIVS_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_CHN_ATTR_S>(),
        904usize,
        concat!("Size of: ", stringify!(rkIVS_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(enMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicWidth) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(u32PicWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicHeight) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(u32PicHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enRotation) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(enRotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMirror) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(enMirror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bTraceClose) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(bTraceClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Gop) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(s32Gop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSmearEnable) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(bSmearEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bWeightpEnable) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(bWeightpEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMDEnable) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(bMDEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32MDInterval) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(s32MDInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMDNightMode) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(bMDNightMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MDSensibility) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(u32MDSensibility)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bODEnable) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(bODEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32ODInterval) as usize - ptr as usize },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(s32ODInterval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32ODPercent) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_CHN_ATTR_S),
        "::",
        stringify!(s32ODPercent)
        )
    );
}

impl Default for rkIVS_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type IVS_CHN_ATTR_S = rkIVS_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkIVS_MD_ATTR_S {
    pub s32ThreshSad: RK_S32,
    pub s32ThreshMove: RK_S32,
}

#[test]
fn bindgen_test_layout_rkIVS_MD_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_MD_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_MD_ATTR_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkIVS_MD_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_MD_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_MD_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32ThreshSad) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_MD_ATTR_S),
        "::",
        stringify!(s32ThreshSad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32ThreshMove) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_MD_ATTR_S),
        "::",
        stringify!(s32ThreshMove)
        )
    );
}

pub type IVS_MD_ATTR_S = rkIVS_MD_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkIVS_MD_INFO_S {
    pub frameId: RK_U32,
    pub u32RectNum: RK_U32,
    pub stRect: [RECT_S; 4096usize],
    pub pData: *mut RK_CHAR,
    pub u32Size: RK_U32,
    pub s32Fd: RK_S32,
}

#[test]
fn bindgen_test_layout_rkIVS_MD_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_MD_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_MD_INFO_S>(),
        65556usize,
        concat!("Size of: ", stringify!(rkIVS_MD_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_MD_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_MD_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameId) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_MD_INFO_S),
        "::",
        stringify!(frameId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RectNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_MD_INFO_S),
        "::",
        stringify!(u32RectNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_MD_INFO_S),
        "::",
        stringify!(stRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        65544usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_MD_INFO_S),
        "::",
        stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Size) as usize - ptr as usize },
        65548usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_MD_INFO_S),
        "::",
        stringify!(u32Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Fd) as usize - ptr as usize },
        65552usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_MD_INFO_S),
        "::",
        stringify!(s32Fd)
        )
    );
}

impl Default for rkIVS_MD_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type IVS_MD_INFO_S = rkIVS_MD_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkIVS_OD_INFO_S {
    pub frameId: RK_U32,
    pub u32Flag: RK_U32,
    pub u32PixSum: RK_U32,
}

#[test]
fn bindgen_test_layout_rkIVS_OD_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_OD_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_OD_INFO_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkIVS_OD_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_OD_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_OD_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameId) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_OD_INFO_S),
        "::",
        stringify!(frameId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Flag) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_OD_INFO_S),
        "::",
        stringify!(u32Flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PixSum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_OD_INFO_S),
        "::",
        stringify!(u32PixSum)
        )
    );
}

pub type IVS_OD_INFO_S = rkIVS_OD_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkIVS_RESULT_S {
    pub stMdInfo: IVS_MD_INFO_S,
    pub stOdInfo: IVS_OD_INFO_S,
}

#[test]
fn bindgen_test_layout_rkIVS_RESULT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_RESULT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_RESULT_S>(),
        65568usize,
        concat!("Size of: ", stringify!(rkIVS_RESULT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_RESULT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_RESULT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stMdInfo) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_RESULT_S),
        "::",
        stringify!(stMdInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stOdInfo) as usize - ptr as usize },
        65556usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_RESULT_S),
        "::",
        stringify!(stOdInfo)
        )
    );
}

impl Default for rkIVS_RESULT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type IVS_RESULT_S = rkIVS_RESULT_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkIVS_RESULT_INFO_S {
    pub s32ResultNum: RK_S32,
    pub pstResults: *mut IVS_RESULT_S,
}

#[test]
fn bindgen_test_layout_rkIVS_RESULT_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkIVS_RESULT_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkIVS_RESULT_INFO_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkIVS_RESULT_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkIVS_RESULT_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkIVS_RESULT_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32ResultNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_RESULT_INFO_S),
        "::",
        stringify!(s32ResultNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstResults) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkIVS_RESULT_INFO_S),
        "::",
        stringify!(pstResults)
        )
    );
}

impl Default for rkIVS_RESULT_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type IVS_RESULT_INFO_S = rkIVS_RESULT_INFO_S;

pub const rkVENC_RC_QUALITY_E_VENC_RC_QUALITY_HIGHEST: rkVENC_RC_QUALITY_E = 0;
pub const rkVENC_RC_QUALITY_E_VENC_RC_QUALITY_HIGHER: rkVENC_RC_QUALITY_E = 1;
pub const rkVENC_RC_QUALITY_E_VENC_RC_QUALITY_HIGH: rkVENC_RC_QUALITY_E = 2;
pub const rkVENC_RC_QUALITY_E_VENC_RC_QUALITY_MEDIUM: rkVENC_RC_QUALITY_E = 3;
pub const rkVENC_RC_QUALITY_E_VENC_RC_QUALITY_LOW: rkVENC_RC_QUALITY_E = 4;
pub const rkVENC_RC_QUALITY_E_VENC_RC_QUALITY_LOWER: rkVENC_RC_QUALITY_E = 5;
pub const rkVENC_RC_QUALITY_E_VENC_RC_QUALITY_LOWEST: rkVENC_RC_QUALITY_E = 6;
pub const rkVENC_RC_QUALITY_E_VENC_RC_QUALITY_BUTT: rkVENC_RC_QUALITY_E = 7;

pub type rkVENC_RC_QUALITY_E = ::std::os::raw::c_uint;

pub use self::rkVENC_RC_QUALITY_E as VENC_RC_QUALITY_E;

pub const rkVENC_RC_MODE_E_VENC_RC_MODE_H264CBR: rkVENC_RC_MODE_E = 1;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_H264VBR: rkVENC_RC_MODE_E = 2;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_H264AVBR: rkVENC_RC_MODE_E = 3;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_H264FIXQP: rkVENC_RC_MODE_E = 4;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_MJPEGCBR: rkVENC_RC_MODE_E = 5;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_MJPEGVBR: rkVENC_RC_MODE_E = 6;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_MJPEGFIXQP: rkVENC_RC_MODE_E = 7;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_H265CBR: rkVENC_RC_MODE_E = 8;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_H265VBR: rkVENC_RC_MODE_E = 9;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_H265AVBR: rkVENC_RC_MODE_E = 10;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_H265FIXQP: rkVENC_RC_MODE_E = 11;
pub const rkVENC_RC_MODE_E_VENC_RC_MODE_BUTT: rkVENC_RC_MODE_E = 12;

pub type rkVENC_RC_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_RC_MODE_E as VENC_RC_MODE_E;

pub const rkVENC_NALU_TYPE_E_VENC_NALU_BSLICE: rkVENC_NALU_TYPE_E = 1;
pub const rkVENC_NALU_TYPE_E_VENC_NALU_PSLICE: rkVENC_NALU_TYPE_E = 2;
pub const rkVENC_NALU_TYPE_E_VENC_NALU_ISLICE: rkVENC_NALU_TYPE_E = 3;
pub const rkVENC_NALU_TYPE_E_VENC_NALU_IDRSLICE: rkVENC_NALU_TYPE_E = 4;
pub const rkVENC_NALU_TYPE_E_VENC_NALU_SEI: rkVENC_NALU_TYPE_E = 5;
pub const rkVENC_NALU_TYPE_E_VENC_NALU_VPS: rkVENC_NALU_TYPE_E = 6;
pub const rkVENC_NALU_TYPE_E_VENC_NALU_SPS: rkVENC_NALU_TYPE_E = 7;
pub const rkVENC_NALU_TYPE_E_VENC_NALU_PPS: rkVENC_NALU_TYPE_E = 8;
pub const rkVENC_NALU_TYPE_E_VENC_NALU_BUTT: rkVENC_NALU_TYPE_E = 9;

pub type rkVENC_NALU_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_NALU_TYPE_E as VENC_NALU_TYPE_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_CBR_S {
    pub u32Gop: RK_U32,
    pub u32SrcFrameRateNum: RK_U32,
    pub u32SrcFrameRateDen: RK_U32,
    pub fr32DstFrameRateNum: RK_U32,
    pub fr32DstFrameRateDen: RK_U32,
    pub u32BitRate: RK_U32,
    pub u32StatTime: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_CBR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_CBR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_CBR_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkVENC_H264_CBR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_CBR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_CBR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Gop) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_CBR_S),
        "::",
        stringify!(u32Gop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_CBR_S),
        "::",
        stringify!(u32SrcFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateDen) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_CBR_S),
        "::",
        stringify!(u32SrcFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_CBR_S),
        "::",
        stringify!(fr32DstFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateDen) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_CBR_S),
        "::",
        stringify!(fr32DstFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BitRate) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_CBR_S),
        "::",
        stringify!(u32BitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StatTime) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_CBR_S),
        "::",
        stringify!(u32StatTime)
        )
    );
}

pub type VENC_H264_CBR_S = rkVENC_H264_CBR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_VBR_S {
    pub u32Gop: RK_U32,
    pub u32SrcFrameRateNum: RK_U32,
    pub u32SrcFrameRateDen: RK_U32,
    pub fr32DstFrameRateNum: RK_U32,
    pub fr32DstFrameRateDen: RK_U32,
    pub u32BitRate: RK_U32,
    pub u32MaxBitRate: RK_U32,
    pub u32MinBitRate: RK_U32,
    pub u32StatTime: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_VBR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_VBR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_VBR_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkVENC_H264_VBR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_VBR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_VBR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Gop) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(u32Gop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(u32SrcFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateDen) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(u32SrcFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(fr32DstFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateDen) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(fr32DstFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BitRate) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(u32BitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxBitRate) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(u32MaxBitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MinBitRate) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(u32MinBitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StatTime) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VBR_S),
        "::",
        stringify!(u32StatTime)
        )
    );
}

pub type VENC_H264_VBR_S = rkVENC_H264_VBR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_AVBR_S {
    pub u32Gop: RK_U32,
    pub u32SrcFrameRateNum: RK_U32,
    pub u32SrcFrameRateDen: RK_U32,
    pub fr32DstFrameRateNum: RK_U32,
    pub fr32DstFrameRateDen: RK_U32,
    pub u32BitRate: RK_U32,
    pub u32MaxBitRate: RK_U32,
    pub u32MinBitRate: RK_U32,
    pub u32StatTime: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_AVBR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_AVBR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_AVBR_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkVENC_H264_AVBR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_AVBR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_AVBR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Gop) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(u32Gop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(u32SrcFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateDen) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(u32SrcFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(fr32DstFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateDen) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(fr32DstFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BitRate) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(u32BitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxBitRate) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(u32MaxBitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MinBitRate) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(u32MinBitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StatTime) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_AVBR_S),
        "::",
        stringify!(u32StatTime)
        )
    );
}

pub type VENC_H264_AVBR_S = rkVENC_H264_AVBR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_FIXQP_S {
    pub u32Gop: RK_U32,
    pub u32SrcFrameRateNum: RK_U32,
    pub u32SrcFrameRateDen: RK_U32,
    pub fr32DstFrameRateNum: RK_U32,
    pub fr32DstFrameRateDen: RK_U32,
    pub u32IQp: RK_U32,
    pub u32PQp: RK_U32,
    pub u32BQp: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_FIXQP_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_FIXQP_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_FIXQP_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVENC_H264_FIXQP_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_FIXQP_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_FIXQP_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Gop) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_FIXQP_S),
        "::",
        stringify!(u32Gop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_FIXQP_S),
        "::",
        stringify!(u32SrcFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateDen) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_FIXQP_S),
        "::",
        stringify!(u32SrcFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_FIXQP_S),
        "::",
        stringify!(fr32DstFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateDen) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_FIXQP_S),
        "::",
        stringify!(fr32DstFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32IQp) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_FIXQP_S),
        "::",
        stringify!(u32IQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PQp) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_FIXQP_S),
        "::",
        stringify!(u32PQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BQp) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_FIXQP_S),
        "::",
        stringify!(u32BQp)
        )
    );
}

pub type VENC_H264_FIXQP_S = rkVENC_H264_FIXQP_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_MJPEG_CBR_S {
    pub u32SrcFrameRateNum: RK_U32,
    pub u32SrcFrameRateDen: RK_U32,
    pub fr32DstFrameRateNum: RK_U32,
    pub fr32DstFrameRateDen: RK_U32,
    pub u32BitRate: RK_U32,
    pub u32StatTime: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_MJPEG_CBR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MJPEG_CBR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MJPEG_CBR_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVENC_MJPEG_CBR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MJPEG_CBR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MJPEG_CBR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_CBR_S),
        "::",
        stringify!(u32SrcFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateDen) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_CBR_S),
        "::",
        stringify!(u32SrcFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_CBR_S),
        "::",
        stringify!(fr32DstFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateDen) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_CBR_S),
        "::",
        stringify!(fr32DstFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BitRate) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_CBR_S),
        "::",
        stringify!(u32BitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StatTime) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_CBR_S),
        "::",
        stringify!(u32StatTime)
        )
    );
}

pub type VENC_MJPEG_CBR_S = rkVENC_MJPEG_CBR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_MJPEG_VBR_S {
    pub u32SrcFrameRateNum: RK_U32,
    pub u32SrcFrameRateDen: RK_U32,
    pub fr32DstFrameRateNum: RK_U32,
    pub fr32DstFrameRateDen: RK_U32,
    pub u32BitRate: RK_U32,
    pub u32MaxBitRate: RK_U32,
    pub u32MinBitRate: RK_U32,
    pub u32StatTime: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_MJPEG_VBR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MJPEG_VBR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MJPEG_VBR_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVENC_MJPEG_VBR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MJPEG_VBR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MJPEG_VBR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_VBR_S),
        "::",
        stringify!(u32SrcFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateDen) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_VBR_S),
        "::",
        stringify!(u32SrcFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_VBR_S),
        "::",
        stringify!(fr32DstFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateDen) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_VBR_S),
        "::",
        stringify!(fr32DstFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BitRate) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_VBR_S),
        "::",
        stringify!(u32BitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxBitRate) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_VBR_S),
        "::",
        stringify!(u32MaxBitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MinBitRate) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_VBR_S),
        "::",
        stringify!(u32MinBitRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StatTime) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_VBR_S),
        "::",
        stringify!(u32StatTime)
        )
    );
}

pub type VENC_MJPEG_VBR_S = rkVENC_MJPEG_VBR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_MJPEG_FIXQP_S {
    pub u32SrcFrameRateNum: RK_U32,
    pub u32SrcFrameRateDen: RK_U32,
    pub fr32DstFrameRateNum: RK_U32,
    pub fr32DstFrameRateDen: RK_U32,
    pub u32Qfactor: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_MJPEG_FIXQP_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MJPEG_FIXQP_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MJPEG_FIXQP_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVENC_MJPEG_FIXQP_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MJPEG_FIXQP_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MJPEG_FIXQP_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_FIXQP_S),
        "::",
        stringify!(u32SrcFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SrcFrameRateDen) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_FIXQP_S),
        "::",
        stringify!(u32SrcFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_FIXQP_S),
        "::",
        stringify!(fr32DstFrameRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fr32DstFrameRateDen) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_FIXQP_S),
        "::",
        stringify!(fr32DstFrameRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Qfactor) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_FIXQP_S),
        "::",
        stringify!(u32Qfactor)
        )
    );
}

pub type VENC_MJPEG_FIXQP_S = rkVENC_MJPEG_FIXQP_S;
pub type VENC_H265_CBR_S = rkVENC_H264_CBR_S;
pub type VENC_H265_VBR_S = rkVENC_H264_VBR_S;
pub type VENC_H265_AVBR_S = rkVENC_H264_AVBR_S;
pub type VENC_H265_FIXQP_S = rkVENC_H264_FIXQP_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVENC_RC_ATTR_S {
    pub enRcMode: VENC_RC_MODE_E,
    pub __bindgen_anon_1: rkVENC_RC_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVENC_RC_ATTR_S__bindgen_ty_1 {
    pub stH264Cbr: VENC_H264_CBR_S,
    pub stH264Vbr: VENC_H264_VBR_S,
    pub stH264Avbr: VENC_H264_AVBR_S,
    pub stH264FixQp: VENC_H264_FIXQP_S,
    pub stMjpegCbr: VENC_MJPEG_CBR_S,
    pub stMjpegVbr: VENC_MJPEG_VBR_S,
    pub stMjpegFixQp: VENC_MJPEG_FIXQP_S,
    pub stH265Cbr: VENC_H265_CBR_S,
    pub stH265Vbr: VENC_H265_VBR_S,
    pub stH265Avbr: VENC_H265_AVBR_S,
    pub stH265FixQp: VENC_H265_FIXQP_S,
}

#[test]
fn bindgen_test_layout_rkVENC_RC_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_RC_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_RC_ATTR_S__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_RC_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH264Cbr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stH264Cbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH264Vbr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stH264Vbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH264Avbr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stH264Avbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH264FixQp) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stH264FixQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stMjpegCbr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stMjpegCbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stMjpegVbr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stMjpegVbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stMjpegFixQp) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stMjpegFixQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH265Cbr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stH265Cbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH265Vbr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stH265Vbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH265Avbr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stH265Avbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH265FixQp) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stH265FixQp)
        )
    );
}

impl Default for rkVENC_RC_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVENC_RC_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_RC_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_RC_ATTR_S>(),
        40usize,
        concat!("Size of: ", stringify!(rkVENC_RC_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_RC_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_RC_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enRcMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ATTR_S),
        "::",
        stringify!(enRcMode)
        )
    );
}

impl Default for rkVENC_RC_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_RC_ATTR_S = rkVENC_RC_ATTR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_PARAM_H264_S {
    pub u32StepQp: RK_U32,
    pub u32MaxQp: RK_U32,
    pub u32MinQp: RK_U32,
    pub u32MaxIQp: RK_U32,
    pub u32MinIQp: RK_U32,
    pub s32DeltIpQp: RK_S32,
    pub s32MaxReEncodeTimes: RK_S32,
    pub u32FrmMaxQp: RK_U32,
    pub u32FrmMinQp: RK_U32,
    pub u32FrmMaxIQp: RK_U32,
    pub u32FrmMinIQp: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_PARAM_H264_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_PARAM_H264_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_PARAM_H264_S>(),
        44usize,
        concat!("Size of: ", stringify!(rkVENC_PARAM_H264_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_PARAM_H264_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_PARAM_H264_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StepQp) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32StepQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxQp) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32MaxQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MinQp) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32MinQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxIQp) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32MaxIQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MinIQp) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32MinIQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DeltIpQp) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(s32DeltIpQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32MaxReEncodeTimes) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(s32MaxReEncodeTimes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmMaxQp) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32FrmMaxQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmMinQp) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32FrmMinQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmMaxIQp) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32FrmMaxIQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmMinIQp) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H264_S),
        "::",
        stringify!(u32FrmMinIQp)
        )
    );
}

pub type VENC_PARAM_H264_S = rkVENC_PARAM_H264_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_PARAM_H265_S {
    pub u32StepQp: RK_U32,
    pub u32MaxQp: RK_U32,
    pub u32MinQp: RK_U32,
    pub u32MaxIQp: RK_U32,
    pub u32MinIQp: RK_U32,
    pub s32DeltIpQp: RK_S32,
    pub s32MaxReEncodeTimes: RK_S32,
    pub u32FrmMaxQp: RK_U32,
    pub u32FrmMinQp: RK_U32,
    pub u32FrmMaxIQp: RK_U32,
    pub u32FrmMinIQp: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_PARAM_H265_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_PARAM_H265_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_PARAM_H265_S>(),
        44usize,
        concat!("Size of: ", stringify!(rkVENC_PARAM_H265_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_PARAM_H265_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_PARAM_H265_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StepQp) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32StepQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxQp) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32MaxQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MinQp) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32MinQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxIQp) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32MaxIQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MinIQp) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32MinIQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DeltIpQp) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(s32DeltIpQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32MaxReEncodeTimes) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(s32MaxReEncodeTimes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmMaxQp) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32FrmMaxQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmMinQp) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32FrmMinQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmMaxIQp) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32FrmMaxIQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmMinIQp) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_H265_S),
        "::",
        stringify!(u32FrmMinIQp)
        )
    );
}

pub type VENC_PARAM_H265_S = rkVENC_PARAM_H265_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_PARAM_MJPEG_S {
    pub u32Qfactor: RK_U32,
    pub u32MaxQfactor: RK_U32,
    pub u32MinQfactor: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_PARAM_MJPEG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_PARAM_MJPEG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_PARAM_MJPEG_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_PARAM_MJPEG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_PARAM_MJPEG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_PARAM_MJPEG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Qfactor) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_MJPEG_S),
        "::",
        stringify!(u32Qfactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxQfactor) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_MJPEG_S),
        "::",
        stringify!(u32MaxQfactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MinQfactor) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PARAM_MJPEG_S),
        "::",
        stringify!(u32MinQfactor)
        )
    );
}

pub type VENC_PARAM_MJPEG_S = rkVENC_PARAM_MJPEG_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVENC_RC_PARAM_S {
    pub s32FirstFrameStartQp: RK_U32,
    pub __bindgen_anon_1: rkVENC_RC_PARAM_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVENC_RC_PARAM_S__bindgen_ty_1 {
    pub stParamH264: VENC_PARAM_H264_S,
    pub stParamH265: VENC_PARAM_H265_S,
    pub stParamMjpeg: VENC_PARAM_MJPEG_S,
}

#[test]
fn bindgen_test_layout_rkVENC_RC_PARAM_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_RC_PARAM_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_RC_PARAM_S__bindgen_ty_1>(),
        44usize,
        concat!("Size of: ", stringify!(rkVENC_RC_PARAM_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_RC_PARAM_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_RC_PARAM_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stParamH264) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_PARAM_S__bindgen_ty_1),
        "::",
        stringify!(stParamH264)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stParamH265) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_PARAM_S__bindgen_ty_1),
        "::",
        stringify!(stParamH265)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stParamMjpeg) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_PARAM_S__bindgen_ty_1),
        "::",
        stringify!(stParamMjpeg)
        )
    );
}

impl Default for rkVENC_RC_PARAM_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVENC_RC_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_RC_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_RC_PARAM_S>(),
        48usize,
        concat!("Size of: ", stringify!(rkVENC_RC_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_RC_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_RC_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32FirstFrameStartQp) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_PARAM_S),
        "::",
        stringify!(s32FirstFrameStartQp)
        )
    );
}

impl Default for rkVENC_RC_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_RC_PARAM_S = rkVENC_RC_PARAM_S;
pub type RGN_HANDLE = RK_U32;

pub const rkRGN_TYPE_E_OVERLAY_RGN: rkRGN_TYPE_E = 0;
pub const rkRGN_TYPE_E_OVERLAY_EX_RGN: rkRGN_TYPE_E = 1;
pub const rkRGN_TYPE_E_COVER_RGN: rkRGN_TYPE_E = 2;
pub const rkRGN_TYPE_E_MOSAIC_RGN: rkRGN_TYPE_E = 3;
pub const rkRGN_TYPE_E_LINE_RGN: rkRGN_TYPE_E = 4;
pub const rkRGN_TYPE_E_RGN_BUTT: rkRGN_TYPE_E = 5;

pub type rkRGN_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkRGN_TYPE_E as RGN_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkOVERLAY_QP_INFO {
    pub bEnable: RK_BOOL,
    pub bAbsQp: RK_BOOL,
    pub bForceIntra: RK_BOOL,
    pub s32Qp: RK_S32,
}

#[test]
fn bindgen_test_layout_rkOVERLAY_QP_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<rkOVERLAY_QP_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkOVERLAY_QP_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(rkOVERLAY_QP_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<rkOVERLAY_QP_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(rkOVERLAY_QP_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_QP_INFO),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAbsQp) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_QP_INFO),
        "::",
        stringify!(bAbsQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bForceIntra) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_QP_INFO),
        "::",
        stringify!(bForceIntra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Qp) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_QP_INFO),
        "::",
        stringify!(s32Qp)
        )
    );
}

impl Default for rkOVERLAY_QP_INFO {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type OVERLAY_QP_INFO_S = rkOVERLAY_QP_INFO;

pub const rkINVERT_COLOR_MODE_E_LESSTHAN_LUM_THRESH: rkINVERT_COLOR_MODE_E = 0;
pub const rkINVERT_COLOR_MODE_E_MORETHAN_LUM_THRESH: rkINVERT_COLOR_MODE_E = 1;
pub const rkINVERT_COLOR_MODE_E_INVERT_COLOR_BUTT: rkINVERT_COLOR_MODE_E = 2;

pub type rkINVERT_COLOR_MODE_E = ::std::os::raw::c_uint;

pub use self::rkINVERT_COLOR_MODE_E as INVERT_COLOR_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkOVERLAY_INVERT_COLOR_S {
    pub stInvColArea: SIZE_S,
    pub u32LumThresh: RK_U32,
    pub enChgMod: INVERT_COLOR_MODE_E,
    pub bInvColEn: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkOVERLAY_INVERT_COLOR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkOVERLAY_INVERT_COLOR_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkOVERLAY_INVERT_COLOR_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkOVERLAY_INVERT_COLOR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkOVERLAY_INVERT_COLOR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkOVERLAY_INVERT_COLOR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stInvColArea) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_INVERT_COLOR_S),
        "::",
        stringify!(stInvColArea)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LumThresh) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_INVERT_COLOR_S),
        "::",
        stringify!(u32LumThresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enChgMod) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_INVERT_COLOR_S),
        "::",
        stringify!(enChgMod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bInvColEn) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_INVERT_COLOR_S),
        "::",
        stringify!(bInvColEn)
        )
    );
}

impl Default for rkOVERLAY_INVERT_COLOR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type OVERLAY_INVERT_COLOR_S = rkOVERLAY_INVERT_COLOR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkOVERLAY_ATTR_S {
    pub enPixelFmt: PIXEL_FORMAT_E,
    pub stSize: SIZE_S,
    pub u32CanvasNum: RK_U32,
    pub u32ClutNum: RK_U32,
    pub u32Clut: [RK_U32; 256usize],
}

#[test]
fn bindgen_test_layout_rkOVERLAY_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkOVERLAY_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkOVERLAY_ATTR_S>(),
        1044usize,
        concat!("Size of: ", stringify!(rkOVERLAY_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkOVERLAY_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkOVERLAY_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFmt) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_ATTR_S),
        "::",
        stringify!(enPixelFmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSize) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_ATTR_S),
        "::",
        stringify!(stSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32CanvasNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_ATTR_S),
        "::",
        stringify!(u32CanvasNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ClutNum) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_ATTR_S),
        "::",
        stringify!(u32ClutNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Clut) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_ATTR_S),
        "::",
        stringify!(u32Clut)
        )
    );
}

impl Default for rkOVERLAY_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type OVERLAY_ATTR_S = rkOVERLAY_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkOVERLAY_CHN_ATTR_S {
    pub stPoint: POINT_S,
    pub u32FgAlpha: RK_U32,
    pub u32BgAlpha: RK_U32,
    pub u32Layer: RK_U32,
    pub stQpInfo: OVERLAY_QP_INFO_S,
    pub u32ColorLUT: [RK_U32; 2usize],
    pub stInvertColor: OVERLAY_INVERT_COLOR_S,
}

#[test]
fn bindgen_test_layout_rkOVERLAY_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkOVERLAY_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkOVERLAY_CHN_ATTR_S>(),
        64usize,
        concat!("Size of: ", stringify!(rkOVERLAY_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkOVERLAY_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkOVERLAY_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stPoint) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_CHN_ATTR_S),
        "::",
        stringify!(stPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FgAlpha) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_CHN_ATTR_S),
        "::",
        stringify!(u32FgAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BgAlpha) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_CHN_ATTR_S),
        "::",
        stringify!(u32BgAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Layer) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_CHN_ATTR_S),
        "::",
        stringify!(u32Layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stQpInfo) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_CHN_ATTR_S),
        "::",
        stringify!(stQpInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ColorLUT) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_CHN_ATTR_S),
        "::",
        stringify!(u32ColorLUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stInvertColor) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkOVERLAY_CHN_ATTR_S),
        "::",
        stringify!(stInvertColor)
        )
    );
}

impl Default for rkOVERLAY_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type OVERLAY_CHN_ATTR_S = rkOVERLAY_CHN_ATTR_S;

pub const rkRGN_COORDINATE_E_RGN_ABS_COOR: rkRGN_COORDINATE_E = 0;
pub const rkRGN_COORDINATE_E_RGN_RATIO_COOR: rkRGN_COORDINATE_E = 1;

pub type rkRGN_COORDINATE_E = ::std::os::raw::c_uint;

pub use self::rkRGN_COORDINATE_E as RGN_COORDINATE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkCOVER_CHN_ATTR_S {
    pub stRect: RECT_S,
    pub u32Color: RK_U32,
    pub u32Layer: RK_U32,
    pub enCoordinate: RGN_COORDINATE_E,
}

#[test]
fn bindgen_test_layout_rkCOVER_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkCOVER_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkCOVER_CHN_ATTR_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkCOVER_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkCOVER_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkCOVER_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkCOVER_CHN_ATTR_S),
        "::",
        stringify!(stRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Color) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkCOVER_CHN_ATTR_S),
        "::",
        stringify!(u32Color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Layer) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkCOVER_CHN_ATTR_S),
        "::",
        stringify!(u32Layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCoordinate) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkCOVER_CHN_ATTR_S),
        "::",
        stringify!(enCoordinate)
        )
    );
}

impl Default for rkCOVER_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type COVER_CHN_ATTR_S = rkCOVER_CHN_ATTR_S;

pub const rkMOSAIC_BLK_SIZE_E_MOSAIC_BLK_SIZE_8: rkMOSAIC_BLK_SIZE_E = 0;
pub const rkMOSAIC_BLK_SIZE_E_MOSAIC_BLK_SIZE_16: rkMOSAIC_BLK_SIZE_E = 1;
pub const rkMOSAIC_BLK_SIZE_E_MOSAIC_BLK_SIZE_32: rkMOSAIC_BLK_SIZE_E = 2;
pub const rkMOSAIC_BLK_SIZE_E_MOSAIC_BLK_SIZE_64: rkMOSAIC_BLK_SIZE_E = 3;
pub const rkMOSAIC_BLK_SIZE_E_MOSAIC_BLK_SIZE_BUTT: rkMOSAIC_BLK_SIZE_E = 4;

pub type rkMOSAIC_BLK_SIZE_E = ::std::os::raw::c_uint;

pub use self::rkMOSAIC_BLK_SIZE_E as MOSAIC_BLK_SIZE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkMOSAIC_CHN_ATTR_S {
    pub stRect: RECT_S,
    pub enBlkSize: MOSAIC_BLK_SIZE_E,
    pub u32Layer: RK_U32,
}

#[test]
fn bindgen_test_layout_rkMOSAIC_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkMOSAIC_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkMOSAIC_CHN_ATTR_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkMOSAIC_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkMOSAIC_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkMOSAIC_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMOSAIC_CHN_ATTR_S),
        "::",
        stringify!(stRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enBlkSize) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMOSAIC_CHN_ATTR_S),
        "::",
        stringify!(enBlkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Layer) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMOSAIC_CHN_ATTR_S),
        "::",
        stringify!(u32Layer)
        )
    );
}

impl Default for rkMOSAIC_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type MOSAIC_CHN_ATTR_S = rkMOSAIC_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkLINE_CHN_ATTR_S {
    pub u32Thick: RK_U32,
    pub u32Color: RK_U32,
    pub stStartPoint: POINT_S,
    pub stEndPoint: POINT_S,
}

#[test]
fn bindgen_test_layout_rkLINE_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkLINE_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkLINE_CHN_ATTR_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkLINE_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkLINE_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkLINE_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Thick) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLINE_CHN_ATTR_S),
        "::",
        stringify!(u32Thick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Color) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLINE_CHN_ATTR_S),
        "::",
        stringify!(u32Color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stStartPoint) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLINE_CHN_ATTR_S),
        "::",
        stringify!(stStartPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stEndPoint) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLINE_CHN_ATTR_S),
        "::",
        stringify!(stEndPoint)
        )
    );
}

pub type LINE_CHN_ATTR_S = rkLINE_CHN_ATTR_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkRGN_ATTR_U {
    pub stOverlay: OVERLAY_ATTR_S,
}

#[test]
fn bindgen_test_layout_rkRGN_ATTR_U() {
    const UNINIT: ::std::mem::MaybeUninit<rkRGN_ATTR_U> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkRGN_ATTR_U>(),
        1044usize,
        concat!("Size of: ", stringify!(rkRGN_ATTR_U))
    );
    assert_eq!(
        ::std::mem::align_of::<rkRGN_ATTR_U>(),
        4usize,
        concat!("Alignment of ", stringify!(rkRGN_ATTR_U))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stOverlay) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_ATTR_U),
        "::",
        stringify!(stOverlay)
        )
    );
}

impl Default for rkRGN_ATTR_U {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type RGN_ATTR_U = rkRGN_ATTR_U;

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkRGN_CHN_ATTR_U {
    pub stOverlayChn: OVERLAY_CHN_ATTR_S,
    pub stCoverChn: COVER_CHN_ATTR_S,
    pub stMosaicChn: MOSAIC_CHN_ATTR_S,
    pub stLineChn: LINE_CHN_ATTR_S,
}

#[test]
fn bindgen_test_layout_rkRGN_CHN_ATTR_U() {
    const UNINIT: ::std::mem::MaybeUninit<rkRGN_CHN_ATTR_U> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkRGN_CHN_ATTR_U>(),
        64usize,
        concat!("Size of: ", stringify!(rkRGN_CHN_ATTR_U))
    );
    assert_eq!(
        ::std::mem::align_of::<rkRGN_CHN_ATTR_U>(),
        4usize,
        concat!("Alignment of ", stringify!(rkRGN_CHN_ATTR_U))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stOverlayChn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CHN_ATTR_U),
        "::",
        stringify!(stOverlayChn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCoverChn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CHN_ATTR_U),
        "::",
        stringify!(stCoverChn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stMosaicChn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CHN_ATTR_U),
        "::",
        stringify!(stMosaicChn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stLineChn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CHN_ATTR_U),
        "::",
        stringify!(stLineChn)
        )
    );
}

impl Default for rkRGN_CHN_ATTR_U {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type RGN_CHN_ATTR_U = rkRGN_CHN_ATTR_U;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkRGN_ATTR_S {
    pub enType: RGN_TYPE_E,
    pub unAttr: RGN_ATTR_U,
}

#[test]
fn bindgen_test_layout_rkRGN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkRGN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkRGN_ATTR_S>(),
        1048usize,
        concat!("Size of: ", stringify!(rkRGN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkRGN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkRGN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_ATTR_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unAttr) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_ATTR_S),
        "::",
        stringify!(unAttr)
        )
    );
}

impl Default for rkRGN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type RGN_ATTR_S = rkRGN_ATTR_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkRGN_CHN_ATTR_S {
    pub bShow: RK_BOOL,
    pub enType: RGN_TYPE_E,
    pub unChnAttr: RGN_CHN_ATTR_U,
}

#[test]
fn bindgen_test_layout_rkRGN_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkRGN_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkRGN_CHN_ATTR_S>(),
        72usize,
        concat!("Size of: ", stringify!(rkRGN_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkRGN_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkRGN_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bShow) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CHN_ATTR_S),
        "::",
        stringify!(bShow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CHN_ATTR_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unChnAttr) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CHN_ATTR_S),
        "::",
        stringify!(unChnAttr)
        )
    );
}

impl Default for rkRGN_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type RGN_CHN_ATTR_S = rkRGN_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkRGN_CANVAS_INFO_S {
    pub canvasBlk: MB_BLK,
    pub u64VirAddr: RK_U64,
    pub stSize: SIZE_S,
    pub u32VirWidth: RK_U32,
    pub u32VirHeight: RK_U32,
    pub enPixelFmt: PIXEL_FORMAT_E,
}

#[test]
fn bindgen_test_layout_rkRGN_CANVAS_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkRGN_CANVAS_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkRGN_CANVAS_INFO_S>(),
        40usize,
        concat!("Size of: ", stringify!(rkRGN_CANVAS_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkRGN_CANVAS_INFO_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkRGN_CANVAS_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canvasBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CANVAS_INFO_S),
        "::",
        stringify!(canvasBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64VirAddr) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CANVAS_INFO_S),
        "::",
        stringify!(u64VirAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSize) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CANVAS_INFO_S),
        "::",
        stringify!(stSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirWidth) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CANVAS_INFO_S),
        "::",
        stringify!(u32VirWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirHeight) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CANVAS_INFO_S),
        "::",
        stringify!(u32VirHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFmt) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRGN_CANVAS_INFO_S),
        "::",
        stringify!(enPixelFmt)
        )
    );
}

impl Default for rkRGN_CANVAS_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type RGN_CANVAS_INFO_S = rkRGN_CANVAS_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVPSS_VENC_WRAP_PARAM_S {
    pub bAllOnline: RK_BOOL,
    pub u32FrameRate: RK_U32,
    pub u32FullLinesStd: RK_U32,
    pub stLargeStreamSize: SIZE_S,
    pub stSmallStreamSize: SIZE_S,
}

#[test]
fn bindgen_test_layout_rkVPSS_VENC_WRAP_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVPSS_VENC_WRAP_PARAM_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVPSS_VENC_WRAP_PARAM_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkVPSS_VENC_WRAP_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVPSS_VENC_WRAP_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVPSS_VENC_WRAP_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAllOnline) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_VENC_WRAP_PARAM_S),
        "::",
        stringify!(bAllOnline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_VENC_WRAP_PARAM_S),
        "::",
        stringify!(u32FrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FullLinesStd) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_VENC_WRAP_PARAM_S),
        "::",
        stringify!(u32FullLinesStd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stLargeStreamSize) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_VENC_WRAP_PARAM_S),
        "::",
        stringify!(stLargeStreamSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSmallStreamSize) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_VENC_WRAP_PARAM_S),
        "::",
        stringify!(stSmallStreamSize)
        )
    );
}

impl Default for rkVPSS_VENC_WRAP_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VPSS_VENC_WRAP_PARAM_S = rkVPSS_VENC_WRAP_PARAM_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkMPP_SYS_CONFIG_S {
    pub u32Align: RK_U32,
}

#[test]
fn bindgen_test_layout_rkMPP_SYS_CONFIG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkMPP_SYS_CONFIG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkMPP_SYS_CONFIG_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkMPP_SYS_CONFIG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkMPP_SYS_CONFIG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkMPP_SYS_CONFIG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMPP_SYS_CONFIG_S),
        "::",
        stringify!(u32Align)
        )
    );
}

pub type MPP_SYS_CONFIG_S = rkMPP_SYS_CONFIG_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkSYS_VIRMEM_INFO_S {
    pub u64PhyAddr: RK_U64,
    pub bCached: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkSYS_VIRMEM_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkSYS_VIRMEM_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkSYS_VIRMEM_INFO_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkSYS_VIRMEM_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkSYS_VIRMEM_INFO_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkSYS_VIRMEM_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64PhyAddr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSYS_VIRMEM_INFO_S),
        "::",
        stringify!(u64PhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bCached) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSYS_VIRMEM_INFO_S),
        "::",
        stringify!(bCached)
        )
    );
}

impl Default for rkSYS_VIRMEM_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type SYS_VIRMEM_INFO_S = rkSYS_VIRMEM_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkMPP_BIND_DEST_S {
    pub u32Num: RK_U32,
    pub astMppChn: [MPP_CHN_S; 64usize],
}

#[test]
fn bindgen_test_layout_rkMPP_BIND_DEST_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkMPP_BIND_DEST_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkMPP_BIND_DEST_S>(),
        772usize,
        concat!("Size of: ", stringify!(rkMPP_BIND_DEST_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkMPP_BIND_DEST_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkMPP_BIND_DEST_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Num) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMPP_BIND_DEST_S),
        "::",
        stringify!(u32Num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).astMppChn) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkMPP_BIND_DEST_S),
        "::",
        stringify!(astMppChn)
        )
    );
}

impl Default for rkMPP_BIND_DEST_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type MPP_BIND_DEST_S = rkMPP_BIND_DEST_S;

pub const rkSCALE_RANGE_E_SCALE_RANGE_0: rkSCALE_RANGE_E = 0;
pub const rkSCALE_RANGE_E_SCALE_RANGE_1: rkSCALE_RANGE_E = 1;
pub const rkSCALE_RANGE_E_SCALE_RANGE_2: rkSCALE_RANGE_E = 2;
pub const rkSCALE_RANGE_E_SCALE_RANGE_3: rkSCALE_RANGE_E = 3;
pub const rkSCALE_RANGE_E_SCALE_RANGE_4: rkSCALE_RANGE_E = 4;
pub const rkSCALE_RANGE_E_SCALE_RANGE_5: rkSCALE_RANGE_E = 5;
pub const rkSCALE_RANGE_E_SCALE_RANGE_6: rkSCALE_RANGE_E = 6;
pub const rkSCALE_RANGE_E_SCALE_RANGE_7: rkSCALE_RANGE_E = 7;
pub const rkSCALE_RANGE_E_SCALE_RANGE_8: rkSCALE_RANGE_E = 8;
pub const rkSCALE_RANGE_E_SCALE_RANGE_9: rkSCALE_RANGE_E = 9;
pub const rkSCALE_RANGE_E_SCALE_RANGE_10: rkSCALE_RANGE_E = 10;
pub const rkSCALE_RANGE_E_SCALE_RANGE_11: rkSCALE_RANGE_E = 11;
pub const rkSCALE_RANGE_E_SCALE_RANGE_12: rkSCALE_RANGE_E = 12;
pub const rkSCALE_RANGE_E_SCALE_RANGE_13: rkSCALE_RANGE_E = 13;
pub const rkSCALE_RANGE_E_SCALE_RANGE_14: rkSCALE_RANGE_E = 14;
pub const rkSCALE_RANGE_E_SCALE_RANGE_15: rkSCALE_RANGE_E = 15;
pub const rkSCALE_RANGE_E_SCALE_RANGE_16: rkSCALE_RANGE_E = 16;
pub const rkSCALE_RANGE_E_SCALE_RANGE_17: rkSCALE_RANGE_E = 17;
pub const rkSCALE_RANGE_E_SCALE_RANGE_18: rkSCALE_RANGE_E = 18;
pub const rkSCALE_RANGE_E_SCALE_RANGE_BUTT: rkSCALE_RANGE_E = 19;

pub type rkSCALE_RANGE_E = ::std::os::raw::c_uint;

pub use self::rkSCALE_RANGE_E as SCALE_RANGE_E;

pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_0: rkCOEFF_LEVEL_E = 0;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_1: rkCOEFF_LEVEL_E = 1;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_2: rkCOEFF_LEVEL_E = 2;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_3: rkCOEFF_LEVEL_E = 3;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_4: rkCOEFF_LEVEL_E = 4;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_5: rkCOEFF_LEVEL_E = 5;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_6: rkCOEFF_LEVEL_E = 6;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_7: rkCOEFF_LEVEL_E = 7;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_8: rkCOEFF_LEVEL_E = 8;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_9: rkCOEFF_LEVEL_E = 9;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_10: rkCOEFF_LEVEL_E = 10;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_11: rkCOEFF_LEVEL_E = 11;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_12: rkCOEFF_LEVEL_E = 12;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_13: rkCOEFF_LEVEL_E = 13;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_14: rkCOEFF_LEVEL_E = 14;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_15: rkCOEFF_LEVEL_E = 15;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_16: rkCOEFF_LEVEL_E = 16;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_17: rkCOEFF_LEVEL_E = 17;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_18: rkCOEFF_LEVEL_E = 18;
pub const rkCOEFF_LEVEL_E_COEFF_LEVEL_BUTT: rkCOEFF_LEVEL_E = 19;

pub type rkCOEFF_LEVEL_E = ::std::os::raw::c_uint;

pub use self::rkCOEFF_LEVEL_E as COEFF_LEVEL_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkSCALE_COEFF_LEVEL_S {
    pub enHorLum: COEFF_LEVEL_E,
    pub enHorChr: COEFF_LEVEL_E,
    pub enVerLum: COEFF_LEVEL_E,
    pub enVerChr: COEFF_LEVEL_E,
}

#[test]
fn bindgen_test_layout_rkSCALE_COEFF_LEVEL_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkSCALE_COEFF_LEVEL_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkSCALE_COEFF_LEVEL_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkSCALE_COEFF_LEVEL_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkSCALE_COEFF_LEVEL_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkSCALE_COEFF_LEVEL_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enHorLum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSCALE_COEFF_LEVEL_S),
        "::",
        stringify!(enHorLum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enHorChr) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSCALE_COEFF_LEVEL_S),
        "::",
        stringify!(enHorChr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVerLum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSCALE_COEFF_LEVEL_S),
        "::",
        stringify!(enVerLum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVerChr) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSCALE_COEFF_LEVEL_S),
        "::",
        stringify!(enVerChr)
        )
    );
}

impl Default for rkSCALE_COEFF_LEVEL_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type SCALE_COEFF_LEVEL_S = rkSCALE_COEFF_LEVEL_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkSCALE_RANGE_S {
    pub enHorizontal: SCALE_RANGE_E,
    pub enVertical: SCALE_RANGE_E,
}

#[test]
fn bindgen_test_layout_rkSCALE_RANGE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkSCALE_RANGE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkSCALE_RANGE_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkSCALE_RANGE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkSCALE_RANGE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkSCALE_RANGE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enHorizontal) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSCALE_RANGE_S),
        "::",
        stringify!(enHorizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVertical) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSCALE_RANGE_S),
        "::",
        stringify!(enVertical)
        )
    );
}

impl Default for rkSCALE_RANGE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type SCALE_RANGE_S = rkSCALE_RANGE_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkSCALE_COEFF_INFO_S {
    pub stScaleRange: SCALE_RANGE_S,
    pub stScaleCoeffLevel: SCALE_COEFF_LEVEL_S,
}

#[test]
fn bindgen_test_layout_rkSCALE_COEFF_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkSCALE_COEFF_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkSCALE_COEFF_INFO_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkSCALE_COEFF_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkSCALE_COEFF_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkSCALE_COEFF_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stScaleRange) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSCALE_COEFF_INFO_S),
        "::",
        stringify!(stScaleRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stScaleCoeffLevel) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkSCALE_COEFF_INFO_S),
        "::",
        stringify!(stScaleCoeffLevel)
        )
    );
}

impl Default for rkSCALE_COEFF_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type SCALE_COEFF_INFO_S = rkSCALE_COEFF_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkGPS_INFO_S {
    pub chGPSLatitudeRef: RK_CHAR,
    pub au32GPSLatitude: [[RK_U32; 2usize]; 3usize],
    pub chGPSLongitudeRef: RK_CHAR,
    pub au32GPSLongitude: [[RK_U32; 2usize]; 3usize],
    pub u8GPSAltitudeRef: RK_U8,
    pub au32GPSAltitude: [RK_U32; 2usize],
}

#[test]
fn bindgen_test_layout_rkGPS_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkGPS_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkGPS_INFO_S>(),
        68usize,
        concat!("Size of: ", stringify!(rkGPS_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkGPS_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkGPS_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chGPSLatitudeRef) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkGPS_INFO_S),
        "::",
        stringify!(chGPSLatitudeRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au32GPSLatitude) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkGPS_INFO_S),
        "::",
        stringify!(au32GPSLatitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chGPSLongitudeRef) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkGPS_INFO_S),
        "::",
        stringify!(chGPSLongitudeRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au32GPSLongitude) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkGPS_INFO_S),
        "::",
        stringify!(au32GPSLongitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8GPSAltitudeRef) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(rkGPS_INFO_S),
        "::",
        stringify!(u8GPSAltitudeRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au32GPSAltitude) as usize - ptr as usize },
        60usize,
        concat!(
        "Offset of field: ",
        stringify!(rkGPS_INFO_S),
        "::",
        stringify!(au32GPSAltitude)
        )
    );
}

pub type GPS_INFO_S = rkGPS_INFO_S;

pub const rkCHN_INPUT_MODE_E_CHN_INPUT_MODE_NORMAL: rkCHN_INPUT_MODE_E = 0;
pub const rkCHN_INPUT_MODE_E_CHN_INPUT_MODE_REMAIN_NEWEST: rkCHN_INPUT_MODE_E = 1;
pub const rkCHN_INPUT_MODE_E_CHN_INPUT_MODE_DROP_ALWAYS: rkCHN_INPUT_MODE_E = 2;
pub const rkCHN_INPUT_MODE_E_CHN_INPUT_MODE_BUTT: rkCHN_INPUT_MODE_E = 3;

pub type rkCHN_INPUT_MODE_E = ::std::os::raw::c_uint;

pub use self::rkCHN_INPUT_MODE_E as CHN_INPUT_MODE_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkRAW_FRAME_COMPRESS_PARAM_S {
    pub u32CompRatio_10Bit: RK_U32,
    pub u32CompRatio_12Bit: RK_U32,
    pub u32CompRatio_14Bit: RK_U32,
}

#[test]
fn bindgen_test_layout_rkRAW_FRAME_COMPRESS_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkRAW_FRAME_COMPRESS_PARAM_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkRAW_FRAME_COMPRESS_PARAM_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkRAW_FRAME_COMPRESS_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkRAW_FRAME_COMPRESS_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkRAW_FRAME_COMPRESS_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32CompRatio_10Bit) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRAW_FRAME_COMPRESS_PARAM_S),
        "::",
        stringify!(u32CompRatio_10Bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32CompRatio_12Bit) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRAW_FRAME_COMPRESS_PARAM_S),
        "::",
        stringify!(u32CompRatio_12Bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32CompRatio_14Bit) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkRAW_FRAME_COMPRESS_PARAM_S),
        "::",
        stringify!(u32CompRatio_14Bit)
        )
    );
}

pub type RAW_FRAME_COMPRESS_PARAM_S = rkRAW_FRAME_COMPRESS_PARAM_S;

pub const RK_ERR_NOT_ALIGNED: _bindgen_ty_1 = 62;
pub const RK_ERR_MINIFICATION: _bindgen_ty_1 = 63;
pub const RK_ERR_CLIP_AREA: _bindgen_ty_1 = 64;
pub const RK_ERR_JOB_TIMEOUT: _bindgen_ty_1 = 65;
pub const RK_ERR_UNSUPPORTED_OPERATION: _bindgen_ty_1 = 66;
pub const RK_ERR_QUERY_TIMEOUT: _bindgen_ty_1 = 67;
pub const RK_ERR_INTERRUPT: _bindgen_ty_1 = 68;

pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type TDE_HANDLE = RK_S32;

pub const rkTDE_ALUCMD_E_TDE_OSD_COVER: rkTDE_ALUCMD_E = 256;
pub const rkTDE_ALUCMD_E_TDE_OSD_DST_ALPHA: rkTDE_ALUCMD_E = 261;
pub const rkTDE_ALUCMD_E_TDE_OSD_ALL_ALPHA: rkTDE_ALUCMD_E = 1029;

pub type rkTDE_ALUCMD_E = ::std::os::raw::c_uint;

pub use self::rkTDE_ALUCMD_E as TDE_ALUCMD_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkTDE_SURFACE_S {
    pub pMbBlk: MB_BLK,
    pub enColorFmt: PIXEL_FORMAT_E,
    pub u32Height: RK_U32,
    pub u32Width: RK_U32,
    pub enComprocessMode: COMPRESS_MODE_E,
}

#[test]
fn bindgen_test_layout_rkTDE_SURFACE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkTDE_SURFACE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkTDE_SURFACE_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkTDE_SURFACE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkTDE_SURFACE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkTDE_SURFACE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_SURFACE_S),
        "::",
        stringify!(pMbBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enColorFmt) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_SURFACE_S),
        "::",
        stringify!(enColorFmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_SURFACE_S),
        "::",
        stringify!(u32Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_SURFACE_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enComprocessMode) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_SURFACE_S),
        "::",
        stringify!(enComprocessMode)
        )
    );
}

impl Default for rkTDE_SURFACE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type TDE_SURFACE_S = rkTDE_SURFACE_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkTDE_RECT_S {
    pub s32Xpos: RK_S32,
    pub s32Ypos: RK_S32,
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
}

#[test]
fn bindgen_test_layout_rkTDE_RECT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkTDE_RECT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkTDE_RECT_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkTDE_RECT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkTDE_RECT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkTDE_RECT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Xpos) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_RECT_S),
        "::",
        stringify!(s32Xpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Ypos) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_RECT_S),
        "::",
        stringify!(s32Ypos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_RECT_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_RECT_S),
        "::",
        stringify!(u32Height)
        )
    );
}

pub type TDE_RECT_S = rkTDE_RECT_S;

pub const rkTDE_COLORKEY_MODE_E_TDE_COLORKEY_MODE_NONE: rkTDE_COLORKEY_MODE_E = 0;
pub const rkTDE_COLORKEY_MODE_E_TDE_COLORKEY_MODE_FOREGROUND: rkTDE_COLORKEY_MODE_E = 1;
pub const rkTDE_COLORKEY_MODE_E_TDE_COLORKEY_MODE_BACKGROUND: rkTDE_COLORKEY_MODE_E = 2;
pub const rkTDE_COLORKEY_MODE_E_TDE_COLORKEY_MODE_BUTT: rkTDE_COLORKEY_MODE_E = 3;

pub type rkTDE_COLORKEY_MODE_E = ::std::os::raw::c_uint;

pub use self::rkTDE_COLORKEY_MODE_E as TDE_COLORKEY_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkTDE_OPT_S {
    pub enColorKeyMode: TDE_COLORKEY_MODE_E,
    pub unColorKeyValue: RK_U32,
    pub enMirror: MIRROR_E,
    pub stClipRect: TDE_RECT_S,
    pub u32GlobalAlpha: RK_U32,
}

#[test]
fn bindgen_test_layout_rkTDE_OPT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkTDE_OPT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkTDE_OPT_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkTDE_OPT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkTDE_OPT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkTDE_OPT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enColorKeyMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_OPT_S),
        "::",
        stringify!(enColorKeyMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unColorKeyValue) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_OPT_S),
        "::",
        stringify!(unColorKeyValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMirror) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_OPT_S),
        "::",
        stringify!(enMirror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stClipRect) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_OPT_S),
        "::",
        stringify!(stClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32GlobalAlpha) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkTDE_OPT_S),
        "::",
        stringify!(u32GlobalAlpha)
        )
    );
}

impl Default for rkTDE_OPT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type TDE_OPT_S = rkTDE_OPT_S;

pub const rkVIDEO_DEC_MODE_E_VIDEO_DEC_MODE_IPB: rkVIDEO_DEC_MODE_E = 0;
pub const rkVIDEO_DEC_MODE_E_VIDEO_DEC_MODE_IP: rkVIDEO_DEC_MODE_E = 1;
pub const rkVIDEO_DEC_MODE_E_VIDEO_DEC_MODE_I: rkVIDEO_DEC_MODE_E = 2;
pub const rkVIDEO_DEC_MODE_E_VIDEO_DEC_MODE_BUTT: rkVIDEO_DEC_MODE_E = 3;

pub type rkVIDEO_DEC_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVIDEO_DEC_MODE_E as VIDEO_DEC_MODE_E;

pub const rkVIDEO_OUTPUT_ORDER_E_VIDEO_OUTPUT_ORDER_DISP: rkVIDEO_OUTPUT_ORDER_E = 0;
pub const rkVIDEO_OUTPUT_ORDER_E_VIDEO_OUTPUT_ORDER_DEC: rkVIDEO_OUTPUT_ORDER_E = 1;
pub const rkVIDEO_OUTPUT_ORDER_E_VIDEO_OUTPUT_ORDER_BUTT: rkVIDEO_OUTPUT_ORDER_E = 2;

pub type rkVIDEO_OUTPUT_ORDER_E = ::std::os::raw::c_uint;

pub use self::rkVIDEO_OUTPUT_ORDER_E as VIDEO_OUTPUT_ORDER_E;

pub const rkVIDEO_MODE_E_VIDEO_MODE_STREAM: rkVIDEO_MODE_E = 0;
pub const rkVIDEO_MODE_E_VIDEO_MODE_FRAME: rkVIDEO_MODE_E = 1;
pub const rkVIDEO_MODE_E_VIDEO_MODE_COMPAT: rkVIDEO_MODE_E = 2;
pub const rkVIDEO_MODE_E_VIDEO_MODE_BUTT: rkVIDEO_MODE_E = 3;

pub type rkVIDEO_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVIDEO_MODE_E as VIDEO_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVDEC_PARAM_VIDEO_S {
    pub bDeiEn: RK_BOOL,
    pub s32ErrThreshold: RK_S32,
    pub enDecMode: VIDEO_DEC_MODE_E,
    pub enOutputOrder: VIDEO_OUTPUT_ORDER_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
}

#[test]
fn bindgen_test_layout_rkVDEC_PARAM_VIDEO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_PARAM_VIDEO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_PARAM_VIDEO_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVDEC_PARAM_VIDEO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_PARAM_VIDEO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_PARAM_VIDEO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeiEn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PARAM_VIDEO_S),
        "::",
        stringify!(bDeiEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32ErrThreshold) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PARAM_VIDEO_S),
        "::",
        stringify!(s32ErrThreshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDecMode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PARAM_VIDEO_S),
        "::",
        stringify!(enDecMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enOutputOrder) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PARAM_VIDEO_S),
        "::",
        stringify!(enOutputOrder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PARAM_VIDEO_S),
        "::",
        stringify!(enCompressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVideoFormat) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PARAM_VIDEO_S),
        "::",
        stringify!(enVideoFormat)
        )
    );
}

impl Default for rkVDEC_PARAM_VIDEO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_PARAM_VIDEO_S = rkVDEC_PARAM_VIDEO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVDEC_PARAM_PICTURE_S {
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32Alpha: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVDEC_PARAM_PICTURE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_PARAM_PICTURE_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_PARAM_PICTURE_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVDEC_PARAM_PICTURE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_PARAM_PICTURE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_PARAM_PICTURE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PARAM_PICTURE_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Alpha) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PARAM_PICTURE_S),
        "::",
        stringify!(u32Alpha)
        )
    );
}

impl Default for rkVDEC_PARAM_PICTURE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_PARAM_PICTURE_S = rkVDEC_PARAM_PICTURE_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVDEC_CHN_PARAM_S {
    pub enType: RK_CODEC_ID_E,
    pub u32DisplayFrameNum: RK_U32,
    pub __bindgen_anon_1: rkVDEC_CHN_PARAM_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVDEC_CHN_PARAM_S__bindgen_ty_1 {
    pub stVdecVideoParam: VDEC_PARAM_VIDEO_S,
    pub stVdecPictureParam: VDEC_PARAM_PICTURE_S,
}

#[test]
fn bindgen_test_layout_rkVDEC_CHN_PARAM_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_CHN_PARAM_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_CHN_PARAM_S__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(rkVDEC_CHN_PARAM_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_CHN_PARAM_S__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(rkVDEC_CHN_PARAM_S__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVdecVideoParam) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_PARAM_S__bindgen_ty_1),
        "::",
        stringify!(stVdecVideoParam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVdecPictureParam) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_PARAM_S__bindgen_ty_1),
        "::",
        stringify!(stVdecPictureParam)
        )
    );
}

impl Default for rkVDEC_CHN_PARAM_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVDEC_CHN_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_CHN_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_CHN_PARAM_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVDEC_CHN_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_CHN_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_CHN_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_PARAM_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32DisplayFrameNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_PARAM_S),
        "::",
        stringify!(u32DisplayFrameNum)
        )
    );
}

impl Default for rkVDEC_CHN_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_CHN_PARAM_S = rkVDEC_CHN_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVDEC_ATTR_VIDEO_S {
    pub u32RefFrameNum: RK_U32,
    pub bTemporalMvpEnable: RK_BOOL,
    pub u32TmvBufSize: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVDEC_ATTR_VIDEO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_ATTR_VIDEO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_ATTR_VIDEO_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVDEC_ATTR_VIDEO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_ATTR_VIDEO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_ATTR_VIDEO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RefFrameNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_ATTR_VIDEO_S),
        "::",
        stringify!(u32RefFrameNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bTemporalMvpEnable) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_ATTR_VIDEO_S),
        "::",
        stringify!(bTemporalMvpEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32TmvBufSize) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_ATTR_VIDEO_S),
        "::",
        stringify!(u32TmvBufSize)
        )
    );
}

impl Default for rkVDEC_ATTR_VIDEO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_ATTR_VIDEO_S = rkVDEC_ATTR_VIDEO_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVDEC_CHN_ATTR_S {
    pub enMode: VIDEO_MODE_E,
    pub enType: RK_CODEC_ID_E,
    pub u32PicWidth: RK_U32,
    pub u32PicHeight: RK_U32,
    pub u32PicVirWidth: RK_U32,
    pub u32PicVirHeight: RK_U32,
    pub u32StreamBufSize: RK_U32,
    pub u32FrameBufSize: RK_U32,
    pub u32FrameBufCnt: RK_U32,
    pub u32StreamBufCnt: RK_U32,
    pub __bindgen_anon_1: rkVDEC_CHN_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVDEC_CHN_ATTR_S__bindgen_ty_1 {
    pub stVdecVideoAttr: VDEC_ATTR_VIDEO_S,
}

#[test]
fn bindgen_test_layout_rkVDEC_CHN_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_CHN_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_CHN_ATTR_S__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(rkVDEC_CHN_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_CHN_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_CHN_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVdecVideoAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stVdecVideoAttr)
        )
    );
}

impl Default for rkVDEC_CHN_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVDEC_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_CHN_ATTR_S>(),
        52usize,
        concat!("Size of: ", stringify!(rkVDEC_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(enMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicWidth) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(u32PicWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicHeight) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(u32PicHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicVirWidth) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(u32PicVirWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicVirHeight) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(u32PicVirHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StreamBufSize) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(u32StreamBufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameBufSize) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(u32FrameBufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameBufCnt) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(u32FrameBufCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StreamBufCnt) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_ATTR_S),
        "::",
        stringify!(u32StreamBufCnt)
        )
    );
}

impl Default for rkVDEC_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_CHN_ATTR_S = rkVDEC_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVDEC_STREAM_S {
    pub pMbBlk: MB_BLK,
    pub u32Len: RK_U32,
    pub u64PTS: RK_U64,
    pub bEndOfStream: RK_BOOL,
    pub bEndOfFrame: RK_BOOL,
    pub bBypassMbBlk: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVDEC_STREAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_STREAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_STREAM_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVDEC_STREAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_STREAM_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkVDEC_STREAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_STREAM_S),
        "::",
        stringify!(pMbBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Len) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_STREAM_S),
        "::",
        stringify!(u32Len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64PTS) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_STREAM_S),
        "::",
        stringify!(u64PTS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEndOfStream) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_STREAM_S),
        "::",
        stringify!(bEndOfStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEndOfFrame) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_STREAM_S),
        "::",
        stringify!(bEndOfFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBypassMbBlk) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_STREAM_S),
        "::",
        stringify!(bBypassMbBlk)
        )
    );
}

impl Default for rkVDEC_STREAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_STREAM_S = rkVDEC_STREAM_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVDEC_DECODE_ERROR_S {
    pub s32FormatErr: RK_S32,
    pub s32PicSizeErrSet: RK_S32,
    pub s32StreamUnsprt: RK_S32,
    pub s32PackErr: RK_S32,
    pub s32PrtclNumErrSet: RK_S32,
    pub s32RefErrSet: RK_S32,
    pub s32PicBufSizeErrSet: RK_S32,
    pub s32StreamSizeOver: RK_S32,
    pub s32VdecStreamNotRelease: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVDEC_DECODE_ERROR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_DECODE_ERROR_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_DECODE_ERROR_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkVDEC_DECODE_ERROR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_DECODE_ERROR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_DECODE_ERROR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32FormatErr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32FormatErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32PicSizeErrSet) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32PicSizeErrSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32StreamUnsprt) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32StreamUnsprt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32PackErr) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32PackErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32PrtclNumErrSet) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32PrtclNumErrSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32RefErrSet) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32RefErrSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32PicBufSizeErrSet) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32PicBufSizeErrSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32StreamSizeOver) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32StreamSizeOver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32VdecStreamNotRelease) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_DECODE_ERROR_S),
        "::",
        stringify!(s32VdecStreamNotRelease)
        )
    );
}

pub type VDEC_DECODE_ERROR_S = rkVDEC_DECODE_ERROR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVDEC_CHN_STATUS_S {
    pub enType: RK_CODEC_ID_E,
    pub u32LeftStreamBytes: RK_U32,
    pub u32LeftStreamFrames: RK_U32,
    pub u32LeftPics: RK_U32,
    pub bStartRecvStream: RK_BOOL,
    pub u32RecvStreamFrames: RK_U32,
    pub u32DecodeStreamFrames: RK_U32,
    pub stVdecDecErr: VDEC_DECODE_ERROR_S,
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVDEC_CHN_STATUS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_CHN_STATUS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_CHN_STATUS_S>(),
        72usize,
        concat!("Size of: ", stringify!(rkVDEC_CHN_STATUS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_CHN_STATUS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_CHN_STATUS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftStreamBytes) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(u32LeftStreamBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftStreamFrames) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(u32LeftStreamFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftPics) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(u32LeftPics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bStartRecvStream) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(bStartRecvStream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RecvStreamFrames) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(u32RecvStreamFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32DecodeStreamFrames) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(u32DecodeStreamFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVdecDecErr) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(stVdecDecErr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_CHN_STATUS_S),
        "::",
        stringify!(u32Height)
        )
    );
}

impl Default for rkVDEC_CHN_STATUS_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_CHN_STATUS_S = rkVDEC_CHN_STATUS_S;

pub const rkVDEC_EVNT_E_VDEC_EVNT_STREAM_ERR: rkVDEC_EVNT_E = 1;
pub const rkVDEC_EVNT_E_VDEC_EVNT_UNSUPPORT: rkVDEC_EVNT_E = 2;
pub const rkVDEC_EVNT_E_VDEC_EVNT_OVER_REFTHR: rkVDEC_EVNT_E = 3;
pub const rkVDEC_EVNT_E_VDEC_EVNT_REF_NUM_OVER: rkVDEC_EVNT_E = 4;
pub const rkVDEC_EVNT_E_VDEC_EVNT_SLICE_NUM_OVER: rkVDEC_EVNT_E = 5;
pub const rkVDEC_EVNT_E_VDEC_EVNT_SPS_NUM_OVER: rkVDEC_EVNT_E = 6;
pub const rkVDEC_EVNT_E_VDEC_EVNT_PPS_NUM_OVER: rkVDEC_EVNT_E = 7;
pub const rkVDEC_EVNT_E_VDEC_EVNT_PICBUF_SIZE_ERR: rkVDEC_EVNT_E = 8;
pub const rkVDEC_EVNT_E_VDEC_EVNT_SIZE_OVER: rkVDEC_EVNT_E = 9;
pub const rkVDEC_EVNT_E_VDEC_EVNT_IMG_SIZE_CHANGE: rkVDEC_EVNT_E = 10;
pub const rkVDEC_EVNT_E_VDEC_EVNT_VPS_NUM_OVER: rkVDEC_EVNT_E = 11;
pub const rkVDEC_EVNT_E_VDEC_EVNT_BUTT: rkVDEC_EVNT_E = 12;

pub type rkVDEC_EVNT_E = ::std::os::raw::c_uint;

pub use self::rkVDEC_EVNT_E as VDEC_EVNT_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVDEC_PICTURE_MOD_PARAM_S {
    pub u32MaxPicWidth: RK_U32,
    pub u32MaxPicHeight: RK_U32,
    pub bSupportProgressive: RK_BOOL,
    pub bDynamicAllocate: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVDEC_PICTURE_MOD_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_PICTURE_MOD_PARAM_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_PICTURE_MOD_PARAM_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkVDEC_PICTURE_MOD_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_PICTURE_MOD_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_PICTURE_MOD_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxPicWidth) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PICTURE_MOD_PARAM_S),
        "::",
        stringify!(u32MaxPicWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxPicHeight) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PICTURE_MOD_PARAM_S),
        "::",
        stringify!(u32MaxPicHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSupportProgressive) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PICTURE_MOD_PARAM_S),
        "::",
        stringify!(bSupportProgressive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDynamicAllocate) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_PICTURE_MOD_PARAM_S),
        "::",
        stringify!(bDynamicAllocate)
        )
    );
}

impl Default for rkVDEC_PICTURE_MOD_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_PICTURE_MOD_PARAM_S = rkVDEC_PICTURE_MOD_PARAM_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVDEC_VIDEO_MOD_PARAM_S {
    pub u32MaxPicWidth: RK_U32,
    pub u32MaxPicHeight: RK_U32,
    pub u32MaxSliceNum: RK_U32,
    pub u32VdhMsgNum: RK_U32,
    pub u32VdhBinSize: RK_U32,
    pub u32VdhExtMemLevel: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVDEC_VIDEO_MOD_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_VIDEO_MOD_PARAM_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_VIDEO_MOD_PARAM_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVDEC_VIDEO_MOD_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_VIDEO_MOD_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_VIDEO_MOD_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxPicWidth) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_VIDEO_MOD_PARAM_S),
        "::",
        stringify!(u32MaxPicWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxPicHeight) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_VIDEO_MOD_PARAM_S),
        "::",
        stringify!(u32MaxPicHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxSliceNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_VIDEO_MOD_PARAM_S),
        "::",
        stringify!(u32MaxSliceNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VdhMsgNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_VIDEO_MOD_PARAM_S),
        "::",
        stringify!(u32VdhMsgNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VdhBinSize) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_VIDEO_MOD_PARAM_S),
        "::",
        stringify!(u32VdhBinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VdhExtMemLevel) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_VIDEO_MOD_PARAM_S),
        "::",
        stringify!(u32VdhExtMemLevel)
        )
    );
}

pub type VDEC_VIDEO_MOD_PARAM_S = rkVDEC_VIDEO_MOD_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVDEC_MOD_PARAM_S {
    pub enVdecMBSource: MB_SOURCE_E,
    pub u32MiniBufMode: RK_U32,
    pub u32ParallelMode: RK_U32,
    pub stVideoModParam: VDEC_VIDEO_MOD_PARAM_S,
    pub stPictureModParam: VDEC_PICTURE_MOD_PARAM_S,
}

#[test]
fn bindgen_test_layout_rkVDEC_MOD_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVDEC_MOD_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVDEC_MOD_PARAM_S>(),
        52usize,
        concat!("Size of: ", stringify!(rkVDEC_MOD_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVDEC_MOD_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVDEC_MOD_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVdecMBSource) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_MOD_PARAM_S),
        "::",
        stringify!(enVdecMBSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MiniBufMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_MOD_PARAM_S),
        "::",
        stringify!(u32MiniBufMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ParallelMode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_MOD_PARAM_S),
        "::",
        stringify!(u32ParallelMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVideoModParam) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_MOD_PARAM_S),
        "::",
        stringify!(stVideoModParam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stPictureModParam) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVDEC_MOD_PARAM_S),
        "::",
        stringify!(stPictureModParam)
        )
    );
}

impl Default for rkVDEC_MOD_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VDEC_MOD_PARAM_S = rkVDEC_MOD_PARAM_S;

pub const rkH264E_NALU_TYPE_E_H264E_NALU_BSLICE: rkH264E_NALU_TYPE_E = 0;
pub const rkH264E_NALU_TYPE_E_H264E_NALU_PSLICE: rkH264E_NALU_TYPE_E = 1;
pub const rkH264E_NALU_TYPE_E_H264E_NALU_ISLICE: rkH264E_NALU_TYPE_E = 2;
pub const rkH264E_NALU_TYPE_E_H264E_NALU_IDRSLICE: rkH264E_NALU_TYPE_E = 5;
pub const rkH264E_NALU_TYPE_E_H264E_NALU_SEI: rkH264E_NALU_TYPE_E = 6;
pub const rkH264E_NALU_TYPE_E_H264E_NALU_SPS: rkH264E_NALU_TYPE_E = 7;
pub const rkH264E_NALU_TYPE_E_H264E_NALU_PPS: rkH264E_NALU_TYPE_E = 8;
pub const rkH264E_NALU_TYPE_E_H264E_NALU_BUTT: rkH264E_NALU_TYPE_E = 9;

pub type rkH264E_NALU_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkH264E_NALU_TYPE_E as H264E_NALU_TYPE_E;

pub const rkH265E_NALU_TYPE_E_H265E_NALU_BSLICE: rkH265E_NALU_TYPE_E = 0;
pub const rkH265E_NALU_TYPE_E_H265E_NALU_PSLICE: rkH265E_NALU_TYPE_E = 1;
pub const rkH265E_NALU_TYPE_E_H265E_NALU_ISLICE: rkH265E_NALU_TYPE_E = 2;
pub const rkH265E_NALU_TYPE_E_H265E_NALU_IDRSLICE: rkH265E_NALU_TYPE_E = 19;
pub const rkH265E_NALU_TYPE_E_H265E_NALU_VPS: rkH265E_NALU_TYPE_E = 32;
pub const rkH265E_NALU_TYPE_E_H265E_NALU_SPS: rkH265E_NALU_TYPE_E = 33;
pub const rkH265E_NALU_TYPE_E_H265E_NALU_PPS: rkH265E_NALU_TYPE_E = 34;
pub const rkH265E_NALU_TYPE_E_H265E_NALU_SEI: rkH265E_NALU_TYPE_E = 39;
pub const rkH265E_NALU_TYPE_E_H265E_NALU_BUTT: rkH265E_NALU_TYPE_E = 40;

pub type rkH265E_NALU_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkH265E_NALU_TYPE_E as H265E_NALU_TYPE_E;

pub const rkH264E_REFSLICE_TYPE_E_H264E_REFSLICE_FOR_1X: rkH264E_REFSLICE_TYPE_E = 1;
pub const rkH264E_REFSLICE_TYPE_E_H264E_REFSLICE_FOR_2X: rkH264E_REFSLICE_TYPE_E = 2;
pub const rkH264E_REFSLICE_TYPE_E_H264E_REFSLICE_FOR_4X: rkH264E_REFSLICE_TYPE_E = 5;
pub const rkH264E_REFSLICE_TYPE_E_H264E_REFSLICE_FOR_BUTT: rkH264E_REFSLICE_TYPE_E = 6;

pub type rkH264E_REFSLICE_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkH264E_REFSLICE_TYPE_E as H264E_REFSLICE_TYPE_E;

pub const rkJPEGE_PACK_TYPE_E_JPEGE_PACK_ECS: rkJPEGE_PACK_TYPE_E = 5;
pub const rkJPEGE_PACK_TYPE_E_JPEGE_PACK_APP: rkJPEGE_PACK_TYPE_E = 6;
pub const rkJPEGE_PACK_TYPE_E_JPEGE_PACK_VDO: rkJPEGE_PACK_TYPE_E = 7;
pub const rkJPEGE_PACK_TYPE_E_JPEGE_PACK_PIC: rkJPEGE_PACK_TYPE_E = 8;
pub const rkJPEGE_PACK_TYPE_E_JPEGE_PACK_DCF: rkJPEGE_PACK_TYPE_E = 9;
pub const rkJPEGE_PACK_TYPE_E_JPEGE_PACK_DCF_PIC: rkJPEGE_PACK_TYPE_E = 10;
pub const rkJPEGE_PACK_TYPE_E_JPEGE_PACK_BUTT: rkJPEGE_PACK_TYPE_E = 11;

pub type rkJPEGE_PACK_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkJPEGE_PACK_TYPE_E as JPEGE_PACK_TYPE_E;

pub const rkH264E_PROFILE_E_H264E_PROFILE_BASELINE: rkH264E_PROFILE_E = 66;
pub const rkH264E_PROFILE_E_H264E_PROFILE_MAIN: rkH264E_PROFILE_E = 77;
pub const rkH264E_PROFILE_E_H264E_PROFILE_HIGH: rkH264E_PROFILE_E = 100;
pub const rkH264E_PROFILE_E_H264E_PROFILE__BUTT: rkH264E_PROFILE_E = 101;

pub type rkH264E_PROFILE_E = ::std::os::raw::c_uint;

pub use self::rkH264E_PROFILE_E as H264E_PROFILE_E;

pub const rkH265E_PROFILE_E_H265E_PROFILE_MAIN: rkH265E_PROFILE_E = 0;
pub const rkH265E_PROFILE_E_H265E_PROFILE_MAIN10: rkH265E_PROFILE_E = 1;
pub const rkH265E_PROFILE_E_H265E_PROFILE__BUTT: rkH265E_PROFILE_E = 2;

pub type rkH265E_PROFILE_E = ::std::os::raw::c_uint;

pub use self::rkH265E_PROFILE_E as H265E_PROFILE_E;

pub const rkPRORES_PACK_TYPE_E_PRORES_PACK_PIC: rkPRORES_PACK_TYPE_E = 1;
pub const rkPRORES_PACK_TYPE_E_PRORES_PACK_BUTT: rkPRORES_PACK_TYPE_E = 2;

pub type rkPRORES_PACK_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkPRORES_PACK_TYPE_E as PRORES_PACK_TYPE_E;

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVENC_DATA_TYPE_U {
    pub enH264EType: H264E_NALU_TYPE_E,
    pub enJPEGEType: JPEGE_PACK_TYPE_E,
    pub enH265EType: H265E_NALU_TYPE_E,
    pub enPRORESType: PRORES_PACK_TYPE_E,
}

#[test]
fn bindgen_test_layout_rkVENC_DATA_TYPE_U() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_DATA_TYPE_U> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_DATA_TYPE_U>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_DATA_TYPE_U))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_DATA_TYPE_U>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_DATA_TYPE_U))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enH264EType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_DATA_TYPE_U),
        "::",
        stringify!(enH264EType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enJPEGEType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_DATA_TYPE_U),
        "::",
        stringify!(enJPEGEType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enH265EType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_DATA_TYPE_U),
        "::",
        stringify!(enH265EType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPRORESType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_DATA_TYPE_U),
        "::",
        stringify!(enPRORESType)
        )
    );
}

impl Default for rkVENC_DATA_TYPE_U {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_DATA_TYPE_U = rkVENC_DATA_TYPE_U;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVENC_PACK_INFO_S {
    pub u32PackType: VENC_DATA_TYPE_U,
    pub u32PackOffset: RK_U32,
    pub u32PackLength: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_PACK_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_PACK_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_PACK_INFO_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_PACK_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_PACK_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_PACK_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PackType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_INFO_S),
        "::",
        stringify!(u32PackType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PackOffset) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_INFO_S),
        "::",
        stringify!(u32PackOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PackLength) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_INFO_S),
        "::",
        stringify!(u32PackLength)
        )
    );
}

impl Default for rkVENC_PACK_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_PACK_INFO_S = rkVENC_PACK_INFO_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVENC_PACK_S {
    pub pMbBlk: MB_BLK,
    pub u32Len: RK_U32,
    pub u64PTS: RK_U64,
    pub bFrameEnd: RK_BOOL,
    pub bStreamEnd: RK_BOOL,
    pub DataType: VENC_DATA_TYPE_U,
    pub u32Offset: RK_U32,
    pub u32DataNum: RK_U32,
    pub stPackInfo: [VENC_PACK_INFO_S; 8usize],
}

#[test]
fn bindgen_test_layout_rkVENC_PACK_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_PACK_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_PACK_S>(),
        136usize,
        concat!("Size of: ", stringify!(rkVENC_PACK_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_PACK_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkVENC_PACK_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(pMbBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Len) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(u32Len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64PTS) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(u64PTS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFrameEnd) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(bFrameEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bStreamEnd) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(bStreamEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DataType) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(DataType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Offset) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(u32Offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32DataNum) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(u32DataNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stPackInfo) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PACK_S),
        "::",
        stringify!(stPackInfo)
        )
    );
}

impl Default for rkVENC_PACK_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_PACK_S = rkVENC_PACK_S;

pub const rkH264E_REF_TYPE_E_BASE_IDRSLICE: rkH264E_REF_TYPE_E = 0;
pub const rkH264E_REF_TYPE_E_BASE_PSLICE_REFTOIDR: rkH264E_REF_TYPE_E = 1;
pub const rkH264E_REF_TYPE_E_BASE_PSLICE_REFBYBASE: rkH264E_REF_TYPE_E = 2;
pub const rkH264E_REF_TYPE_E_BASE_PSLICE_REFBYENHANCE: rkH264E_REF_TYPE_E = 3;
pub const rkH264E_REF_TYPE_E_ENHANCE_PSLICE_REFBYENHANCE: rkH264E_REF_TYPE_E = 4;
pub const rkH264E_REF_TYPE_E_ENHANCE_PSLICE_NOTFORREF: rkH264E_REF_TYPE_E = 5;
pub const rkH264E_REF_TYPE_E_ENHANCE_PSLICE_BUTT: rkH264E_REF_TYPE_E = 6;

pub type rkH264E_REF_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkH264E_REF_TYPE_E as H264E_REF_TYPE_E;
pub use self::rkH264E_REF_TYPE_E as H265E_REF_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_STREAM_INFO_H264_S {
    pub u32PicBytesNum: RK_U32,
    pub u32Inter16x16MbNum: RK_U32,
    pub u32Inter8x8MbNum: RK_U32,
    pub u32Intra16MbNum: RK_U32,
    pub u32Intra8MbNum: RK_U32,
    pub u32Intra4MbNum: RK_U32,
    pub enRefType: H264E_REF_TYPE_E,
    pub u32UpdateAttrCnt: RK_U32,
    pub u32StartQp: RK_U32,
    pub u32MeanQp: RK_U32,
    pub bPSkip: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_INFO_H264_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_INFO_H264_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_INFO_H264_S>(),
        44usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_INFO_H264_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_INFO_H264_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_INFO_H264_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicBytesNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32PicBytesNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter16x16MbNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32Inter16x16MbNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter8x8MbNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32Inter8x8MbNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra16MbNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32Intra16MbNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra8MbNum) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32Intra8MbNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra4MbNum) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32Intra4MbNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enRefType) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(enRefType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32UpdateAttrCnt) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32UpdateAttrCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StartQp) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32StartQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MeanQp) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(u32MeanQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPSkip) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H264_S),
        "::",
        stringify!(bPSkip)
        )
    );
}

impl Default for rkVENC_STREAM_INFO_H264_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_STREAM_INFO_H264_S = rkVENC_STREAM_INFO_H264_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_STREAM_INFO_H265_S {
    pub u32PicBytesNum: RK_U32,
    pub u32Inter64x64CuNum: RK_U32,
    pub u32Inter32x32CuNum: RK_U32,
    pub u32Inter16x16CuNum: RK_U32,
    pub u32Inter8x8CuNum: RK_U32,
    pub u32Intra32x32CuNum: RK_U32,
    pub u32Intra16x16CuNum: RK_U32,
    pub u32Intra8x8CuNum: RK_U32,
    pub u32Intra4x4CuNum: RK_U32,
    pub enRefType: H265E_REF_TYPE_E,
    pub u32UpdateAttrCnt: RK_U32,
    pub u32StartQp: RK_U32,
    pub u32MeanQp: RK_U32,
    pub bPSkip: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_INFO_H265_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_INFO_H265_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_INFO_H265_S>(),
        56usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_INFO_H265_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_INFO_H265_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_INFO_H265_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicBytesNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32PicBytesNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter64x64CuNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32Inter64x64CuNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter32x32CuNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32Inter32x32CuNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter16x16CuNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32Inter16x16CuNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter8x8CuNum) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32Inter8x8CuNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra32x32CuNum) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32Intra32x32CuNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra16x16CuNum) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32Intra16x16CuNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra8x8CuNum) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32Intra8x8CuNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra4x4CuNum) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32Intra4x4CuNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enRefType) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(enRefType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32UpdateAttrCnt) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32UpdateAttrCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StartQp) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32StartQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MeanQp) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(u32MeanQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPSkip) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_H265_S),
        "::",
        stringify!(bPSkip)
        )
    );
}

impl Default for rkVENC_STREAM_INFO_H265_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_STREAM_INFO_H265_S = rkVENC_STREAM_INFO_H265_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_SSE_INFO_S {
    pub bSSEEn: RK_BOOL,
    pub u32SSEVal: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_SSE_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_SSE_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_SSE_INFO_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_SSE_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_SSE_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_SSE_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSSEEn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SSE_INFO_S),
        "::",
        stringify!(bSSEEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SSEVal) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SSE_INFO_S),
        "::",
        stringify!(u32SSEVal)
        )
    );
}

impl Default for rkVENC_SSE_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_SSE_INFO_S = rkVENC_SSE_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_STREAM_ADVANCE_INFO_H264_S {
    pub u32ResidualBitNum: RK_U32,
    pub u32HeadBitNum: RK_U32,
    pub u32MadiVal: RK_U32,
    pub u32MadpVal: RK_U32,
    pub dPSNRVal: RK_DOUBLE,
    pub u32MseLcuCnt: RK_U32,
    pub u32MseSum: RK_U32,
    pub stSSEInfo: [VENC_SSE_INFO_S; 8usize],
    pub u32QpHstgrm: [RK_U32; 52usize],
    pub u32MoveScene16x16Num: RK_U32,
    pub u32MoveSceneBits: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_ADVANCE_INFO_H264_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_ADVANCE_INFO_H264_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_ADVANCE_INFO_H264_S>(),
        312usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_ADVANCE_INFO_H264_S>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ResidualBitNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32ResidualBitNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32HeadBitNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32HeadBitNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MadiVal) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32MadiVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MadpVal) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32MadpVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dPSNRVal) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(dPSNRVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MseLcuCnt) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32MseLcuCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MseSum) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32MseSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSSEInfo) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(stSSEInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32QpHstgrm) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32QpHstgrm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MoveScene16x16Num) as usize - ptr as usize },
        304usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32MoveScene16x16Num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MoveSceneBits) as usize - ptr as usize },
        308usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H264_S),
        "::",
        stringify!(u32MoveSceneBits)
        )
    );
}

impl Default for rkVENC_STREAM_ADVANCE_INFO_H264_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_STREAM_ADVANCE_INFO_H264_S = rkVENC_STREAM_ADVANCE_INFO_H264_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_STREAM_ADVANCE_INFO_JPEG_S {
    pub _address: u8,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_ADVANCE_INFO_JPEG_S() {
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_ADVANCE_INFO_JPEG_S>(),
        1usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_ADVANCE_INFO_JPEG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_ADVANCE_INFO_JPEG_S>(),
        1usize,
        concat!(
        "Alignment of ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_JPEG_S)
        )
    );
}

pub type VENC_STREAM_ADVANCE_INFO_JPEG_S = rkVENC_STREAM_ADVANCE_INFO_JPEG_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_STREAM_ADVANCE_INFO_PRORES_S {
    pub _address: u8,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_ADVANCE_INFO_PRORES_S() {
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_ADVANCE_INFO_PRORES_S>(),
        1usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_ADVANCE_INFO_PRORES_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_ADVANCE_INFO_PRORES_S>(),
        1usize,
        concat!(
        "Alignment of ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_PRORES_S)
        )
    );
}

pub type VENC_STREAM_ADVANCE_INFO_PRORES_S = rkVENC_STREAM_ADVANCE_INFO_PRORES_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_STREAM_ADVANCE_INFO_H265_S {
    pub u32ResidualBitNum: RK_U32,
    pub u32HeadBitNum: RK_U32,
    pub u32MadiVal: RK_U32,
    pub u32MadpVal: RK_U32,
    pub dPSNRVal: RK_DOUBLE,
    pub u32MseLcuCnt: RK_U32,
    pub u32MseSum: RK_U32,
    pub stSSEInfo: [VENC_SSE_INFO_S; 8usize],
    pub u32QpHstgrm: [RK_U32; 52usize],
    pub u32MoveScene32x32Num: RK_U32,
    pub u32MoveSceneBits: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_ADVANCE_INFO_H265_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_ADVANCE_INFO_H265_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_ADVANCE_INFO_H265_S>(),
        312usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_ADVANCE_INFO_H265_S>(),
        8usize,
        concat!(
        "Alignment of ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ResidualBitNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32ResidualBitNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32HeadBitNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32HeadBitNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MadiVal) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32MadiVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MadpVal) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32MadpVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dPSNRVal) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(dPSNRVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MseLcuCnt) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32MseLcuCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MseSum) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32MseSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSSEInfo) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(stSSEInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32QpHstgrm) as usize - ptr as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32QpHstgrm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MoveScene32x32Num) as usize - ptr as usize },
        304usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32MoveScene32x32Num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MoveSceneBits) as usize - ptr as usize },
        308usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_ADVANCE_INFO_H265_S),
        "::",
        stringify!(u32MoveSceneBits)
        )
    );
}

impl Default for rkVENC_STREAM_ADVANCE_INFO_H265_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_STREAM_ADVANCE_INFO_H265_S = rkVENC_STREAM_ADVANCE_INFO_H265_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_STREAM_INFO_PRORES_S {
    pub u32PicBytesNum: RK_U32,
    pub u32UpdateAttrCnt: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_INFO_PRORES_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_INFO_PRORES_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_INFO_PRORES_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_INFO_PRORES_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_INFO_PRORES_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_INFO_PRORES_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicBytesNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_PRORES_S),
        "::",
        stringify!(u32PicBytesNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32UpdateAttrCnt) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_PRORES_S),
        "::",
        stringify!(u32UpdateAttrCnt)
        )
    );
}

pub type VENC_STREAM_INFO_PRORES_S = rkVENC_STREAM_INFO_PRORES_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_STREAM_INFO_JPEG_S {
    pub u32PicBytesNum: RK_U32,
    pub u32UpdateAttrCnt: RK_U32,
    pub u32Qfactor: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_INFO_JPEG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_INFO_JPEG_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_INFO_JPEG_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_INFO_JPEG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_INFO_JPEG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_INFO_JPEG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicBytesNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_JPEG_S),
        "::",
        stringify!(u32PicBytesNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32UpdateAttrCnt) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_JPEG_S),
        "::",
        stringify!(u32UpdateAttrCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Qfactor) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_JPEG_S),
        "::",
        stringify!(u32Qfactor)
        )
    );
}

pub type VENC_STREAM_INFO_JPEG_S = rkVENC_STREAM_INFO_JPEG_S;

#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct rkVENC_STREAM_S {
    pub pstPack: *mut VENC_PACK_S,
    pub __bindgen_padding_0: [u32; 3usize],
    pub u32PackCount: RK_U32,
    pub u32Seq: RK_U32,
    pub __bindgen_anon_1: rkVENC_STREAM_S__bindgen_ty_1,
    pub __bindgen_anon_2: rkVENC_STREAM_S__bindgen_ty_2,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVENC_STREAM_S__bindgen_ty_1 {
    pub stH264Info: VENC_STREAM_INFO_H264_S,
    pub stJpegInfo: VENC_STREAM_INFO_JPEG_S,
    pub stH265Info: VENC_STREAM_INFO_H265_S,
    pub stProresInfo: VENC_STREAM_INFO_PRORES_S,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_S__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH264Info) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S__bindgen_ty_1),
        "::",
        stringify!(stH264Info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stJpegInfo) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S__bindgen_ty_1),
        "::",
        stringify!(stJpegInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH265Info) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S__bindgen_ty_1),
        "::",
        stringify!(stH265Info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stProresInfo) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S__bindgen_ty_1),
        "::",
        stringify!(stProresInfo)
        )
    );
}

impl Default for rkVENC_STREAM_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVENC_STREAM_S__bindgen_ty_2 {
    pub stAdvanceH264Info: VENC_STREAM_ADVANCE_INFO_H264_S,
    pub stAdvanceJpegInfo: VENC_STREAM_ADVANCE_INFO_JPEG_S,
    pub stAdvanceH265Info: VENC_STREAM_ADVANCE_INFO_H265_S,
    pub stAdvanceProresInfo: VENC_STREAM_ADVANCE_INFO_PRORES_S,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_S__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_S__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_S__bindgen_ty_2>(),
        312usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_S__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_S__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_S__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAdvanceH264Info) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S__bindgen_ty_2),
        "::",
        stringify!(stAdvanceH264Info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAdvanceJpegInfo) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S__bindgen_ty_2),
        "::",
        stringify!(stAdvanceJpegInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAdvanceH265Info) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S__bindgen_ty_2),
        "::",
        stringify!(stAdvanceH265Info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAdvanceProresInfo) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S__bindgen_ty_2),
        "::",
        stringify!(stAdvanceProresInfo)
        )
    );
}

impl Default for rkVENC_STREAM_S__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_S>(),
        400usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_S>(),
        16usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstPack) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S),
        "::",
        stringify!(pstPack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PackCount) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S),
        "::",
        stringify!(u32PackCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Seq) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_S),
        "::",
        stringify!(u32Seq)
        )
    );
}

impl Default for rkVENC_STREAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_STREAM_S = rkVENC_STREAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_STREAM_INFO_S {
    pub enRefType: H265E_REF_TYPE_E,
    pub u32PicBytesNum: RK_U32,
    pub u32PicCnt: RK_U32,
    pub u32StartQp: RK_U32,
    pub u32MeanQp: RK_U32,
    pub bPSkip: RK_BOOL,
    pub u32ResidualBitNum: RK_U32,
    pub u32HeadBitNum: RK_U32,
    pub u32MadiVal: RK_U32,
    pub u32MadpVal: RK_U32,
    pub u32MseSum: RK_U32,
    pub u32MseLcuCnt: RK_U32,
    pub dPSNRVal: RK_DOUBLE,
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_INFO_S>(),
        56usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_INFO_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enRefType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(enRefType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicBytesNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32PicBytesNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicCnt) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32PicCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StartQp) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32StartQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MeanQp) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32MeanQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bPSkip) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(bPSkip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ResidualBitNum) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32ResidualBitNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32HeadBitNum) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32HeadBitNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MadiVal) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32MadiVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MadpVal) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32MadpVal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MseSum) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32MseSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MseLcuCnt) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(u32MseLcuCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dPSNRVal) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_INFO_S),
        "::",
        stringify!(dPSNRVal)
        )
    );
}

impl Default for rkVENC_STREAM_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_STREAM_INFO_S = rkVENC_STREAM_INFO_S;

pub const rkVENC_GOP_MODE_E_VENC_GOPMODE_INIT: rkVENC_GOP_MODE_E = 0;
pub const rkVENC_GOP_MODE_E_VENC_GOPMODE_NORMALP: rkVENC_GOP_MODE_E = 1;
pub const rkVENC_GOP_MODE_E_VENC_GOPMODE_TSVC2: rkVENC_GOP_MODE_E = 2;
pub const rkVENC_GOP_MODE_E_VENC_GOPMODE_TSVC3: rkVENC_GOP_MODE_E = 3;
pub const rkVENC_GOP_MODE_E_VENC_GOPMODE_TSVC4: rkVENC_GOP_MODE_E = 4;
pub const rkVENC_GOP_MODE_E_VENC_GOPMODE_SMARTP: rkVENC_GOP_MODE_E = 5;
pub const rkVENC_GOP_MODE_E_VENC_GOPMODE_BUTT: rkVENC_GOP_MODE_E = 6;

pub type rkVENC_GOP_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_GOP_MODE_E as VENC_GOP_MODE_E;

pub const rkVENC_ROTATION_E_VENC_ROTATION_0: rkVENC_ROTATION_E = 0;
pub const rkVENC_ROTATION_E_VENC_ROTATION_90: rkVENC_ROTATION_E = 90;
pub const rkVENC_ROTATION_E_VENC_ROTATION_180: rkVENC_ROTATION_E = 180;
pub const rkVENC_ROTATION_E_VENC_ROTATION_270: rkVENC_ROTATION_E = 270;
pub const rkVENC_ROTATION_E_VENC_ROTATION_BUTT: rkVENC_ROTATION_E = 271;

pub type rkVENC_ROTATION_E = ::std::os::raw::c_uint;

pub use self::rkVENC_ROTATION_E as VENC_ROTATION_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_MPF_CFG_S {
    pub u8LargeThumbNailNum: RK_U8,
    pub astLargeThumbNailSize: [SIZE_S; 2usize],
}

#[test]
fn bindgen_test_layout_rkVENC_MPF_CFG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MPF_CFG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MPF_CFG_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVENC_MPF_CFG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MPF_CFG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MPF_CFG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8LargeThumbNailNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MPF_CFG_S),
        "::",
        stringify!(u8LargeThumbNailNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).astLargeThumbNailSize) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MPF_CFG_S),
        "::",
        stringify!(astLargeThumbNailSize)
        )
    );
}

pub type VENC_MPF_CFG_S = rkVENC_MPF_CFG_S;

pub const rkVENC_PIC_RECEIVE_MODE_E_VENC_PIC_RECEIVE_SINGLE: rkVENC_PIC_RECEIVE_MODE_E = 0;
pub const rkVENC_PIC_RECEIVE_MODE_E_VENC_PIC_RECEIVE_MULTI: rkVENC_PIC_RECEIVE_MODE_E = 1;
pub const rkVENC_PIC_RECEIVE_MODE_E_VENC_PIC_RECEIVE_BUTT: rkVENC_PIC_RECEIVE_MODE_E = 2;

pub type rkVENC_PIC_RECEIVE_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_PIC_RECEIVE_MODE_E as VENC_PIC_RECEIVE_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_ATTR_JPEG_S {
    pub bSupportDCF: RK_BOOL,
    pub stMPFCfg: VENC_MPF_CFG_S,
    pub enReceiveMode: VENC_PIC_RECEIVE_MODE_E,
}

#[test]
fn bindgen_test_layout_rkVENC_ATTR_JPEG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_ATTR_JPEG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ATTR_JPEG_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkVENC_ATTR_JPEG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ATTR_JPEG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_ATTR_JPEG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSupportDCF) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_JPEG_S),
        "::",
        stringify!(bSupportDCF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stMPFCfg) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_JPEG_S),
        "::",
        stringify!(stMPFCfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enReceiveMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_JPEG_S),
        "::",
        stringify!(enReceiveMode)
        )
    );
}

impl Default for rkVENC_ATTR_JPEG_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_ATTR_JPEG_S = rkVENC_ATTR_JPEG_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_ATTR_MJPEG_S {
    pub _address: u8,
}

#[test]
fn bindgen_test_layout_rkVENC_ATTR_MJPEG_S() {
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ATTR_MJPEG_S>(),
        1usize,
        concat!("Size of: ", stringify!(rkVENC_ATTR_MJPEG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ATTR_MJPEG_S>(),
        1usize,
        concat!("Alignment of ", stringify!(rkVENC_ATTR_MJPEG_S))
    );
}

pub type VENC_ATTR_MJPEG_S = rkVENC_ATTR_MJPEG_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_ATTR_H264_S {
    pub u32Level: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_ATTR_H264_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_ATTR_H264_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ATTR_H264_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_ATTR_H264_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ATTR_H264_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_ATTR_H264_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Level) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_H264_S),
        "::",
        stringify!(u32Level)
        )
    );
}

pub type VENC_ATTR_H264_S = rkVENC_ATTR_H264_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_ATTR_H265_S {
    pub _address: u8,
}

#[test]
fn bindgen_test_layout_rkVENC_ATTR_H265_S() {
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ATTR_H265_S>(),
        1usize,
        concat!("Size of: ", stringify!(rkVENC_ATTR_H265_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ATTR_H265_S>(),
        1usize,
        concat!("Alignment of ", stringify!(rkVENC_ATTR_H265_S))
    );
}

pub type VENC_ATTR_H265_S = rkVENC_ATTR_H265_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVENC_ATTR_S {
    pub enType: RK_CODEC_ID_E,
    pub u32MaxPicWidth: RK_U32,
    pub u32MaxPicHeight: RK_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enMirror: MIRROR_E,
    pub u32BufSize: RK_U32,
    pub u32Profile: RK_U32,
    pub bByFrame: RK_BOOL,
    pub u32PicWidth: RK_U32,
    pub u32PicHeight: RK_U32,
    pub u32VirWidth: RK_U32,
    pub u32VirHeight: RK_U32,
    pub u32StreamBufCnt: RK_U32,
    pub __bindgen_anon_1: rkVENC_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVENC_ATTR_S__bindgen_ty_1 {
    pub stAttrH264e: VENC_ATTR_H264_S,
    pub stAttrH265e: VENC_ATTR_H265_S,
    pub stAttrMjpege: VENC_ATTR_MJPEG_S,
    pub stAttrJpege: VENC_ATTR_JPEG_S,
}

#[test]
fn bindgen_test_layout_rkVENC_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ATTR_S__bindgen_ty_1>(),
        28usize,
        concat!("Size of: ", stringify!(rkVENC_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAttrH264e) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stAttrH264e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAttrH265e) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stAttrH265e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAttrMjpege) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stAttrMjpege)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAttrJpege) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stAttrJpege)
        )
    );
}

impl Default for rkVENC_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVENC_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ATTR_S>(),
        80usize,
        concat!("Size of: ", stringify!(rkVENC_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(enType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxPicWidth) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32MaxPicWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxPicHeight) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32MaxPicHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMirror) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(enMirror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufSize) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32BufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Profile) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32Profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bByFrame) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(bByFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicWidth) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32PicWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PicHeight) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32PicHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirWidth) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32VirWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirHeight) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32VirHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32StreamBufCnt) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ATTR_S),
        "::",
        stringify!(u32StreamBufCnt)
        )
    );
}

impl Default for rkVENC_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_ATTR_S = rkVENC_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_GOP_ATTR_S {
    pub enGopMode: VENC_GOP_MODE_E,
    pub s32VirIdrLen: RK_S32,
    pub u32MaxLtrCount: RK_U32,
    pub u32TsvcPreload: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_GOP_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_GOP_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_GOP_ATTR_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkVENC_GOP_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_GOP_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_GOP_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enGopMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_GOP_ATTR_S),
        "::",
        stringify!(enGopMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32VirIdrLen) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_GOP_ATTR_S),
        "::",
        stringify!(s32VirIdrLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxLtrCount) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_GOP_ATTR_S),
        "::",
        stringify!(u32MaxLtrCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32TsvcPreload) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_GOP_ATTR_S),
        "::",
        stringify!(u32TsvcPreload)
        )
    );
}

impl Default for rkVENC_GOP_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_GOP_ATTR_S = rkVENC_GOP_ATTR_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVENC_CHN_ATTR_S {
    pub stVencAttr: VENC_ATTR_S,
    pub stRcAttr: VENC_RC_ATTR_S,
    pub stGopAttr: VENC_GOP_ATTR_S,
}

#[test]
fn bindgen_test_layout_rkVENC_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_CHN_ATTR_S>(),
        136usize,
        concat!("Size of: ", stringify!(rkVENC_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVencAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_ATTR_S),
        "::",
        stringify!(stVencAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRcAttr) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_ATTR_S),
        "::",
        stringify!(stRcAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stGopAttr) as usize - ptr as usize },
        120usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_ATTR_S),
        "::",
        stringify!(stGopAttr)
        )
    );
}

impl Default for rkVENC_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_CHN_ATTR_S = rkVENC_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_CHN_BUF_WRAP_S {
    pub bEnable: RK_BOOL,
    pub u32BufLine: RK_U32,
    pub u32WrapBufferSize: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_CHN_BUF_WRAP_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_CHN_BUF_WRAP_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_CHN_BUF_WRAP_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_CHN_BUF_WRAP_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_CHN_BUF_WRAP_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_CHN_BUF_WRAP_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_BUF_WRAP_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufLine) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_BUF_WRAP_S),
        "::",
        stringify!(u32BufLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32WrapBufferSize) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_BUF_WRAP_S),
        "::",
        stringify!(u32WrapBufferSize)
        )
    );
}

impl Default for rkVENC_CHN_BUF_WRAP_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_CHN_BUF_WRAP_S = rkVENC_CHN_BUF_WRAP_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_CHN_REF_BUF_SHARE_S {
    pub bEnable: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVENC_CHN_REF_BUF_SHARE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_CHN_REF_BUF_SHARE_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_CHN_REF_BUF_SHARE_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_CHN_REF_BUF_SHARE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_CHN_REF_BUF_SHARE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_CHN_REF_BUF_SHARE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_REF_BUF_SHARE_S),
        "::",
        stringify!(bEnable)
        )
    );
}

impl Default for rkVENC_CHN_REF_BUF_SHARE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_CHN_REF_BUF_SHARE_S = rkVENC_CHN_REF_BUF_SHARE_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_COMBO_ATTR_S {
    pub bEnable: RK_BOOL,
    pub s32ChnId: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVENC_COMBO_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_COMBO_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_COMBO_ATTR_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_COMBO_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_COMBO_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_COMBO_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_COMBO_ATTR_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32ChnId) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_COMBO_ATTR_S),
        "::",
        stringify!(s32ChnId)
        )
    );
}

impl Default for rkVENC_COMBO_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_COMBO_ATTR_S = rkVENC_COMBO_ATTR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_RECV_PIC_PARAM_S {
    pub s32RecvPicNum: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVENC_RECV_PIC_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_RECV_PIC_PARAM_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_RECV_PIC_PARAM_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_RECV_PIC_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_RECV_PIC_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_RECV_PIC_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32RecvPicNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RECV_PIC_PARAM_S),
        "::",
        stringify!(s32RecvPicNum)
        )
    );
}

pub type VENC_RECV_PIC_PARAM_S = rkVENC_RECV_PIC_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_CHN_STATUS_S {
    pub u32LeftPics: RK_U32,
    pub u32LeftStreamBytes: RK_U32,
    pub u32LeftStreamFrames: RK_U32,
    pub u32CurPacks: RK_U32,
    pub u32LeftRecvPics: RK_U32,
    pub u32LeftEncPics: RK_U32,
    pub bJpegSnapEnd: RK_BOOL,
    pub stVencStrmInfo: VENC_STREAM_INFO_S,
}

#[test]
fn bindgen_test_layout_rkVENC_CHN_STATUS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_CHN_STATUS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_CHN_STATUS_S>(),
        88usize,
        concat!("Size of: ", stringify!(rkVENC_CHN_STATUS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_CHN_STATUS_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkVENC_CHN_STATUS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftPics) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_STATUS_S),
        "::",
        stringify!(u32LeftPics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftStreamBytes) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_STATUS_S),
        "::",
        stringify!(u32LeftStreamBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftStreamFrames) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_STATUS_S),
        "::",
        stringify!(u32LeftStreamFrames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32CurPacks) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_STATUS_S),
        "::",
        stringify!(u32CurPacks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftRecvPics) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_STATUS_S),
        "::",
        stringify!(u32LeftRecvPics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LeftEncPics) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_STATUS_S),
        "::",
        stringify!(u32LeftEncPics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bJpegSnapEnd) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_STATUS_S),
        "::",
        stringify!(bJpegSnapEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVencStrmInfo) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_STATUS_S),
        "::",
        stringify!(stVencStrmInfo)
        )
    );
}

impl Default for rkVENC_CHN_STATUS_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_CHN_STATUS_S = rkVENC_CHN_STATUS_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_H264_SLICE_SPLIT_S {
    pub bSplitEnable: RK_BOOL,
    pub u32MbLineNum: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_SLICE_SPLIT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_SLICE_SPLIT_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_SLICE_SPLIT_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_H264_SLICE_SPLIT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_SLICE_SPLIT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_SLICE_SPLIT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSplitEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_SLICE_SPLIT_S),
        "::",
        stringify!(bSplitEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MbLineNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_SLICE_SPLIT_S),
        "::",
        stringify!(u32MbLineNum)
        )
    );
}

impl Default for rkVENC_H264_SLICE_SPLIT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_H264_SLICE_SPLIT_S = rkVENC_H264_SLICE_SPLIT_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_INTRA_PRED_S {
    pub constrained_intra_pred_flag: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_INTRA_PRED_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_INTRA_PRED_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_INTRA_PRED_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_H264_INTRA_PRED_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_INTRA_PRED_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_INTRA_PRED_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constrained_intra_pred_flag) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_INTRA_PRED_S),
        "::",
        stringify!(constrained_intra_pred_flag)
        )
    );
}

pub type VENC_H264_INTRA_PRED_S = rkVENC_H264_INTRA_PRED_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_H264_TRANS_S {
    pub u32TransMode: RK_U32,
    pub bScalingListValid: RK_U32,
    pub InterScalingList8X8: [RK_U8; 64usize],
    pub IntraScalingList8X8: [RK_U8; 64usize],
    pub chroma_qp_index_offset: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_TRANS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_TRANS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_TRANS_S>(),
        140usize,
        concat!("Size of: ", stringify!(rkVENC_H264_TRANS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_TRANS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_TRANS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32TransMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_TRANS_S),
        "::",
        stringify!(u32TransMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bScalingListValid) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_TRANS_S),
        "::",
        stringify!(bScalingListValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InterScalingList8X8) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_TRANS_S),
        "::",
        stringify!(InterScalingList8X8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IntraScalingList8X8) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_TRANS_S),
        "::",
        stringify!(IntraScalingList8X8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_qp_index_offset) as usize - ptr as usize },
        136usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_TRANS_S),
        "::",
        stringify!(chroma_qp_index_offset)
        )
    );
}

impl Default for rkVENC_H264_TRANS_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_H264_TRANS_S = rkVENC_H264_TRANS_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_ENTROPY_S {
    pub u32EntropyEncMode: RK_U32,
    pub cabac_init_idc: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_ENTROPY_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_ENTROPY_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_ENTROPY_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_H264_ENTROPY_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_ENTROPY_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_ENTROPY_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32EntropyEncMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_ENTROPY_S),
        "::",
        stringify!(u32EntropyEncMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cabac_init_idc) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_ENTROPY_S),
        "::",
        stringify!(cabac_init_idc)
        )
    );
}

pub type VENC_H264_ENTROPY_S = rkVENC_H264_ENTROPY_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_POC_S {
    pub pic_order_cnt_type: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_POC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_POC_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_POC_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_H264_POC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_POC_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_POC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_order_cnt_type) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_POC_S),
        "::",
        stringify!(pic_order_cnt_type)
        )
    );
}

pub type VENC_H264_POC_S = rkVENC_H264_POC_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_DBLK_S {
    pub disable_deblocking_filter_idc: RK_U32,
    pub slice_alpha_c0_offset_div2: RK_S32,
    pub slice_beta_offset_div2: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_DBLK_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_DBLK_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_DBLK_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_H264_DBLK_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_DBLK_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_DBLK_S))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).disable_deblocking_filter_idc) as usize - ptr as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_DBLK_S),
        "::",
        stringify!(disable_deblocking_filter_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_alpha_c0_offset_div2) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_DBLK_S),
        "::",
        stringify!(slice_alpha_c0_offset_div2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_beta_offset_div2) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_DBLK_S),
        "::",
        stringify!(slice_beta_offset_div2)
        )
    );
}

pub type VENC_H264_DBLK_S = rkVENC_H264_DBLK_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_VUI_TIME_INFO_S {
    pub timing_info_present_flag: RK_U8,
    pub fixed_frame_rate_flag: RK_U8,
    pub num_units_in_tick: RK_U32,
    pub time_scale: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_VUI_TIME_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_VUI_TIME_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_VUI_TIME_INFO_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_H264_VUI_TIME_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_VUI_TIME_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_VUI_TIME_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timing_info_present_flag) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VUI_TIME_INFO_S),
        "::",
        stringify!(timing_info_present_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixed_frame_rate_flag) as usize - ptr as usize },
        1usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VUI_TIME_INFO_S),
        "::",
        stringify!(fixed_frame_rate_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_units_in_tick) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VUI_TIME_INFO_S),
        "::",
        stringify!(num_units_in_tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_scale) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VUI_TIME_INFO_S),
        "::",
        stringify!(time_scale)
        )
    );
}

pub type VENC_VUI_H264_TIME_INFO_S = rkVENC_H264_VUI_TIME_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_VUI_ASPECT_RATIO_S {
    pub aspect_ratio_info_present_flag: RK_U8,
    pub aspect_ratio_idc: RK_U8,
    pub overscan_info_present_flag: RK_U8,
    pub overscan_appropriate_flag: RK_U8,
    pub sar_width: RK_U16,
    pub sar_height: RK_U16,
}

#[test]
fn bindgen_test_layout_rkVENC_VUI_ASPECT_RATIO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_VUI_ASPECT_RATIO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_VUI_ASPECT_RATIO_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_VUI_ASPECT_RATIO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_VUI_ASPECT_RATIO_S>(),
        2usize,
        concat!("Alignment of ", stringify!(rkVENC_VUI_ASPECT_RATIO_S))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).aspect_ratio_info_present_flag) as usize - ptr as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_ASPECT_RATIO_S),
        "::",
        stringify!(aspect_ratio_info_present_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspect_ratio_idc) as usize - ptr as usize },
        1usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_ASPECT_RATIO_S),
        "::",
        stringify!(aspect_ratio_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overscan_info_present_flag) as usize - ptr as usize },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_ASPECT_RATIO_S),
        "::",
        stringify!(overscan_info_present_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overscan_appropriate_flag) as usize - ptr as usize },
        3usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_ASPECT_RATIO_S),
        "::",
        stringify!(overscan_appropriate_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sar_width) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_ASPECT_RATIO_S),
        "::",
        stringify!(sar_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sar_height) as usize - ptr as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_ASPECT_RATIO_S),
        "::",
        stringify!(sar_height)
        )
    );
}

pub type VENC_VUI_ASPECT_RATIO_S = rkVENC_VUI_ASPECT_RATIO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_VUI_VIDEO_SIGNAL_S {
    pub video_signal_type_present_flag: RK_U8,
    pub video_format: RK_U8,
    pub video_full_range_flag: RK_U8,
    pub colour_description_present_flag: RK_U8,
    pub colour_primaries: RK_U8,
    pub transfer_characteristics: RK_U8,
    pub matrix_coefficients: RK_U8,
}

#[test]
fn bindgen_test_layout_rkVENC_VUI_VIDEO_SIGNAL_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_VUI_VIDEO_SIGNAL_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_VUI_VIDEO_SIGNAL_S>(),
        7usize,
        concat!("Size of: ", stringify!(rkVENC_VUI_VIDEO_SIGNAL_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_VUI_VIDEO_SIGNAL_S>(),
        1usize,
        concat!("Alignment of ", stringify!(rkVENC_VUI_VIDEO_SIGNAL_S))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).video_signal_type_present_flag) as usize - ptr as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_VIDEO_SIGNAL_S),
        "::",
        stringify!(video_signal_type_present_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).video_format) as usize - ptr as usize },
        1usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_VIDEO_SIGNAL_S),
        "::",
        stringify!(video_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).video_full_range_flag) as usize - ptr as usize },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_VIDEO_SIGNAL_S),
        "::",
        stringify!(video_full_range_flag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).colour_description_present_flag) as usize - ptr as usize
        },
        3usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_VIDEO_SIGNAL_S),
        "::",
        stringify!(colour_description_present_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colour_primaries) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_VIDEO_SIGNAL_S),
        "::",
        stringify!(colour_primaries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_characteristics) as usize - ptr as usize },
        5usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_VIDEO_SIGNAL_S),
        "::",
        stringify!(transfer_characteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matrix_coefficients) as usize - ptr as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_VIDEO_SIGNAL_S),
        "::",
        stringify!(matrix_coefficients)
        )
    );
}

pub type VENC_VUI_VIDEO_SIGNAL_S = rkVENC_VUI_VIDEO_SIGNAL_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_VUI_BITSTREAM_RESTRIC_S {
    pub bitstream_restriction_flag: RK_U8,
}

#[test]
fn bindgen_test_layout_rkVENC_VUI_BITSTREAM_RESTRIC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_VUI_BITSTREAM_RESTRIC_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_VUI_BITSTREAM_RESTRIC_S>(),
        1usize,
        concat!("Size of: ", stringify!(rkVENC_VUI_BITSTREAM_RESTRIC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_VUI_BITSTREAM_RESTRIC_S>(),
        1usize,
        concat!("Alignment of ", stringify!(rkVENC_VUI_BITSTREAM_RESTRIC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitstream_restriction_flag) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_BITSTREAM_RESTRIC_S),
        "::",
        stringify!(bitstream_restriction_flag)
        )
    );
}

pub type VENC_VUI_BITSTREAM_RESTRIC_S = rkVENC_VUI_BITSTREAM_RESTRIC_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H264_VUI_S {
    pub stVuiAspectRatio: VENC_VUI_ASPECT_RATIO_S,
    pub stVuiTimeInfo: VENC_VUI_H264_TIME_INFO_S,
    pub stVuiVideoSignal: VENC_VUI_VIDEO_SIGNAL_S,
    pub stVuiBitstreamRestric: VENC_VUI_BITSTREAM_RESTRIC_S,
}

#[test]
fn bindgen_test_layout_rkVENC_H264_VUI_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H264_VUI_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H264_VUI_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkVENC_H264_VUI_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H264_VUI_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H264_VUI_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVuiAspectRatio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VUI_S),
        "::",
        stringify!(stVuiAspectRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVuiTimeInfo) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VUI_S),
        "::",
        stringify!(stVuiTimeInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVuiVideoSignal) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VUI_S),
        "::",
        stringify!(stVuiVideoSignal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVuiBitstreamRestric) as usize - ptr as usize },
        27usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H264_VUI_S),
        "::",
        stringify!(stVuiBitstreamRestric)
        )
    );
}

pub type VENC_H264_VUI_S = rkVENC_H264_VUI_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_VUI_H265_TIME_INFO_S {
    pub timing_info_present_flag: RK_U32,
    pub num_units_in_tick: RK_U32,
    pub time_scale: RK_U32,
    pub num_ticks_poc_diff_one_minus1: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_VUI_H265_TIME_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_VUI_H265_TIME_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_VUI_H265_TIME_INFO_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkVENC_VUI_H265_TIME_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_VUI_H265_TIME_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_VUI_H265_TIME_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timing_info_present_flag) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_H265_TIME_INFO_S),
        "::",
        stringify!(timing_info_present_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_units_in_tick) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_H265_TIME_INFO_S),
        "::",
        stringify!(num_units_in_tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_scale) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_H265_TIME_INFO_S),
        "::",
        stringify!(time_scale)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ticks_poc_diff_one_minus1) as usize - ptr as usize
        },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_VUI_H265_TIME_INFO_S),
        "::",
        stringify!(num_ticks_poc_diff_one_minus1)
        )
    );
}

pub type VENC_VUI_H265_TIME_INFO_S = rkVENC_VUI_H265_TIME_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H265_VUI_S {
    pub stVuiAspectRatio: VENC_VUI_ASPECT_RATIO_S,
    pub stVuiTimeInfo: VENC_VUI_H265_TIME_INFO_S,
    pub stVuiVideoSignal: VENC_VUI_VIDEO_SIGNAL_S,
    pub stVuiBitstreamRestric: VENC_VUI_BITSTREAM_RESTRIC_S,
}

#[test]
fn bindgen_test_layout_rkVENC_H265_VUI_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H265_VUI_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H265_VUI_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVENC_H265_VUI_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H265_VUI_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H265_VUI_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVuiAspectRatio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_VUI_S),
        "::",
        stringify!(stVuiAspectRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVuiTimeInfo) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_VUI_S),
        "::",
        stringify!(stVuiTimeInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVuiVideoSignal) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_VUI_S),
        "::",
        stringify!(stVuiVideoSignal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVuiBitstreamRestric) as usize - ptr as usize },
        31usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_VUI_S),
        "::",
        stringify!(stVuiBitstreamRestric)
        )
    );
}

pub type VENC_H265_VUI_S = rkVENC_H265_VUI_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_JPEG_PARAM_S {
    pub u32Qfactor: RK_U32,
    pub u8YQt: [RK_U8; 64usize],
    pub u8CbQt: [RK_U8; 64usize],
    pub u8CrQt: [RK_U8; 64usize],
    pub u32MCUPerECS: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_JPEG_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_JPEG_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_JPEG_PARAM_S>(),
        200usize,
        concat!("Size of: ", stringify!(rkVENC_JPEG_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_JPEG_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_JPEG_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Qfactor) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_JPEG_PARAM_S),
        "::",
        stringify!(u32Qfactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8YQt) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_JPEG_PARAM_S),
        "::",
        stringify!(u8YQt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8CbQt) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_JPEG_PARAM_S),
        "::",
        stringify!(u8CbQt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8CrQt) as usize - ptr as usize },
        132usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_JPEG_PARAM_S),
        "::",
        stringify!(u8CrQt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MCUPerECS) as usize - ptr as usize },
        196usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_JPEG_PARAM_S),
        "::",
        stringify!(u32MCUPerECS)
        )
    );
}

impl Default for rkVENC_JPEG_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_JPEG_PARAM_S = rkVENC_JPEG_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_MJPEG_PARAM_S {
    pub u8YQt: [RK_U8; 64usize],
    pub u8CbQt: [RK_U8; 64usize],
    pub u8CrQt: [RK_U8; 64usize],
    pub u32MCUPerECS: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_MJPEG_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MJPEG_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MJPEG_PARAM_S>(),
        196usize,
        concat!("Size of: ", stringify!(rkVENC_MJPEG_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MJPEG_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MJPEG_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8YQt) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_PARAM_S),
        "::",
        stringify!(u8YQt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8CbQt) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_PARAM_S),
        "::",
        stringify!(u8CbQt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8CrQt) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_PARAM_S),
        "::",
        stringify!(u8CrQt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MCUPerECS) as usize - ptr as usize },
        192usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MJPEG_PARAM_S),
        "::",
        stringify!(u32MCUPerECS)
        )
    );
}

impl Default for rkVENC_MJPEG_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_MJPEG_PARAM_S = rkVENC_MJPEG_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_PRORES_PARAM_S {
    pub u8LumaQt: [RK_U8; 64usize],
    pub u8ChromaQt: [RK_U8; 64usize],
    pub encoder_identifier: [RK_CHAR; 4usize],
}

#[test]
fn bindgen_test_layout_rkVENC_PRORES_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_PRORES_PARAM_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_PRORES_PARAM_S>(),
        132usize,
        concat!("Size of: ", stringify!(rkVENC_PRORES_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_PRORES_PARAM_S>(),
        1usize,
        concat!("Alignment of ", stringify!(rkVENC_PRORES_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8LumaQt) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PRORES_PARAM_S),
        "::",
        stringify!(u8LumaQt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8ChromaQt) as usize - ptr as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PRORES_PARAM_S),
        "::",
        stringify!(u8ChromaQt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).encoder_identifier) as usize - ptr as usize },
        128usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_PRORES_PARAM_S),
        "::",
        stringify!(encoder_identifier)
        )
    );
}

impl Default for rkVENC_PRORES_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_PRORES_PARAM_S = rkVENC_PRORES_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_ROI_ATTR_S {
    pub u32Index: RK_U32,
    pub bEnable: RK_BOOL,
    pub bAbsQp: RK_BOOL,
    pub s32Qp: RK_S32,
    pub bIntra: RK_BOOL,
    pub stRect: RECT_S,
}

#[test]
fn bindgen_test_layout_rkVENC_ROI_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_ROI_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ROI_ATTR_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkVENC_ROI_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ROI_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_ROI_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Index) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_S),
        "::",
        stringify!(u32Index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAbsQp) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_S),
        "::",
        stringify!(bAbsQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Qp) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_S),
        "::",
        stringify!(s32Qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIntra) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_S),
        "::",
        stringify!(bIntra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_S),
        "::",
        stringify!(stRect)
        )
    );
}

impl Default for rkVENC_ROI_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_ROI_ATTR_S = rkVENC_ROI_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_ROI_ATTR_EX_S {
    pub u32Index: RK_U32,
    pub bEnable: [RK_BOOL; 3usize],
    pub bAbsQp: [RK_BOOL; 3usize],
    pub s32Qp: [RK_S32; 3usize],
    pub stRect: [RECT_S; 3usize],
}

#[test]
fn bindgen_test_layout_rkVENC_ROI_ATTR_EX_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_ROI_ATTR_EX_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ROI_ATTR_EX_S>(),
        88usize,
        concat!("Size of: ", stringify!(rkVENC_ROI_ATTR_EX_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ROI_ATTR_EX_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_ROI_ATTR_EX_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Index) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_EX_S),
        "::",
        stringify!(u32Index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_EX_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bAbsQp) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_EX_S),
        "::",
        stringify!(bAbsQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Qp) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_EX_S),
        "::",
        stringify!(s32Qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROI_ATTR_EX_S),
        "::",
        stringify!(stRect)
        )
    );
}

impl Default for rkVENC_ROI_ATTR_EX_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_ROI_ATTR_EX_S = rkVENC_ROI_ATTR_EX_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_ROIBG_FRAME_RATE_S {
    pub s32SrcFrmRate: RK_S32,
    pub s32DstFrmRate: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVENC_ROIBG_FRAME_RATE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_ROIBG_FRAME_RATE_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_ROIBG_FRAME_RATE_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_ROIBG_FRAME_RATE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_ROIBG_FRAME_RATE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_ROIBG_FRAME_RATE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SrcFrmRate) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROIBG_FRAME_RATE_S),
        "::",
        stringify!(s32SrcFrmRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DstFrmRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_ROIBG_FRAME_RATE_S),
        "::",
        stringify!(s32DstFrmRate)
        )
    );
}

pub type VENC_ROIBG_FRAME_RATE_S = rkVENC_ROIBG_FRAME_RATE_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_REF_PARAM_S {
    pub u32Base: RK_U32,
    pub u32Enhance: RK_U32,
    pub bEnablePred: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVENC_REF_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_REF_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_REF_PARAM_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_REF_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_REF_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_REF_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Base) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_REF_PARAM_S),
        "::",
        stringify!(u32Base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Enhance) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_REF_PARAM_S),
        "::",
        stringify!(u32Enhance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnablePred) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_REF_PARAM_S),
        "::",
        stringify!(bEnablePred)
        )
    );
}

impl Default for rkVENC_REF_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_REF_PARAM_S = rkVENC_REF_PARAM_S;

pub const rkVENC_JPEG_ENCODE_MODE_E_JPEG_ENCODE_ALL: rkVENC_JPEG_ENCODE_MODE_E = 0;
pub const rkVENC_JPEG_ENCODE_MODE_E_JPEG_ENCODE_SNAP: rkVENC_JPEG_ENCODE_MODE_E = 1;
pub const rkVENC_JPEG_ENCODE_MODE_E_JPEG_ENCODE_BUTT: rkVENC_JPEG_ENCODE_MODE_E = 2;

pub type rkVENC_JPEG_ENCODE_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_JPEG_ENCODE_MODE_E as VENC_JPEG_ENCODE_MODE_E;

#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_STREAM_BUF_INFO_S {
    pub u64PhyAddr: [RK_U64; 1usize],
    pub __bindgen_padding_0: [u32; 2usize],
    pub pUserAddr: [*mut ::std::os::raw::c_void; 1usize],
    pub __bindgen_padding_1: u64,
    pub u64BufSize: [RK_U64; 1usize],
}

#[test]
fn bindgen_test_layout_rkVENC_STREAM_BUF_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_STREAM_BUF_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_STREAM_BUF_INFO_S>(),
        48usize,
        concat!("Size of: ", stringify!(rkVENC_STREAM_BUF_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_STREAM_BUF_INFO_S>(),
        16usize,
        concat!("Alignment of ", stringify!(rkVENC_STREAM_BUF_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64PhyAddr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_BUF_INFO_S),
        "::",
        stringify!(u64PhyAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserAddr) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_BUF_INFO_S),
        "::",
        stringify!(pUserAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64BufSize) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_STREAM_BUF_INFO_S),
        "::",
        stringify!(u64BufSize)
        )
    );
}

impl Default for rkVENC_STREAM_BUF_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_STREAM_BUF_INFO_S = rkVENC_STREAM_BUF_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_H265_SLICE_SPLIT_S {
    pub bSplitEnable: RK_BOOL,
    pub u32LcuLineNum: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H265_SLICE_SPLIT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H265_SLICE_SPLIT_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H265_SLICE_SPLIT_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_H265_SLICE_SPLIT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H265_SLICE_SPLIT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H265_SLICE_SPLIT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSplitEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_SLICE_SPLIT_S),
        "::",
        stringify!(bSplitEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LcuLineNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_SLICE_SPLIT_S),
        "::",
        stringify!(u32LcuLineNum)
        )
    );
}

impl Default for rkVENC_H265_SLICE_SPLIT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_H265_SLICE_SPLIT_S = rkVENC_H265_SLICE_SPLIT_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H265_PU_S {
    pub constrained_intra_pred_flag: RK_U32,
    pub strong_intra_smoothing_enabled_flag: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H265_PU_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H265_PU_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H265_PU_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_H265_PU_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H265_PU_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H265_PU_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constrained_intra_pred_flag) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_PU_S),
        "::",
        stringify!(constrained_intra_pred_flag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).strong_intra_smoothing_enabled_flag) as usize - ptr as usize
        },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_PU_S),
        "::",
        stringify!(strong_intra_smoothing_enabled_flag)
        )
    );
}

pub type VENC_H265_PU_S = rkVENC_H265_PU_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_H265_TRANS_S {
    pub cb_qp_offset: RK_S32,
    pub cr_qp_offset: RK_S32,
    pub bScalingListEnabled: RK_U32,
    pub bScalingListTu4Valid: RK_BOOL,
    pub InterScalingList4X4: [[RK_U8; 16usize]; 2usize],
    pub IntraScalingList4X4: [[RK_U8; 16usize]; 2usize],
    pub bScalingListTu8Valid: RK_BOOL,
    pub InterScalingList8X8: [[RK_U8; 64usize]; 2usize],
    pub IntraScalingList8X8: [[RK_U8; 64usize]; 2usize],
    pub bScalingListTu16Valid: RK_BOOL,
    pub InterScalingList16X16: [[RK_U8; 64usize]; 2usize],
    pub IntraScalingList16X16: [[RK_U8; 64usize]; 2usize],
    pub bScalingListTu32Valid: RK_BOOL,
    pub InterScalingList32X32: [RK_U8; 64usize],
    pub IntraScalingList32X32: [RK_U8; 64usize],
}

#[test]
fn bindgen_test_layout_rkVENC_H265_TRANS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H265_TRANS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H265_TRANS_S>(),
        732usize,
        concat!("Size of: ", stringify!(rkVENC_H265_TRANS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H265_TRANS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H265_TRANS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_qp_offset) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(cb_qp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr_qp_offset) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(cr_qp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bScalingListEnabled) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(bScalingListEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bScalingListTu4Valid) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(bScalingListTu4Valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InterScalingList4X4) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(InterScalingList4X4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IntraScalingList4X4) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(IntraScalingList4X4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bScalingListTu8Valid) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(bScalingListTu8Valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InterScalingList8X8) as usize - ptr as usize },
        84usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(InterScalingList8X8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IntraScalingList8X8) as usize - ptr as usize },
        212usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(IntraScalingList8X8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bScalingListTu16Valid) as usize - ptr as usize },
        340usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(bScalingListTu16Valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InterScalingList16X16) as usize - ptr as usize },
        344usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(InterScalingList16X16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IntraScalingList16X16) as usize - ptr as usize },
        472usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(IntraScalingList16X16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bScalingListTu32Valid) as usize - ptr as usize },
        600usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(bScalingListTu32Valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InterScalingList32X32) as usize - ptr as usize },
        604usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(InterScalingList32X32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IntraScalingList32X32) as usize - ptr as usize },
        668usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_TRANS_S),
        "::",
        stringify!(IntraScalingList32X32)
        )
    );
}

impl Default for rkVENC_H265_TRANS_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_H265_TRANS_S = rkVENC_H265_TRANS_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H265_ENTROPY_S {
    pub cabac_init_flag: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H265_ENTROPY_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H265_ENTROPY_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H265_ENTROPY_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_H265_ENTROPY_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H265_ENTROPY_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H265_ENTROPY_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cabac_init_flag) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_ENTROPY_S),
        "::",
        stringify!(cabac_init_flag)
        )
    );
}

pub type VENC_H265_ENTROPY_S = rkVENC_H265_ENTROPY_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H265_DBLK_S {
    pub slice_deblocking_filter_disabled_flag: RK_U32,
    pub slice_beta_offset_div2: RK_S32,
    pub slice_tc_offset_div2: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVENC_H265_DBLK_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H265_DBLK_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H265_DBLK_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_H265_DBLK_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H265_DBLK_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H265_DBLK_S))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).slice_deblocking_filter_disabled_flag) as usize
                - ptr as usize
        },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_DBLK_S),
        "::",
        stringify!(slice_deblocking_filter_disabled_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_beta_offset_div2) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_DBLK_S),
        "::",
        stringify!(slice_beta_offset_div2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_tc_offset_div2) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_DBLK_S),
        "::",
        stringify!(slice_tc_offset_div2)
        )
    );
}

pub type VENC_H265_DBLK_S = rkVENC_H265_DBLK_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_H265_SAO_S {
    pub slice_sao_luma_flag: RK_U32,
    pub slice_sao_chroma_flag: RK_U32,
    pub slice_sao_bit_ratio: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_H265_SAO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_H265_SAO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_H265_SAO_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_H265_SAO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_H265_SAO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_H265_SAO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_sao_luma_flag) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_SAO_S),
        "::",
        stringify!(slice_sao_luma_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_sao_chroma_flag) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_SAO_S),
        "::",
        stringify!(slice_sao_chroma_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slice_sao_bit_ratio) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_H265_SAO_S),
        "::",
        stringify!(slice_sao_bit_ratio)
        )
    );
}

pub type VENC_H265_SAO_S = rkVENC_H265_SAO_S;

pub const rkVENC_INTRA_REFRESH_MODE_E_INTRA_REFRESH_ROW: rkVENC_INTRA_REFRESH_MODE_E = 0;
pub const rkVENC_INTRA_REFRESH_MODE_E_INTRA_REFRESH_COLUMN: rkVENC_INTRA_REFRESH_MODE_E = 1;
pub const rkVENC_INTRA_REFRESH_MODE_E_INTRA_REFRESH_BUTT: rkVENC_INTRA_REFRESH_MODE_E = 2;

pub type rkVENC_INTRA_REFRESH_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_INTRA_REFRESH_MODE_E as VENC_INTRA_REFRESH_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_INTRA_REFRESH_S {
    pub bRefreshEnable: RK_BOOL,
    pub enIntraRefreshMode: VENC_INTRA_REFRESH_MODE_E,
    pub u32RefreshNum: RK_U32,
    pub u32ReqIQp: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_INTRA_REFRESH_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_INTRA_REFRESH_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_INTRA_REFRESH_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkVENC_INTRA_REFRESH_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_INTRA_REFRESH_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_INTRA_REFRESH_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRefreshEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_INTRA_REFRESH_S),
        "::",
        stringify!(bRefreshEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enIntraRefreshMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_INTRA_REFRESH_S),
        "::",
        stringify!(enIntraRefreshMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RefreshNum) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_INTRA_REFRESH_S),
        "::",
        stringify!(u32RefreshNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ReqIQp) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_INTRA_REFRESH_S),
        "::",
        stringify!(u32ReqIQp)
        )
    );
}

impl Default for rkVENC_INTRA_REFRESH_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_INTRA_REFRESH_S = rkVENC_INTRA_REFRESH_S;

pub const rkVENC_MODTYPE_E_MODTYPE_VENC: rkVENC_MODTYPE_E = 1;
pub const rkVENC_MODTYPE_E_MODTYPE_H264E: rkVENC_MODTYPE_E = 2;
pub const rkVENC_MODTYPE_E_MODTYPE_H265E: rkVENC_MODTYPE_E = 3;
pub const rkVENC_MODTYPE_E_MODTYPE_JPEGE: rkVENC_MODTYPE_E = 4;
pub const rkVENC_MODTYPE_E_MODTYPE_RC: rkVENC_MODTYPE_E = 5;
pub const rkVENC_MODTYPE_E_MODTYPE_BUTT: rkVENC_MODTYPE_E = 6;

pub type rkVENC_MODTYPE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_MODTYPE_E as VENC_MODTYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_MOD_H264E_S {
    pub u32OneStreamBuffer: RK_U32,
    pub u32H264eMiniBufMode: RK_U32,
    pub u32H264ePowerSaveEn: RK_U32,
    pub enH264eMBSource: MB_SOURCE_E,
    pub bQpHstgrmEn: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVENC_MOD_H264E_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MOD_H264E_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MOD_H264E_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVENC_MOD_H264E_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MOD_H264E_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MOD_H264E_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OneStreamBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H264E_S),
        "::",
        stringify!(u32OneStreamBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32H264eMiniBufMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H264E_S),
        "::",
        stringify!(u32H264eMiniBufMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32H264ePowerSaveEn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H264E_S),
        "::",
        stringify!(u32H264ePowerSaveEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enH264eMBSource) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H264E_S),
        "::",
        stringify!(enH264eMBSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bQpHstgrmEn) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H264E_S),
        "::",
        stringify!(bQpHstgrmEn)
        )
    );
}

impl Default for rkVENC_MOD_H264E_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_MOD_H264E_S = rkVENC_MOD_H264E_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_MOD_H265E_S {
    pub u32OneStreamBuffer: RK_U32,
    pub u32H265eMiniBufMode: RK_U32,
    pub u32H265ePowerSaveEn: RK_U32,
    pub enH265eMBSource: MB_SOURCE_E,
    pub bQpHstgrmEn: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVENC_MOD_H265E_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MOD_H265E_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MOD_H265E_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVENC_MOD_H265E_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MOD_H265E_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MOD_H265E_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OneStreamBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H265E_S),
        "::",
        stringify!(u32OneStreamBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32H265eMiniBufMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H265E_S),
        "::",
        stringify!(u32H265eMiniBufMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32H265ePowerSaveEn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H265E_S),
        "::",
        stringify!(u32H265ePowerSaveEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enH265eMBSource) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H265E_S),
        "::",
        stringify!(enH265eMBSource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bQpHstgrmEn) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_H265E_S),
        "::",
        stringify!(bQpHstgrmEn)
        )
    );
}

impl Default for rkVENC_MOD_H265E_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_MOD_H265E_S = rkVENC_MOD_H265E_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_MOD_JPEGE_S {
    pub u32OneStreamBuffer: RK_U32,
    pub u32JpegeMiniBufMode: RK_U32,
    pub u32JpegClearStreamBuf: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_MOD_JPEGE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MOD_JPEGE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MOD_JPEGE_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_MOD_JPEGE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MOD_JPEGE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MOD_JPEGE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OneStreamBuffer) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_JPEGE_S),
        "::",
        stringify!(u32OneStreamBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32JpegeMiniBufMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_JPEGE_S),
        "::",
        stringify!(u32JpegeMiniBufMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32JpegClearStreamBuf) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_JPEGE_S),
        "::",
        stringify!(u32JpegClearStreamBuf)
        )
    );
}

pub type VENC_MOD_JPEGE_S = rkVENC_MOD_JPEGE_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_MOD_RC_S {
    pub u32ClrStatAfterSetBr: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_MOD_RC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MOD_RC_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MOD_RC_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_MOD_RC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MOD_RC_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MOD_RC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ClrStatAfterSetBr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_RC_S),
        "::",
        stringify!(u32ClrStatAfterSetBr)
        )
    );
}

pub type VENC_MOD_RC_S = rkVENC_MOD_RC_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_MOD_VENC_S {
    pub u32VencBufferCache: RK_U32,
    pub u32FrameBufRecycle: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_MOD_VENC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MOD_VENC_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MOD_VENC_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVENC_MOD_VENC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MOD_VENC_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MOD_VENC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VencBufferCache) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_VENC_S),
        "::",
        stringify!(u32VencBufferCache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameBufRecycle) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MOD_VENC_S),
        "::",
        stringify!(u32FrameBufRecycle)
        )
    );
}

pub type VENC_MOD_VENC_S = rkVENC_MOD_VENC_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVENC_MODPARAM_S {
    pub enVencModType: VENC_MODTYPE_E,
    pub __bindgen_anon_1: rkVENC_MODPARAM_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVENC_MODPARAM_S__bindgen_ty_1 {
    pub stVencModParam: VENC_MOD_VENC_S,
    pub stH264eModParam: VENC_MOD_H264E_S,
    pub stH265eModParam: VENC_MOD_H265E_S,
    pub stJpegeModParam: VENC_MOD_JPEGE_S,
    pub stRcModParam: VENC_MOD_RC_S,
}

#[test]
fn bindgen_test_layout_rkVENC_MODPARAM_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MODPARAM_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MODPARAM_S__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(rkVENC_MODPARAM_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MODPARAM_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MODPARAM_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stVencModParam) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MODPARAM_S__bindgen_ty_1),
        "::",
        stringify!(stVencModParam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH264eModParam) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MODPARAM_S__bindgen_ty_1),
        "::",
        stringify!(stH264eModParam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stH265eModParam) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MODPARAM_S__bindgen_ty_1),
        "::",
        stringify!(stH265eModParam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stJpegeModParam) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MODPARAM_S__bindgen_ty_1),
        "::",
        stringify!(stJpegeModParam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRcModParam) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MODPARAM_S__bindgen_ty_1),
        "::",
        stringify!(stRcModParam)
        )
    );
}

impl Default for rkVENC_MODPARAM_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVENC_MODPARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_MODPARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_MODPARAM_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVENC_MODPARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_MODPARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_MODPARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVencModType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_MODPARAM_S),
        "::",
        stringify!(enVencModType)
        )
    );
}

impl Default for rkVENC_MODPARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_PARAM_MOD_S = rkVENC_MODPARAM_S;

pub const rkVENC_FRAME_TYPE_E_VENC_FRAME_TYPE_NONE: rkVENC_FRAME_TYPE_E = 1;
pub const rkVENC_FRAME_TYPE_E_VENC_FRAME_TYPE_IDR: rkVENC_FRAME_TYPE_E = 2;
pub const rkVENC_FRAME_TYPE_E_VENC_FRAME_TYPE_BUTT: rkVENC_FRAME_TYPE_E = 3;

pub type rkVENC_FRAME_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_FRAME_TYPE_E as VENC_FRAME_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkUSER_RC_INFO_S {
    pub bQpMapValid: RK_BOOL,
    pub bSkipWeightValid: RK_BOOL,
    pub u32BlkStartQp: RK_U32,
    pub pMbBlkQpMap: MB_BLK,
    pub pMbBlkSkipWeight: MB_BLK,
    pub enFrameType: VENC_FRAME_TYPE_E,
}

#[test]
fn bindgen_test_layout_rkUSER_RC_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkUSER_RC_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkUSER_RC_INFO_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkUSER_RC_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkUSER_RC_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkUSER_RC_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bQpMapValid) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkUSER_RC_INFO_S),
        "::",
        stringify!(bQpMapValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSkipWeightValid) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkUSER_RC_INFO_S),
        "::",
        stringify!(bSkipWeightValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BlkStartQp) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkUSER_RC_INFO_S),
        "::",
        stringify!(u32BlkStartQp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlkQpMap) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkUSER_RC_INFO_S),
        "::",
        stringify!(pMbBlkQpMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlkSkipWeight) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkUSER_RC_INFO_S),
        "::",
        stringify!(pMbBlkSkipWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enFrameType) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkUSER_RC_INFO_S),
        "::",
        stringify!(enFrameType)
        )
    );
}

impl Default for rkUSER_RC_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type USER_RC_INFO_S = rkUSER_RC_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkUSER_FRAME_INFO_S {
    pub stUserFrame: VIDEO_FRAME_INFO_S,
    pub stUserRcInfo: USER_RC_INFO_S,
}

#[test]
fn bindgen_test_layout_rkUSER_FRAME_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkUSER_FRAME_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkUSER_FRAME_INFO_S>(),
        104usize,
        concat!("Size of: ", stringify!(rkUSER_FRAME_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkUSER_FRAME_INFO_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkUSER_FRAME_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stUserFrame) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkUSER_FRAME_INFO_S),
        "::",
        stringify!(stUserFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stUserRcInfo) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(rkUSER_FRAME_INFO_S),
        "::",
        stringify!(stUserRcInfo)
        )
    );
}

impl Default for rkUSER_FRAME_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type USER_FRAME_INFO_S = rkUSER_FRAME_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_SSE_CFG_S {
    pub u32Index: RK_U32,
    pub bEnable: RK_BOOL,
    pub stRect: RECT_S,
}

#[test]
fn bindgen_test_layout_rkVENC_SSE_CFG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_SSE_CFG_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_SSE_CFG_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVENC_SSE_CFG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_SSE_CFG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_SSE_CFG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Index) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SSE_CFG_S),
        "::",
        stringify!(u32Index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SSE_CFG_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SSE_CFG_S),
        "::",
        stringify!(stRect)
        )
    );
}

impl Default for rkVENC_SSE_CFG_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_SSE_CFG_S = rkVENC_SSE_CFG_S;

pub const rkVENC_CROP_TYPE_E_VENC_CROP_NONE: rkVENC_CROP_TYPE_E = 0;
pub const rkVENC_CROP_TYPE_E_VENC_CROP_ONLY: rkVENC_CROP_TYPE_E = 1;
pub const rkVENC_CROP_TYPE_E_VENC_CROP_SCALE: rkVENC_CROP_TYPE_E = 2;
pub const rkVENC_CROP_TYPE_E_VENC_CROP_BUTT: rkVENC_CROP_TYPE_E = 3;

pub type rkVENC_CROP_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_CROP_TYPE_E as VENC_CROP_TYPE_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_SCALE_RECT_S {
    pub stSrc: RECT_S,
    pub stDst: RECT_S,
}

#[test]
fn bindgen_test_layout_rkVENC_SCALE_RECT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_SCALE_RECT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_SCALE_RECT_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVENC_SCALE_RECT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_SCALE_RECT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_SCALE_RECT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSrc) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SCALE_RECT_S),
        "::",
        stringify!(stSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stDst) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SCALE_RECT_S),
        "::",
        stringify!(stDst)
        )
    );
}

pub type VENC_SCALE_RECT_S = rkVENC_SCALE_RECT_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_CROP_INFO_S {
    pub enCropType: VENC_CROP_TYPE_E,
    pub stCropRect: RECT_S,
    pub stScaleRect: VENC_SCALE_RECT_S,
}

#[test]
fn bindgen_test_layout_rkVENC_CROP_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_CROP_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_CROP_INFO_S>(),
        52usize,
        concat!("Size of: ", stringify!(rkVENC_CROP_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_CROP_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_CROP_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCropType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CROP_INFO_S),
        "::",
        stringify!(enCropType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCropRect) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CROP_INFO_S),
        "::",
        stringify!(stCropRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stScaleRect) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CROP_INFO_S),
        "::",
        stringify!(stScaleRect)
        )
    );
}

impl Default for rkVENC_CROP_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_CROP_INFO_S = rkVENC_CROP_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_FRAME_RATE_S {
    pub bEnable: RK_BOOL,
    pub s32SrcFrmRateNum: RK_S32,
    pub s32SrcFrmRateDen: RK_S32,
    pub s32DstFrmRateNum: RK_S32,
    pub s32DstFrmRateDen: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVENC_FRAME_RATE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_FRAME_RATE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_FRAME_RATE_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVENC_FRAME_RATE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_FRAME_RATE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_FRAME_RATE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAME_RATE_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SrcFrmRateNum) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAME_RATE_S),
        "::",
        stringify!(s32SrcFrmRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32SrcFrmRateDen) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAME_RATE_S),
        "::",
        stringify!(s32SrcFrmRateDen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DstFrmRateNum) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAME_RATE_S),
        "::",
        stringify!(s32DstFrmRateNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32DstFrmRateDen) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAME_RATE_S),
        "::",
        stringify!(s32DstFrmRateDen)
        )
    );
}

impl Default for rkVENC_FRAME_RATE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_FRAME_RATE_S = rkVENC_FRAME_RATE_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_CHN_PARAM_S {
    pub bColor2Grey: RK_BOOL,
    pub u32Priority: RK_U32,
    pub u32MaxStrmCnt: RK_U32,
    pub u32PollWakeUpFrmCnt: RK_U32,
    pub stCropCfg: VENC_CROP_INFO_S,
    pub stFrameRate: VENC_FRAME_RATE_S,
}

#[test]
fn bindgen_test_layout_rkVENC_CHN_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_CHN_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_CHN_PARAM_S>(),
        88usize,
        concat!("Size of: ", stringify!(rkVENC_CHN_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_CHN_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_CHN_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bColor2Grey) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_PARAM_S),
        "::",
        stringify!(bColor2Grey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Priority) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_PARAM_S),
        "::",
        stringify!(u32Priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxStrmCnt) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_PARAM_S),
        "::",
        stringify!(u32MaxStrmCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PollWakeUpFrmCnt) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_PARAM_S),
        "::",
        stringify!(u32PollWakeUpFrmCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCropCfg) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_PARAM_S),
        "::",
        stringify!(stCropCfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stFrameRate) as usize - ptr as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CHN_PARAM_S),
        "::",
        stringify!(stFrameRate)
        )
    );
}

impl Default for rkVENC_CHN_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_CHN_PARAM_S = rkVENC_CHN_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_FOREGROUND_PROTECT_S {
    pub bForegroundCuRcEn: RK_BOOL,
    pub u32ForegroundDirectionThresh: RK_U32,
    pub u32ForegroundThreshGain: RK_U32,
    pub u32ForegroundThreshOffset: RK_U32,
    pub u32ForegroundThreshP: [RK_U32; 16usize],
    pub u32ForegroundThreshB: [RK_U32; 16usize],
}

#[test]
fn bindgen_test_layout_rkVENC_FOREGROUND_PROTECT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_FOREGROUND_PROTECT_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_FOREGROUND_PROTECT_S>(),
        144usize,
        concat!("Size of: ", stringify!(rkVENC_FOREGROUND_PROTECT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_FOREGROUND_PROTECT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_FOREGROUND_PROTECT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bForegroundCuRcEn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FOREGROUND_PROTECT_S),
        "::",
        stringify!(bForegroundCuRcEn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).u32ForegroundDirectionThresh) as usize - ptr as usize
        },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FOREGROUND_PROTECT_S),
        "::",
        stringify!(u32ForegroundDirectionThresh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ForegroundThreshGain) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FOREGROUND_PROTECT_S),
        "::",
        stringify!(u32ForegroundThreshGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ForegroundThreshOffset) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FOREGROUND_PROTECT_S),
        "::",
        stringify!(u32ForegroundThreshOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ForegroundThreshP) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FOREGROUND_PROTECT_S),
        "::",
        stringify!(u32ForegroundThreshP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ForegroundThreshB) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FOREGROUND_PROTECT_S),
        "::",
        stringify!(u32ForegroundThreshB)
        )
    );
}

impl Default for rkVENC_FOREGROUND_PROTECT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_FOREGROUND_PROTECT_S = rkVENC_FOREGROUND_PROTECT_S;

pub const rkVENC_SCENE_MODE_E_SCENE_0: rkVENC_SCENE_MODE_E = 0;
pub const rkVENC_SCENE_MODE_E_SCENE_1: rkVENC_SCENE_MODE_E = 1;
pub const rkVENC_SCENE_MODE_E_SCENE_2: rkVENC_SCENE_MODE_E = 2;
pub const rkVENC_SCENE_MODE_E_SCENE_BUTT: rkVENC_SCENE_MODE_E = 3;

pub type rkVENC_SCENE_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_SCENE_MODE_E as VENC_SCENE_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_DEBREATHEFFECT_S {
    pub bEnable: RK_BOOL,
    pub s32Strength0: RK_S32,
    pub s32Strength1: RK_S32,
}

#[test]
fn bindgen_test_layout_rkVENC_DEBREATHEFFECT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_DEBREATHEFFECT_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_DEBREATHEFFECT_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVENC_DEBREATHEFFECT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_DEBREATHEFFECT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_DEBREATHEFFECT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_DEBREATHEFFECT_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Strength0) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_DEBREATHEFFECT_S),
        "::",
        stringify!(s32Strength0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Strength1) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_DEBREATHEFFECT_S),
        "::",
        stringify!(s32Strength1)
        )
    );
}

impl Default for rkVENC_DEBREATHEFFECT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_DEBREATHEFFECT_S = rkVENC_DEBREATHEFFECT_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_CU_PREDICTION_S {
    pub enPredMode: OPERATION_MODE_E,
    pub u32Intra32Cost: RK_U32,
    pub u32Intra16Cost: RK_U32,
    pub u32Intra8Cost: RK_U32,
    pub u32Intra4Cost: RK_U32,
    pub u32Inter64Cost: RK_U32,
    pub u32Inter32Cost: RK_U32,
    pub u32Inter16Cost: RK_U32,
    pub u32Inter8Cost: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_CU_PREDICTION_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_CU_PREDICTION_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_CU_PREDICTION_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkVENC_CU_PREDICTION_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_CU_PREDICTION_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_CU_PREDICTION_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPredMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(enPredMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra32Cost) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(u32Intra32Cost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra16Cost) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(u32Intra16Cost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra8Cost) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(u32Intra8Cost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Intra4Cost) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(u32Intra4Cost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter64Cost) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(u32Inter64Cost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter32Cost) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(u32Inter32Cost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter16Cost) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(u32Inter16Cost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Inter8Cost) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_CU_PREDICTION_S),
        "::",
        stringify!(u32Inter8Cost)
        )
    );
}

impl Default for rkVENC_CU_PREDICTION_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_CU_PREDICTION_S = rkVENC_CU_PREDICTION_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_SKIP_BIAS_S {
    pub bSkipBiasEn: RK_BOOL,
    pub u32SkipThreshGain: RK_U32,
    pub u32SkipThreshOffset: RK_U32,
    pub u32SkipBackgroundCost: RK_U32,
    pub u32SkipForegroundCost: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_SKIP_BIAS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_SKIP_BIAS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_SKIP_BIAS_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVENC_SKIP_BIAS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_SKIP_BIAS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_SKIP_BIAS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSkipBiasEn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SKIP_BIAS_S),
        "::",
        stringify!(bSkipBiasEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SkipThreshGain) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SKIP_BIAS_S),
        "::",
        stringify!(u32SkipThreshGain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SkipThreshOffset) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SKIP_BIAS_S),
        "::",
        stringify!(u32SkipThreshOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SkipBackgroundCost) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SKIP_BIAS_S),
        "::",
        stringify!(u32SkipBackgroundCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SkipForegroundCost) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SKIP_BIAS_S),
        "::",
        stringify!(u32SkipForegroundCost)
        )
    );
}

impl Default for rkVENC_SKIP_BIAS_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_SKIP_BIAS_S = rkVENC_SKIP_BIAS_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_HIERARCHICAL_QP_S {
    pub bHierarchicalQpEn: RK_BOOL,
    pub s32HierarchicalQpDelta: [RK_S32; 4usize],
    pub s32HierarchicalFrameNum: [RK_S32; 4usize],
}

#[test]
fn bindgen_test_layout_rkVENC_HIERARCHICAL_QP_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_HIERARCHICAL_QP_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_HIERARCHICAL_QP_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkVENC_HIERARCHICAL_QP_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_HIERARCHICAL_QP_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_HIERARCHICAL_QP_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bHierarchicalQpEn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_HIERARCHICAL_QP_S),
        "::",
        stringify!(bHierarchicalQpEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32HierarchicalQpDelta) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_HIERARCHICAL_QP_S),
        "::",
        stringify!(s32HierarchicalQpDelta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32HierarchicalFrameNum) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_HIERARCHICAL_QP_S),
        "::",
        stringify!(s32HierarchicalFrameNum)
        )
    );
}

impl Default for rkVENC_HIERARCHICAL_QP_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_HIERARCHICAL_QP_S = rkVENC_HIERARCHICAL_QP_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_CHN_POOL_S {
    pub _address: u8,
}

#[test]
fn bindgen_test_layout_rkVENC_CHN_POOL_S() {
    assert_eq!(
        ::std::mem::size_of::<rkVENC_CHN_POOL_S>(),
        1usize,
        concat!("Size of: ", stringify!(rkVENC_CHN_POOL_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_CHN_POOL_S>(),
        1usize,
        concat!("Alignment of ", stringify!(rkVENC_CHN_POOL_S))
    );
}

pub type VENC_CHN_POOL_S = rkVENC_CHN_POOL_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVENC_RC_ADVPARAM_S {
    pub u32ClearStatAfterSetAttr: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_RC_ADVPARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_RC_ADVPARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_RC_ADVPARAM_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVENC_RC_ADVPARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_RC_ADVPARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_RC_ADVPARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ClearStatAfterSetAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_RC_ADVPARAM_S),
        "::",
        stringify!(u32ClearStatAfterSetAttr)
        )
    );
}

pub type VENC_RC_ADVPARAM_S = rkVENC_RC_ADVPARAM_S;

pub const rkRC_SUPERFRM_MODE_E_SUPERFRM_NONE: rkRC_SUPERFRM_MODE_E = 0;
pub const rkRC_SUPERFRM_MODE_E_SUPERFRM_DISCARD: rkRC_SUPERFRM_MODE_E = 1;
pub const rkRC_SUPERFRM_MODE_E_SUPERFRM_REENCODE: rkRC_SUPERFRM_MODE_E = 2;
pub const rkRC_SUPERFRM_MODE_E_SUPERFRM_BUTT: rkRC_SUPERFRM_MODE_E = 3;

pub type rkRC_SUPERFRM_MODE_E = ::std::os::raw::c_uint;

pub use self::rkRC_SUPERFRM_MODE_E as VENC_SUPERFRM_MODE_E;

pub const rkVENC_RC_PRIORITY_E_VENC_RC_PRIORITY_BITRATE_FIRST: rkVENC_RC_PRIORITY_E = 1;
pub const rkVENC_RC_PRIORITY_E_VENC_RC_PRIORITY_FRAMEBITS_FIRST: rkVENC_RC_PRIORITY_E = 2;
pub const rkVENC_RC_PRIORITY_E_VENC_RC_PRIORITY_BUTT: rkVENC_RC_PRIORITY_E = 3;

pub type rkVENC_RC_PRIORITY_E = ::std::os::raw::c_uint;

pub use self::rkVENC_RC_PRIORITY_E as VENC_RC_PRIORITY_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_SUPERFRAME_CFG_S {
    pub enSuperFrmMode: VENC_SUPERFRM_MODE_E,
    pub u32SuperIFrmBitsThr: RK_U32,
    pub u32SuperPFrmBitsThr: RK_U32,
    pub u32SuperBFrmBitsThr: RK_U32,
    pub enRcPriority: VENC_RC_PRIORITY_E,
}

#[test]
fn bindgen_test_layout_rkVENC_SUPERFRAME_CFG_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_SUPERFRAME_CFG_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_SUPERFRAME_CFG_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVENC_SUPERFRAME_CFG_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_SUPERFRAME_CFG_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_SUPERFRAME_CFG_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enSuperFrmMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SUPERFRAME_CFG_S),
        "::",
        stringify!(enSuperFrmMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SuperIFrmBitsThr) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SUPERFRAME_CFG_S),
        "::",
        stringify!(u32SuperIFrmBitsThr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SuperPFrmBitsThr) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SUPERFRAME_CFG_S),
        "::",
        stringify!(u32SuperPFrmBitsThr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SuperBFrmBitsThr) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SUPERFRAME_CFG_S),
        "::",
        stringify!(u32SuperBFrmBitsThr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enRcPriority) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_SUPERFRAME_CFG_S),
        "::",
        stringify!(enRcPriority)
        )
    );
}

impl Default for rkVENC_SUPERFRAME_CFG_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_SUPERFRAME_CFG_S = rkVENC_SUPERFRAME_CFG_S;

pub const rkVENC_FRAMELOST_MODE_E_FRMLOST_NORMAL: rkVENC_FRAMELOST_MODE_E = 0;
pub const rkVENC_FRAMELOST_MODE_E_FRMLOST_PSKIP: rkVENC_FRAMELOST_MODE_E = 1;
pub const rkVENC_FRAMELOST_MODE_E_FRMLOST_BUTT: rkVENC_FRAMELOST_MODE_E = 2;

pub type rkVENC_FRAMELOST_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVENC_FRAMELOST_MODE_E as VENC_FRAMELOST_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVENC_FRAMELOST_S {
    pub bFrmLostOpen: RK_BOOL,
    pub u32FrmLostBpsThr: RK_U32,
    pub enFrmLostMode: VENC_FRAMELOST_MODE_E,
    pub u32EncFrmGaps: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVENC_FRAMELOST_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVENC_FRAMELOST_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVENC_FRAMELOST_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkVENC_FRAMELOST_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVENC_FRAMELOST_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVENC_FRAMELOST_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFrmLostOpen) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAMELOST_S),
        "::",
        stringify!(bFrmLostOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrmLostBpsThr) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAMELOST_S),
        "::",
        stringify!(u32FrmLostBpsThr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enFrmLostMode) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAMELOST_S),
        "::",
        stringify!(enFrmLostMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32EncFrmGaps) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVENC_FRAMELOST_S),
        "::",
        stringify!(u32EncFrmGaps)
        )
    );
}

impl Default for rkVENC_FRAMELOST_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VENC_FRAMELOST_S = rkVENC_FRAMELOST_S;
pub type VGS_HANDLE = RK_S32;

pub const rkVGS_COLOR_REVERT_MODE_E_VGS_COLOR_REVERT_NONE: rkVGS_COLOR_REVERT_MODE_E = 0;
pub const rkVGS_COLOR_REVERT_MODE_E_VGS_COLOR_REVERT_RGB: rkVGS_COLOR_REVERT_MODE_E = 1;
pub const rkVGS_COLOR_REVERT_MODE_E_VGS_COLOR_REVERT_ALPHA: rkVGS_COLOR_REVERT_MODE_E = 2;
pub const rkVGS_COLOR_REVERT_MODE_E_VGS_COLOR_REVERT_BOTH: rkVGS_COLOR_REVERT_MODE_E = 3;
pub const rkVGS_COLOR_REVERT_MODE_E_VGS_COLOR_REVERT_BUTT: rkVGS_COLOR_REVERT_MODE_E = 4;

pub type rkVGS_COLOR_REVERT_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVGS_COLOR_REVERT_MODE_E as VGS_COLOR_REVERT_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVGS_OSD_REVERT_S {
    pub stSrcRect: RECT_S,
    pub enColorRevertMode: VGS_COLOR_REVERT_MODE_E,
}

#[test]
fn bindgen_test_layout_rkVGS_OSD_REVERT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_OSD_REVERT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_OSD_REVERT_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVGS_OSD_REVERT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_OSD_REVERT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVGS_OSD_REVERT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSrcRect) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_OSD_REVERT_S),
        "::",
        stringify!(stSrcRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enColorRevertMode) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_OSD_REVERT_S),
        "::",
        stringify!(enColorRevertMode)
        )
    );
}

impl Default for rkVGS_OSD_REVERT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VGS_OSD_REVERT_S = rkVGS_OSD_REVERT_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVGS_TASK_ATTR_S {
    pub stImgIn: VIDEO_FRAME_INFO_S,
    pub stImgOut: VIDEO_FRAME_INFO_S,
    pub au64PrivateData: [RK_U64; 4usize],
    pub reserved: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVGS_TASK_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_TASK_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_TASK_ATTR_S>(),
        200usize,
        concat!("Size of: ", stringify!(rkVGS_TASK_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_TASK_ATTR_S>(),
        8usize,
        concat!("Alignment of ", stringify!(rkVGS_TASK_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stImgIn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_TASK_ATTR_S),
        "::",
        stringify!(stImgIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stImgOut) as usize - ptr as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_TASK_ATTR_S),
        "::",
        stringify!(stImgOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).au64PrivateData) as usize - ptr as usize },
        160usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_TASK_ATTR_S),
        "::",
        stringify!(au64PrivateData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        192usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_TASK_ATTR_S),
        "::",
        stringify!(reserved)
        )
    );
}

impl Default for rkVGS_TASK_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VGS_TASK_ATTR_S = rkVGS_TASK_ATTR_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVGS_DRAW_LINE_S {
    pub stStartPoint: POINT_S,
    pub stEndPoint: POINT_S,
    pub u32Thick: RK_U32,
    pub u32Color: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVGS_DRAW_LINE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_DRAW_LINE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_DRAW_LINE_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVGS_DRAW_LINE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_DRAW_LINE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVGS_DRAW_LINE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stStartPoint) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_DRAW_LINE_S),
        "::",
        stringify!(stStartPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stEndPoint) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_DRAW_LINE_S),
        "::",
        stringify!(stEndPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Thick) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_DRAW_LINE_S),
        "::",
        stringify!(u32Thick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Color) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_DRAW_LINE_S),
        "::",
        stringify!(u32Color)
        )
    );
}

pub type VGS_DRAW_LINE_S = rkVGS_DRAW_LINE_S;

pub const rkVGS_COVER_TYPE_E_COVER_RECT: rkVGS_COVER_TYPE_E = 0;
pub const rkVGS_COVER_TYPE_E_COVER_QUAD_RANGLE: rkVGS_COVER_TYPE_E = 1;
pub const rkVGS_COVER_TYPE_E_COVER_BUTT: rkVGS_COVER_TYPE_E = 2;

pub type rkVGS_COVER_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkVGS_COVER_TYPE_E as VGS_COVER_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVGS_QUADRANGLE_COVER_S {
    pub bSolid: RK_BOOL,
    pub u32Thick: RK_U32,
    pub stPoint: [POINT_S; 4usize],
}

#[test]
fn bindgen_test_layout_rkVGS_QUADRANGLE_COVER_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_QUADRANGLE_COVER_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_QUADRANGLE_COVER_S>(),
        40usize,
        concat!("Size of: ", stringify!(rkVGS_QUADRANGLE_COVER_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_QUADRANGLE_COVER_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVGS_QUADRANGLE_COVER_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSolid) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_QUADRANGLE_COVER_S),
        "::",
        stringify!(bSolid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Thick) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_QUADRANGLE_COVER_S),
        "::",
        stringify!(u32Thick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stPoint) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_QUADRANGLE_COVER_S),
        "::",
        stringify!(stPoint)
        )
    );
}

impl Default for rkVGS_QUADRANGLE_COVER_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VGS_QUADRANGLE_COVER_S = rkVGS_QUADRANGLE_COVER_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVGS_ADD_COVER_S {
    pub enCoverType: VGS_COVER_TYPE_E,
    pub __bindgen_anon_1: rkVGS_ADD_COVER_S__bindgen_ty_1,
    pub u32Color: RK_U32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVGS_ADD_COVER_S__bindgen_ty_1 {
    pub stDstRect: RECT_S,
    pub stQuadRangle: VGS_QUADRANGLE_COVER_S,
}

#[test]
fn bindgen_test_layout_rkVGS_ADD_COVER_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_ADD_COVER_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_ADD_COVER_S__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(rkVGS_ADD_COVER_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_ADD_COVER_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVGS_ADD_COVER_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stDstRect) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_COVER_S__bindgen_ty_1),
        "::",
        stringify!(stDstRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stQuadRangle) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_COVER_S__bindgen_ty_1),
        "::",
        stringify!(stQuadRangle)
        )
    );
}

impl Default for rkVGS_ADD_COVER_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVGS_ADD_COVER_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_ADD_COVER_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_ADD_COVER_S>(),
        48usize,
        concat!("Size of: ", stringify!(rkVGS_ADD_COVER_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_ADD_COVER_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVGS_ADD_COVER_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCoverType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_COVER_S),
        "::",
        stringify!(enCoverType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Color) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_COVER_S),
        "::",
        stringify!(u32Color)
        )
    );
}

impl Default for rkVGS_ADD_COVER_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VGS_ADD_COVER_S = rkVGS_ADD_COVER_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVGS_ADD_OSD_S {
    pub pMbBlk: MB_BLK,
    pub stRect: RECT_S,
    pub enPixelFmt: PIXEL_FORMAT_E,
    pub u32FgAlpha: RK_U32,
    pub u32BgAlpha: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVGS_ADD_OSD_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_ADD_OSD_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_ADD_OSD_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVGS_ADD_OSD_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_ADD_OSD_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVGS_ADD_OSD_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMbBlk) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_OSD_S),
        "::",
        stringify!(pMbBlk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_OSD_S),
        "::",
        stringify!(stRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFmt) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_OSD_S),
        "::",
        stringify!(enPixelFmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FgAlpha) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_OSD_S),
        "::",
        stringify!(u32FgAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BgAlpha) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_ADD_OSD_S),
        "::",
        stringify!(u32BgAlpha)
        )
    );
}

impl Default for rkVGS_ADD_OSD_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VGS_ADD_OSD_S = rkVGS_ADD_OSD_S;

pub const rkVGS_SCLCOEF_MODE_E_VGS_SCLCOEF_NORMAL: rkVGS_SCLCOEF_MODE_E = 0;
pub const rkVGS_SCLCOEF_MODE_E_VGS_SCLCOEF_TAP2: rkVGS_SCLCOEF_MODE_E = 1;
pub const rkVGS_SCLCOEF_MODE_E_VGS_SCLCOEF_TAP4: rkVGS_SCLCOEF_MODE_E = 2;
pub const rkVGS_SCLCOEF_MODE_E_VGS_SCLCOEF_TAP6: rkVGS_SCLCOEF_MODE_E = 3;
pub const rkVGS_SCLCOEF_MODE_E_VGS_SCLCOEF_TAP8: rkVGS_SCLCOEF_MODE_E = 4;
pub const rkVGS_SCLCOEF_MODE_E_VGS_SCLCOEF_BUTT: rkVGS_SCLCOEF_MODE_E = 5;

pub type rkVGS_SCLCOEF_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVGS_SCLCOEF_MODE_E as VGS_SCLCOEF_MODE_E;

pub const rkVGS_MOSAIC_BLK_SIZE_E_RK_MOSAIC_BLK_SIZE_8: rkVGS_MOSAIC_BLK_SIZE_E = 8;
pub const rkVGS_MOSAIC_BLK_SIZE_E_RK_MOSAIC_BLK_SIZE_16: rkVGS_MOSAIC_BLK_SIZE_E = 16;
pub const rkVGS_MOSAIC_BLK_SIZE_E_RK_MOSAIC_BLK_SIZE_32: rkVGS_MOSAIC_BLK_SIZE_E = 32;
pub const rkVGS_MOSAIC_BLK_SIZE_E_RK_MOSAIC_BLK_SIZE_64: rkVGS_MOSAIC_BLK_SIZE_E = 64;
pub const rkVGS_MOSAIC_BLK_SIZE_E_RK_MOSAIC_BLK_SIZE_BUT: rkVGS_MOSAIC_BLK_SIZE_E = 65;

pub type rkVGS_MOSAIC_BLK_SIZE_E = ::std::os::raw::c_uint;

pub use self::rkVGS_MOSAIC_BLK_SIZE_E as VGS_MOSAIC_BLK_SIZE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVGS_MOSAIC_S {
    pub enBlkSize: VGS_MOSAIC_BLK_SIZE_E,
    pub stDstRect: RECT_S,
}

#[test]
fn bindgen_test_layout_rkVGS_MOSAIC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_MOSAIC_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_MOSAIC_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVGS_MOSAIC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_MOSAIC_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVGS_MOSAIC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enBlkSize) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_MOSAIC_S),
        "::",
        stringify!(enBlkSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stDstRect) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_MOSAIC_S),
        "::",
        stringify!(stDstRect)
        )
    );
}

impl Default for rkVGS_MOSAIC_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VGS_MOSAIC_S = rkVGS_MOSAIC_S;

pub const rkVGS_CROP_COORDINATE_E_VGS_CROP_RATIO_COOR: rkVGS_CROP_COORDINATE_E = 0;
pub const rkVGS_CROP_COORDINATE_E_VGS_CROP_ABS_COOR: rkVGS_CROP_COORDINATE_E = 1;

pub type rkVGS_CROP_COORDINATE_E = ::std::os::raw::c_uint;

pub use self::rkVGS_CROP_COORDINATE_E as VGS_CROP_COORDINATE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVGS_CROP_INFO_S {
    pub enCropCoordinate: VGS_CROP_COORDINATE_E,
    pub stCropRect: RECT_S,
}

#[test]
fn bindgen_test_layout_rkVGS_CROP_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVGS_CROP_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVGS_CROP_INFO_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVGS_CROP_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVGS_CROP_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVGS_CROP_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCropCoordinate) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_CROP_INFO_S),
        "::",
        stringify!(enCropCoordinate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCropRect) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVGS_CROP_INFO_S),
        "::",
        stringify!(stCropRect)
        )
    );
}

impl Default for rkVGS_CROP_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VGS_CROP_INFO_S = rkVGS_CROP_INFO_S;

pub const rkVI_INTF_MODE_E_VI_MODE_BT656: rkVI_INTF_MODE_E = 0;
pub const rkVI_INTF_MODE_E_VI_MODE_BT601: rkVI_INTF_MODE_E = 1;
pub const rkVI_INTF_MODE_E_VI_MODE_DIGITAL_CAMERA: rkVI_INTF_MODE_E = 2;
pub const rkVI_INTF_MODE_E_VI_MODE_BT1120_STANDARD: rkVI_INTF_MODE_E = 3;
pub const rkVI_INTF_MODE_E_VI_MODE_BT1120_INTERLEAVED: rkVI_INTF_MODE_E = 4;
pub const rkVI_INTF_MODE_E_VI_MODE_MIPI: rkVI_INTF_MODE_E = 5;
pub const rkVI_INTF_MODE_E_VI_MODE_MIPI_YUV420_NORMAL: rkVI_INTF_MODE_E = 6;
pub const rkVI_INTF_MODE_E_VI_MODE_MIPI_YUV420_LEGACY: rkVI_INTF_MODE_E = 7;
pub const rkVI_INTF_MODE_E_VI_MODE_MIPI_YUV422: rkVI_INTF_MODE_E = 8;
pub const rkVI_INTF_MODE_E_VI_MODE_LVDS: rkVI_INTF_MODE_E = 9;
pub const rkVI_INTF_MODE_E_VI_MODE_SPI: rkVI_INTF_MODE_E = 10;
pub const rkVI_INTF_MODE_E_VI_MODE_SLVS: rkVI_INTF_MODE_E = 11;
pub const rkVI_INTF_MODE_E_VI_MODE_BUTT: rkVI_INTF_MODE_E = 12;

pub type rkVI_INTF_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVI_INTF_MODE_E as VI_INTF_MODE_E;

pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_BT656: rkVI_INPUT_MODE_E = 0;
pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_BT601: rkVI_INPUT_MODE_E = 1;
pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_DIGITAL_CAMERA: rkVI_INPUT_MODE_E = 2;
pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_INTERLEAVED: rkVI_INPUT_MODE_E = 3;
pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_MIPI: rkVI_INPUT_MODE_E = 4;
pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_LVDS: rkVI_INPUT_MODE_E = 5;
pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_SPI: rkVI_INPUT_MODE_E = 6;
pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_SLVS: rkVI_INPUT_MODE_E = 7;
pub const rkVI_INPUT_MODE_E_VI_INPUT_MODE_BUTT: rkVI_INPUT_MODE_E = 8;

pub type rkVI_INPUT_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVI_INPUT_MODE_E as VI_INPUT_MODE_E;

pub const rkVI_WORK_MODE_E_VI_WORK_MODE_1Multiplex: rkVI_WORK_MODE_E = 0;
pub const rkVI_WORK_MODE_E_VI_WORK_MODE_2Multiplex: rkVI_WORK_MODE_E = 1;
pub const rkVI_WORK_MODE_E_VI_WORK_MODE_3Multiplex: rkVI_WORK_MODE_E = 2;
pub const rkVI_WORK_MODE_E_VI_WORK_MODE_4Multiplex: rkVI_WORK_MODE_E = 3;
pub const rkVI_WORK_MODE_E_VI_WORK_MODE_BUTT: rkVI_WORK_MODE_E = 4;

pub type rkVI_WORK_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVI_WORK_MODE_E as VI_WORK_MODE_E;

pub const rkVI_YUV_DATA_SEQ_E_VI_DATA_SEQ_VUVU: rkVI_YUV_DATA_SEQ_E = 0;
pub const rkVI_YUV_DATA_SEQ_E_VI_DATA_SEQ_UVUV: rkVI_YUV_DATA_SEQ_E = 1;
pub const rkVI_YUV_DATA_SEQ_E_VI_DATA_SEQ_UYVY: rkVI_YUV_DATA_SEQ_E = 2;
pub const rkVI_YUV_DATA_SEQ_E_VI_DATA_SEQ_VYUY: rkVI_YUV_DATA_SEQ_E = 3;
pub const rkVI_YUV_DATA_SEQ_E_VI_DATA_SEQ_YUYV: rkVI_YUV_DATA_SEQ_E = 4;
pub const rkVI_YUV_DATA_SEQ_E_VI_DATA_SEQ_YVYU: rkVI_YUV_DATA_SEQ_E = 5;
pub const rkVI_YUV_DATA_SEQ_E_VI_DATA_SEQ_BUTT: rkVI_YUV_DATA_SEQ_E = 6;

pub type rkVI_YUV_DATA_SEQ_E = ::std::os::raw::c_uint;

pub use self::rkVI_YUV_DATA_SEQ_E as VI_YUV_DATA_SEQ_E;

pub const rkVI_DATA_TYPE_E_VI_DATA_TYPE_YUV: rkVI_DATA_TYPE_E = 0;
pub const rkVI_DATA_TYPE_E_VI_DATA_TYPE_RGB: rkVI_DATA_TYPE_E = 1;
pub const rkVI_DATA_TYPE_E_VI_DATA_TYPE_BUTT: rkVI_DATA_TYPE_E = 2;

pub type rkVI_DATA_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkVI_DATA_TYPE_E as VI_DATA_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_DEV_ATTR_S {
    pub enIntfMode: VI_INTF_MODE_E,
    pub enWorkMode: VI_WORK_MODE_E,
    pub enDataSeq: VI_YUV_DATA_SEQ_E,
    pub enInputDataType: VI_DATA_TYPE_E,
    pub stMaxSize: SIZE_S,
    pub enDataRate: DATA_RATE_E,
}

#[test]
fn bindgen_test_layout_rkVI_DEV_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_DEV_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_DEV_ATTR_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkVI_DEV_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_DEV_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_DEV_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enIntfMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_ATTR_S),
        "::",
        stringify!(enIntfMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enWorkMode) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_ATTR_S),
        "::",
        stringify!(enWorkMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDataSeq) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_ATTR_S),
        "::",
        stringify!(enDataSeq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enInputDataType) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_ATTR_S),
        "::",
        stringify!(enInputDataType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stMaxSize) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_ATTR_S),
        "::",
        stringify!(stMaxSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDataRate) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_ATTR_S),
        "::",
        stringify!(enDataRate)
        )
    );
}

impl Default for rkVI_DEV_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_DEV_ATTR_S = rkVI_DEV_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_DEV_STATUS_S {
    pub stSize: SIZE_S,
    pub bProbeOk: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVI_DEV_STATUS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_DEV_STATUS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_DEV_STATUS_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVI_DEV_STATUS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_DEV_STATUS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_DEV_STATUS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSize) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_STATUS_S),
        "::",
        stringify!(stSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bProbeOk) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_STATUS_S),
        "::",
        stringify!(bProbeOk)
        )
    );
}

impl Default for rkVI_DEV_STATUS_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_DEV_STATUS_S = rkVI_DEV_STATUS_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVI_DEV_BIND_PIPE_S {
    pub u32Num: RK_U32,
    pub PipeId: [VI_PIPE; 16usize],
}

#[test]
fn bindgen_test_layout_rkVI_DEV_BIND_PIPE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_DEV_BIND_PIPE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_DEV_BIND_PIPE_S>(),
        68usize,
        concat!("Size of: ", stringify!(rkVI_DEV_BIND_PIPE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_DEV_BIND_PIPE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_DEV_BIND_PIPE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Num) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_BIND_PIPE_S),
        "::",
        stringify!(u32Num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PipeId) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_DEV_BIND_PIPE_S),
        "::",
        stringify!(PipeId)
        )
    );
}

pub type VI_DEV_BIND_PIPE_S = rkVI_DEV_BIND_PIPE_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_PIPE_ATTR_S {
    pub bIspBypass: RK_BOOL,
    pub u32MaxW: RK_U32,
    pub u32MaxH: RK_U32,
    pub enPixFmt: PIXEL_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enBitWidth: DATA_BITWIDTH_E,
    pub stFrameRate: FRAME_RATE_CTRL_S,
}

#[test]
fn bindgen_test_layout_rkVI_PIPE_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_PIPE_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_PIPE_ATTR_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVI_PIPE_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_PIPE_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_PIPE_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIspBypass) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_PIPE_ATTR_S),
        "::",
        stringify!(bIspBypass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxW) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_PIPE_ATTR_S),
        "::",
        stringify!(u32MaxW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxH) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_PIPE_ATTR_S),
        "::",
        stringify!(u32MaxH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixFmt) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_PIPE_ATTR_S),
        "::",
        stringify!(enPixFmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_PIPE_ATTR_S),
        "::",
        stringify!(enCompressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enBitWidth) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_PIPE_ATTR_S),
        "::",
        stringify!(enBitWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stFrameRate) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_PIPE_ATTR_S),
        "::",
        stringify!(stFrameRate)
        )
    );
}

impl Default for rkVI_PIPE_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_PIPE_ATTR_S = rkVI_PIPE_ATTR_S;

pub const rkVI_ALLOC_BUF_TYPE_E_VI_ALLOC_BUF_TYPE_INTERNAL: rkVI_ALLOC_BUF_TYPE_E = 0;
pub const rkVI_ALLOC_BUF_TYPE_E_VI_ALLOC_BUF_TYPE_EXTERNAL: rkVI_ALLOC_BUF_TYPE_E = 1;

pub type rkVI_ALLOC_BUF_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkVI_ALLOC_BUF_TYPE_E as VI_ALLOC_BUF_TYPE_E;

pub const rkVI_V4L2_CAPTURE_TYPE_VI_V4L2_CAPTURE_TYPE_VIDEO_CAPTURE: rkVI_V4L2_CAPTURE_TYPE = 1;
pub const rkVI_V4L2_CAPTURE_TYPE_VI_V4L2_CAPTURE_TYPE_VBI_CAPTURE: rkVI_V4L2_CAPTURE_TYPE = 4;
pub const rkVI_V4L2_CAPTURE_TYPE_VI_V4L2_CAPTURE_TYPE_SLICED_VBI_CAPTURE: rkVI_V4L2_CAPTURE_TYPE =
    6;
pub const rkVI_V4L2_CAPTURE_TYPE_VI_V4L2_CAPTURE_TYPE_VIDEO_CAPTURE_MPLANE: rkVI_V4L2_CAPTURE_TYPE =
    9;
pub const rkVI_V4L2_CAPTURE_TYPE_VI_V4L2_CAPTURE_TYPE_SDR_CAPTURE: rkVI_V4L2_CAPTURE_TYPE = 11;
pub const rkVI_V4L2_CAPTURE_TYPE_VI_V4L2_CAPTURE_TYPE_META_CAPTURE: rkVI_V4L2_CAPTURE_TYPE = 13;
pub const rkVI_V4L2_CAPTURE_TYPE_VI_V4L2_CAPTURE_TYPE_PRIVATE: rkVI_V4L2_CAPTURE_TYPE = 128;

pub type rkVI_V4L2_CAPTURE_TYPE = ::std::os::raw::c_uint;

pub use self::rkVI_V4L2_CAPTURE_TYPE as VI_V4L2_CAPTURE_TYPE;

pub const rkVI_V4L2_MEMORY_TYPE_VI_V4L2_MEMORY_TYPE_MMAP: rkVI_V4L2_MEMORY_TYPE = 1;
pub const rkVI_V4L2_MEMORY_TYPE_VI_V4L2_MEMORY_TYPE_USERPTR: rkVI_V4L2_MEMORY_TYPE = 2;
pub const rkVI_V4L2_MEMORY_TYPE_VI_V4L2_MEMORY_TYPE_OVERLAY: rkVI_V4L2_MEMORY_TYPE = 3;
pub const rkVI_V4L2_MEMORY_TYPE_VI_V4L2_MEMORY_TYPE_DMABUF: rkVI_V4L2_MEMORY_TYPE = 4;

pub type rkVI_V4L2_MEMORY_TYPE = ::std::os::raw::c_uint;

pub use self::rkVI_V4L2_MEMORY_TYPE as VI_V4L2_MEMORY_TYPE;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_ISP_OPT_S {
    pub u32BufCount: RK_U32,
    pub u32BufSize: RK_U32,
    pub enCaptureType: VI_V4L2_CAPTURE_TYPE,
    pub enMemoryType: VI_V4L2_MEMORY_TYPE,
    pub aEntityName: [RK_CHAR; 32usize],
    pub bNoUseLibV4L2: RK_BOOL,
    pub stMaxSize: SIZE_S,
}

#[test]
fn bindgen_test_layout_rkVI_ISP_OPT_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_ISP_OPT_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_ISP_OPT_S>(),
        60usize,
        concat!("Size of: ", stringify!(rkVI_ISP_OPT_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_ISP_OPT_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_ISP_OPT_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufCount) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_ISP_OPT_S),
        "::",
        stringify!(u32BufCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufSize) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_ISP_OPT_S),
        "::",
        stringify!(u32BufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCaptureType) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_ISP_OPT_S),
        "::",
        stringify!(enCaptureType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMemoryType) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_ISP_OPT_S),
        "::",
        stringify!(enMemoryType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aEntityName) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_ISP_OPT_S),
        "::",
        stringify!(aEntityName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNoUseLibV4L2) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_ISP_OPT_S),
        "::",
        stringify!(bNoUseLibV4L2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stMaxSize) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_ISP_OPT_S),
        "::",
        stringify!(stMaxSize)
        )
    );
}

impl Default for rkVI_ISP_OPT_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_ISP_OPT_S = rkVI_ISP_OPT_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_CHN_ATTR_S {
    pub stSize: SIZE_S,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub bMirror: RK_BOOL,
    pub bFlip: RK_BOOL,
    pub u32Depth: RK_U32,
    pub stFrameRate: FRAME_RATE_CTRL_S,
    pub enAllocBufType: VI_ALLOC_BUF_TYPE_E,
    pub stIspOpt: VI_ISP_OPT_S,
}

#[test]
fn bindgen_test_layout_rkVI_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_CHN_ATTR_S>(),
        108usize,
        concat!("Size of: ", stringify!(rkVI_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSize) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(stSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDynamicRange) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(enDynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVideoFormat) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(enVideoFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(enCompressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMirror) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(bMirror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFlip) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(bFlip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Depth) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(u32Depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stFrameRate) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(stFrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enAllocBufType) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(enAllocBufType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stIspOpt) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_ATTR_S),
        "::",
        stringify!(stIspOpt)
        )
    );
}

impl Default for rkVI_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_CHN_ATTR_S = rkVI_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_CHN_STATUS_S {
    pub bEnable: RK_BOOL,
    pub u32FrameRate: RK_U32,
    pub u32CurFrameID: RK_U32,
    pub u32InputLostFrame: RK_U32,
    pub u32OutputLostFrame: RK_U32,
    pub u32VbFail: RK_U32,
    pub stSize: SIZE_S,
}

#[test]
fn bindgen_test_layout_rkVI_CHN_STATUS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_CHN_STATUS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_CHN_STATUS_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVI_CHN_STATUS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_CHN_STATUS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_CHN_STATUS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_STATUS_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameRate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_STATUS_S),
        "::",
        stringify!(u32FrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32CurFrameID) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_STATUS_S),
        "::",
        stringify!(u32CurFrameID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32InputLostFrame) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_STATUS_S),
        "::",
        stringify!(u32InputLostFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32OutputLostFrame) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_STATUS_S),
        "::",
        stringify!(u32OutputLostFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VbFail) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_STATUS_S),
        "::",
        stringify!(u32VbFail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSize) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_STATUS_S),
        "::",
        stringify!(stSize)
        )
    );
}

impl Default for rkVI_CHN_STATUS_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_CHN_STATUS_S = rkVI_CHN_STATUS_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_SAVE_FILE_INFO_S {
    pub bCfg: RK_BOOL,
    pub aFilePath: [RK_CHAR; 256usize],
    pub aFileName: [RK_CHAR; 256usize],
    pub u32FileSize: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVI_SAVE_FILE_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_SAVE_FILE_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_SAVE_FILE_INFO_S>(),
        520usize,
        concat!("Size of: ", stringify!(rkVI_SAVE_FILE_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_SAVE_FILE_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_SAVE_FILE_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bCfg) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_SAVE_FILE_INFO_S),
        "::",
        stringify!(bCfg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aFilePath) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_SAVE_FILE_INFO_S),
        "::",
        stringify!(aFilePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aFileName) as usize - ptr as usize },
        260usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_SAVE_FILE_INFO_S),
        "::",
        stringify!(aFileName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FileSize) as usize - ptr as usize },
        516usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_SAVE_FILE_INFO_S),
        "::",
        stringify!(u32FileSize)
        )
    );
}

impl Default for rkVI_SAVE_FILE_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_SAVE_FILE_INFO_S = rkVI_SAVE_FILE_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_CHN_BUF_WRAP_S {
    pub bEnable: RK_BOOL,
    pub u32BufLine: RK_U32,
    pub u32WrapBufferSize: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVI_CHN_BUF_WRAP_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_CHN_BUF_WRAP_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_CHN_BUF_WRAP_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVI_CHN_BUF_WRAP_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_CHN_BUF_WRAP_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_CHN_BUF_WRAP_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_BUF_WRAP_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BufLine) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_BUF_WRAP_S),
        "::",
        stringify!(u32BufLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32WrapBufferSize) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CHN_BUF_WRAP_S),
        "::",
        stringify!(u32WrapBufferSize)
        )
    );
}

impl Default for rkVI_CHN_BUF_WRAP_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_CHN_BUF_WRAP_S = rkVI_CHN_BUF_WRAP_S;

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkISP_MIRROR_FLIP_S {
    pub mirror: RK_U8,
    pub flip: RK_U8,
}

#[test]
fn bindgen_test_layout_rkISP_MIRROR_FLIP_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkISP_MIRROR_FLIP_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkISP_MIRROR_FLIP_S>(),
        2usize,
        concat!("Size of: ", stringify!(rkISP_MIRROR_FLIP_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkISP_MIRROR_FLIP_S>(),
        1usize,
        concat!("Alignment of ", stringify!(rkISP_MIRROR_FLIP_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mirror) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_MIRROR_FLIP_S),
        "::",
        stringify!(mirror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flip) as usize - ptr as usize },
        1usize,
        concat!(
        "Offset of field: ",
        stringify!(rkISP_MIRROR_FLIP_S),
        "::",
        stringify!(flip)
        )
    );
}

pub type VI_ISP_MIRROR_FLIP_S = rkISP_MIRROR_FLIP_S;

pub const rkVI_CROP_COORDINATE_E_VI_CROP_RATIO_COOR: rkVI_CROP_COORDINATE_E = 0;
pub const rkVI_CROP_COORDINATE_E_VI_CROP_ABS_COOR: rkVI_CROP_COORDINATE_E = 1;
pub const rkVI_CROP_COORDINATE_E_VI_CROP_BUTT: rkVI_CROP_COORDINATE_E = 2;

pub type rkVI_CROP_COORDINATE_E = ::std::os::raw::c_uint;

pub use self::rkVI_CROP_COORDINATE_E as VI_CROP_COORDINATE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVI_CROP_INFO_S {
    pub bEnable: RK_BOOL,
    pub enCropCoordinate: VI_CROP_COORDINATE_E,
    pub stCropRect: RECT_S,
}

#[test]
fn bindgen_test_layout_rkVI_CROP_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVI_CROP_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVI_CROP_INFO_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVI_CROP_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVI_CROP_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVI_CROP_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CROP_INFO_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCropCoordinate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CROP_INFO_S),
        "::",
        stringify!(enCropCoordinate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCropRect) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVI_CROP_INFO_S),
        "::",
        stringify!(stCropRect)
        )
    );
}

impl Default for rkVI_CROP_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VI_CROP_INFO_S = rkVI_CROP_INFO_S;

pub const rkEN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_CONFIG: rkEN_VOU_ERR_CODE_E = 64;
pub const rkEN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_ENABLE: rkEN_VOU_ERR_CODE_E = 65;
pub const rkEN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_HAS_ENABLED: rkEN_VOU_ERR_CODE_E = 66;
pub const rkEN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_HAS_BINDED: rkEN_VOU_ERR_CODE_E = 67;
pub const rkEN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_BINDED: rkEN_VOU_ERR_CODE_E = 68;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_NOT_ENABLE: rkEN_VOU_ERR_CODE_E = 69;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_NOT_DISABLE: rkEN_VOU_ERR_CODE_E = 70;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_NOT_CONFIG: rkEN_VOU_ERR_CODE_E = 71;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_CHN_NOT_DISABLE: rkEN_VOU_ERR_CODE_E = 72;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_CHN_NOT_ENABLE: rkEN_VOU_ERR_CODE_E = 73;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_CHN_NOT_CONFIG: rkEN_VOU_ERR_CODE_E = 74;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_CHN_NOT_ALLOC: rkEN_VOU_ERR_CODE_E = 75;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_CCD_INVALID_PAT: rkEN_VOU_ERR_CODE_E = 76;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_CCD_INVALID_POS: rkEN_VOU_ERR_CODE_E = 77;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_WAIT_TIMEOUT: rkEN_VOU_ERR_CODE_E = 78;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_INVALID_VFRAME: rkEN_VOU_ERR_CODE_E = 79;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_INVALID_RECT_PARA: rkEN_VOU_ERR_CODE_E = 80;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_SETBEGIN_ALREADY: rkEN_VOU_ERR_CODE_E = 81;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_SETBEGIN_NOTYET: rkEN_VOU_ERR_CODE_E = 82;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_SETEND_ALREADY: rkEN_VOU_ERR_CODE_E = 83;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_SETEND_NOTYET: rkEN_VOU_ERR_CODE_E = 84;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_WBC_NOT_DISABLE: rkEN_VOU_ERR_CODE_E = 85;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_WBC_NOT_CONFIG: rkEN_VOU_ERR_CODE_E = 86;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_CHN_AREA_OVERLAP: rkEN_VOU_ERR_CODE_E = 87;
pub const rkEN_VOU_ERR_CODE_E_EN_ERR_INVALID_WBCID: rkEN_VOU_ERR_CODE_E = 88;
pub const rkEN_VOU_ERR_CODE_E_EN_ERR_INVALID_LAYERID: rkEN_VOU_ERR_CODE_E = 89;
pub const rkEN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_HAS_BINDED: rkEN_VOU_ERR_CODE_E = 90;
pub const rkEN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_BINDED: rkEN_VOU_ERR_CODE_E = 91;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_WBC_HAS_BIND: rkEN_VOU_ERR_CODE_E = 92;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_WBC_HAS_CONFIG: rkEN_VOU_ERR_CODE_E = 93;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_WBC_NOT_BIND: rkEN_VOU_ERR_CODE_E = 94;
pub const rkEN_VOU_ERR_CODE_E_ERR_VO_BUTT: rkEN_VOU_ERR_CODE_E = 95;

pub type rkEN_VOU_ERR_CODE_E = ::std::os::raw::c_uint;

pub use self::rkEN_VOU_ERR_CODE_E as EN_VOU_ERR_CODE_E;

pub type VO_INTF_TYPE_E = RK_U32;

pub const rkVO_INTF_SYNC_E_VO_OUTPUT_PAL: rkVO_INTF_SYNC_E = 0;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_NTSC: rkVO_INTF_SYNC_E = 1;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1080P24: rkVO_INTF_SYNC_E = 2;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1080P25: rkVO_INTF_SYNC_E = 3;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1080P30: rkVO_INTF_SYNC_E = 4;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_720P50: rkVO_INTF_SYNC_E = 5;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_720P60: rkVO_INTF_SYNC_E = 6;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1080I50: rkVO_INTF_SYNC_E = 7;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1080I60: rkVO_INTF_SYNC_E = 8;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1080P50: rkVO_INTF_SYNC_E = 9;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1080P60: rkVO_INTF_SYNC_E = 10;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_576P50: rkVO_INTF_SYNC_E = 11;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_480P60: rkVO_INTF_SYNC_E = 12;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_800x600_60: rkVO_INTF_SYNC_E = 13;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1024x768_60: rkVO_INTF_SYNC_E = 14;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1280x1024_60: rkVO_INTF_SYNC_E = 15;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1366x768_60: rkVO_INTF_SYNC_E = 16;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1440x900_60: rkVO_INTF_SYNC_E = 17;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1280x800_60: rkVO_INTF_SYNC_E = 18;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1600x1200_60: rkVO_INTF_SYNC_E = 19;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1680x1050_60: rkVO_INTF_SYNC_E = 20;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1920x1200_60: rkVO_INTF_SYNC_E = 21;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_640x480_60: rkVO_INTF_SYNC_E = 22;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_960H_PAL: rkVO_INTF_SYNC_E = 23;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_960H_NTSC: rkVO_INTF_SYNC_E = 24;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_1920x2160_30: rkVO_INTF_SYNC_E = 25;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_2560x1440_30: rkVO_INTF_SYNC_E = 26;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_2560x1440_60: rkVO_INTF_SYNC_E = 27;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_2560x1600_60: rkVO_INTF_SYNC_E = 28;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_3840x2160_24: rkVO_INTF_SYNC_E = 29;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_3840x2160_25: rkVO_INTF_SYNC_E = 30;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_3840x2160_30: rkVO_INTF_SYNC_E = 31;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_3840x2160_50: rkVO_INTF_SYNC_E = 32;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_3840x2160_60: rkVO_INTF_SYNC_E = 33;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_4096x2160_24: rkVO_INTF_SYNC_E = 34;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_4096x2160_25: rkVO_INTF_SYNC_E = 35;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_4096x2160_30: rkVO_INTF_SYNC_E = 36;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_4096x2160_50: rkVO_INTF_SYNC_E = 37;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_4096x2160_60: rkVO_INTF_SYNC_E = 38;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_7680x4320_24: rkVO_INTF_SYNC_E = 39;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_7680x4320_25: rkVO_INTF_SYNC_E = 40;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_7680x4320_30: rkVO_INTF_SYNC_E = 41;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_7680x4320_50: rkVO_INTF_SYNC_E = 42;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_7680x4320_60: rkVO_INTF_SYNC_E = 43;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_3840x1080_60: rkVO_INTF_SYNC_E = 44;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_USER: rkVO_INTF_SYNC_E = 45;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_DEFAULT: rkVO_INTF_SYNC_E = 46;
pub const rkVO_INTF_SYNC_E_VO_OUTPUT_BUTT: rkVO_INTF_SYNC_E = 47;

pub type rkVO_INTF_SYNC_E = ::std::os::raw::c_uint;

pub use self::rkVO_INTF_SYNC_E as VO_INTF_SYNC_E;

pub const rkVO_ZOOM_IN_E_VO_ZOOM_IN_RECT: rkVO_ZOOM_IN_E = 0;
pub const rkVO_ZOOM_IN_E_VO_ZOOM_IN_RATIO: rkVO_ZOOM_IN_E = 1;
pub const rkVO_ZOOM_IN_E_VO_ZOOM_IN_BUTT: rkVO_ZOOM_IN_E = 2;

pub type rkVO_ZOOM_IN_E = ::std::os::raw::c_uint;

pub use self::rkVO_ZOOM_IN_E as VO_ZOOM_IN_E;

pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_IDENTITY: rkVO_CSC_MATRIX_E = 0;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_BT601_TO_BT709: rkVO_CSC_MATRIX_E = 1;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_BT709_TO_BT601: rkVO_CSC_MATRIX_E = 2;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_BT601_TO_RGB_PC: rkVO_CSC_MATRIX_E = 3;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_BT709_TO_RGB_PC: rkVO_CSC_MATRIX_E = 4;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_RGB_TO_BT601_PC: rkVO_CSC_MATRIX_E = 5;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_RGB_TO_BT709_PC: rkVO_CSC_MATRIX_E = 6;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_RGB_TO_BT2020_PC: rkVO_CSC_MATRIX_E = 7;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_BT2020_TO_RGB_PC: rkVO_CSC_MATRIX_E = 8;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_RGB_TO_BT601_TV: rkVO_CSC_MATRIX_E = 9;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_RGB_TO_BT709_TV: rkVO_CSC_MATRIX_E = 10;
pub const rkVO_CSC_MATRIX_E_VO_CSC_MATRIX_BUTT: rkVO_CSC_MATRIX_E = 11;

pub type rkVO_CSC_MATRIX_E = ::std::os::raw::c_uint;

pub use self::rkVO_CSC_MATRIX_E as VO_CSC_MATRIX_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_CHN_ATTR_S {
    pub u32Priority: RK_U32,
    pub stRect: RECT_S,
    pub bDeflicker: RK_BOOL,
    pub u32FgAlpha: RK_U32,
    pub u32BgAlpha: RK_U32,
    pub bEnKeyColor: RK_BOOL,
    pub u32KeyColor: RK_U32,
    pub enMirror: MIRROR_E,
    pub enRotation: ROTATION_E,
}

#[test]
fn bindgen_test_layout_rkVO_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_CHN_ATTR_S>(),
        48usize,
        concat!("Size of: ", stringify!(rkVO_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Priority) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(u32Priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRect) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(stRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDeflicker) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(bDeflicker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FgAlpha) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(u32FgAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BgAlpha) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(u32BgAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnKeyColor) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(bEnKeyColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32KeyColor) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(u32KeyColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enMirror) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(enMirror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enRotation) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_ATTR_S),
        "::",
        stringify!(enRotation)
        )
    );
}

impl Default for rkVO_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_CHN_ATTR_S = rkVO_CHN_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_CHN_PARAM_S {
    pub stAspectRatio: ASPECT_RATIO_S,
}

#[test]
fn bindgen_test_layout_rkVO_CHN_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_CHN_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_CHN_PARAM_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVO_CHN_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_CHN_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_CHN_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAspectRatio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_PARAM_S),
        "::",
        stringify!(stAspectRatio)
        )
    );
}

impl Default for rkVO_CHN_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_CHN_PARAM_S = rkVO_CHN_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_BORDER_S {
    pub bBorderEn: RK_BOOL,
    pub stBorder: BORDER_S,
}

#[test]
fn bindgen_test_layout_rkVO_BORDER_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_BORDER_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_BORDER_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVO_BORDER_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_BORDER_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_BORDER_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBorderEn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_BORDER_S),
        "::",
        stringify!(bBorderEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stBorder) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_BORDER_S),
        "::",
        stringify!(stBorder)
        )
    );
}

impl Default for rkVO_BORDER_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_BORDER_S = rkVO_BORDER_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVO_QUERY_STATUS_S {
    pub u32ChnBufUsed: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVO_QUERY_STATUS_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_QUERY_STATUS_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_QUERY_STATUS_S>(),
        4usize,
        concat!("Size of: ", stringify!(rkVO_QUERY_STATUS_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_QUERY_STATUS_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_QUERY_STATUS_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ChnBufUsed) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_QUERY_STATUS_S),
        "::",
        stringify!(u32ChnBufUsed)
        )
    );
}

pub type VO_QUERY_STATUS_S = rkVO_QUERY_STATUS_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_SYNC_INFO_S {
    pub bSynm: RK_BOOL,
    pub bIop: RK_BOOL,
    pub u16Vact: RK_U16,
    pub u16Vbb: RK_U16,
    pub u16Vfb: RK_U16,
    pub u16Hact: RK_U16,
    pub u16Hbb: RK_U16,
    pub u16Hfb: RK_U16,
    pub u16Hmid: RK_U16,
    pub u16Bvact: RK_U16,
    pub u16Bvbb: RK_U16,
    pub u16Bvfb: RK_U16,
    pub u16Hpw: RK_U16,
    pub u16Vpw: RK_U16,
    pub bIdv: RK_BOOL,
    pub bIhs: RK_BOOL,
    pub bIvs: RK_BOOL,
    pub u16FrameRate: RK_U16,
    pub u16PixClock: RK_U16,
}

#[test]
fn bindgen_test_layout_rkVO_SYNC_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_SYNC_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_SYNC_INFO_S>(),
        48usize,
        concat!("Size of: ", stringify!(rkVO_SYNC_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_SYNC_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_SYNC_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSynm) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(bSynm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIop) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(bIop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Vact) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Vact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Vbb) as usize - ptr as usize },
        10usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Vbb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Vfb) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Vfb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Hact) as usize - ptr as usize },
        14usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Hact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Hbb) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Hbb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Hfb) as usize - ptr as usize },
        18usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Hfb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Hmid) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Hmid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Bvact) as usize - ptr as usize },
        22usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Bvact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Bvbb) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Bvbb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Bvfb) as usize - ptr as usize },
        26usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Bvfb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Hpw) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Hpw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16Vpw) as usize - ptr as usize },
        30usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16Vpw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIdv) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(bIdv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIhs) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(bIhs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bIvs) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(bIvs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16FrameRate) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16FrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16PixClock) as usize - ptr as usize },
        46usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_SYNC_INFO_S),
        "::",
        stringify!(u16PixClock)
        )
    );
}

impl Default for rkVO_SYNC_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_SYNC_INFO_S = rkVO_SYNC_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_PUB_ATTR_S {
    pub u32BgColor: RK_U32,
    pub enIntfType: VO_INTF_TYPE_E,
    pub enIntfSync: VO_INTF_SYNC_E,
    pub stSyncInfo: VO_SYNC_INFO_S,
}

#[test]
fn bindgen_test_layout_rkVO_PUB_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_PUB_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_PUB_ATTR_S>(),
        60usize,
        concat!("Size of: ", stringify!(rkVO_PUB_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_PUB_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_PUB_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BgColor) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_PUB_ATTR_S),
        "::",
        stringify!(u32BgColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enIntfType) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_PUB_ATTR_S),
        "::",
        stringify!(enIntfType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enIntfSync) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_PUB_ATTR_S),
        "::",
        stringify!(enIntfSync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stSyncInfo) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_PUB_ATTR_S),
        "::",
        stringify!(stSyncInfo)
        )
    );
}

impl Default for rkVO_PUB_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_PUB_ATTR_S = rkVO_PUB_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_WBC_ATTR_S {
    pub stTargetSize: SIZE_S,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32FrameRate: RK_U32,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enCompressMode: COMPRESS_MODE_E,
}

#[test]
fn bindgen_test_layout_rkVO_WBC_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_WBC_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_WBC_ATTR_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVO_WBC_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_WBC_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_WBC_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stTargetSize) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_WBC_ATTR_S),
        "::",
        stringify!(stTargetSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_WBC_ATTR_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameRate) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_WBC_ATTR_S),
        "::",
        stringify!(u32FrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDynamicRange) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_WBC_ATTR_S),
        "::",
        stringify!(enDynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_WBC_ATTR_S),
        "::",
        stringify!(enCompressMode)
        )
    );
}

impl Default for rkVO_WBC_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_WBC_ATTR_S = rkVO_WBC_ATTR_S;

pub const rkVO_WBC_MODE_E_VO_WBC_MODE_NORMAL: rkVO_WBC_MODE_E = 0;
pub const rkVO_WBC_MODE_E_VO_WBC_MODE_DROP_REPEAT: rkVO_WBC_MODE_E = 1;
pub const rkVO_WBC_MODE_E_VO_WBC_MODE_PROG_TO_INTL: rkVO_WBC_MODE_E = 2;
pub const rkVO_WBC_MODE_E_VO_WBC_MODE_BUTT: rkVO_WBC_MODE_E = 3;

pub type rkVO_WBC_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVO_WBC_MODE_E as VO_WBC_MODE_E;

pub const rkVO_WBC_SOURCE_TYPE_E_VO_WBC_SOURCE_DEV: rkVO_WBC_SOURCE_TYPE_E = 0;
pub const rkVO_WBC_SOURCE_TYPE_E_VO_WBC_SOURCE_VIDEO: rkVO_WBC_SOURCE_TYPE_E = 1;
pub const rkVO_WBC_SOURCE_TYPE_E_VO_WBC_SOURCE_GRAPHIC: rkVO_WBC_SOURCE_TYPE_E = 2;
pub const rkVO_WBC_SOURCE_TYPE_E_VO_WBC_SOURCE_BUTT: rkVO_WBC_SOURCE_TYPE_E = 3;

pub type rkVO_WBC_SOURCE_TYPE_E = ::std::os::raw::c_uint;

pub use self::rkVO_WBC_SOURCE_TYPE_E as VO_WBC_SOURCE_TYPE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_WBC_SOURCE_S {
    pub enSourceType: VO_WBC_SOURCE_TYPE_E,
    pub u32SourceId: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVO_WBC_SOURCE_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_WBC_SOURCE_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_WBC_SOURCE_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVO_WBC_SOURCE_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_WBC_SOURCE_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_WBC_SOURCE_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enSourceType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_WBC_SOURCE_S),
        "::",
        stringify!(enSourceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32SourceId) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_WBC_SOURCE_S),
        "::",
        stringify!(u32SourceId)
        )
    );
}

impl Default for rkVO_WBC_SOURCE_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_WBC_SOURCE_S = rkVO_WBC_SOURCE_S;

pub const rkVO_PART_MODE_E_VO_PART_MODE_SINGLE: rkVO_PART_MODE_E = 0;
pub const rkVO_PART_MODE_E_VO_PART_MODE_MULTI: rkVO_PART_MODE_E = 1;
pub const rkVO_PART_MODE_E_VO_PART_MODE_BUTT: rkVO_PART_MODE_E = 2;

pub type rkVO_PART_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVO_PART_MODE_E as VO_PART_MODE_E;

pub const rkVO_SPLICE_MODE_E_VO_SPLICE_MODE_GPU: rkVO_SPLICE_MODE_E = 0;
pub const rkVO_SPLICE_MODE_E_VO_SPLICE_MODE_RGA: rkVO_SPLICE_MODE_E = 1;

pub type rkVO_SPLICE_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVO_SPLICE_MODE_E as VO_SPLICE_MODE_E;

pub const rkVO_LAYER_MODE_E_VO_LAYER_MODE_CURSOR: rkVO_LAYER_MODE_E = 0;
pub const rkVO_LAYER_MODE_E_VO_LAYER_MODE_GRAPHIC: rkVO_LAYER_MODE_E = 1;
pub const rkVO_LAYER_MODE_E_VO_LAYER_MODE_VIDEO: rkVO_LAYER_MODE_E = 2;
pub const rkVO_LAYER_MODE_E_VO_LAYER_MODE_BUTT: rkVO_LAYER_MODE_E = 3;

pub type rkVO_LAYER_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVO_LAYER_MODE_E as VO_LAYER_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_VIDEO_LAYER_ATTR_S {
    pub stDispRect: RECT_S,
    pub stImageSize: SIZE_S,
    pub u32DispFrmRt: RK_U32,
    pub enPixFormat: PIXEL_FORMAT_E,
    pub bDoubleFrame: RK_BOOL,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enDstDynamicRange: DYNAMIC_RANGE_E,
}

#[test]
fn bindgen_test_layout_rkVO_VIDEO_LAYER_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_VIDEO_LAYER_ATTR_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_VIDEO_LAYER_ATTR_S>(),
        44usize,
        concat!("Size of: ", stringify!(rkVO_VIDEO_LAYER_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_VIDEO_LAYER_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_VIDEO_LAYER_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stDispRect) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_VIDEO_LAYER_ATTR_S),
        "::",
        stringify!(stDispRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stImageSize) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_VIDEO_LAYER_ATTR_S),
        "::",
        stringify!(stImageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32DispFrmRt) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_VIDEO_LAYER_ATTR_S),
        "::",
        stringify!(u32DispFrmRt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixFormat) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_VIDEO_LAYER_ATTR_S),
        "::",
        stringify!(enPixFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDoubleFrame) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_VIDEO_LAYER_ATTR_S),
        "::",
        stringify!(bDoubleFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_VIDEO_LAYER_ATTR_S),
        "::",
        stringify!(enCompressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDstDynamicRange) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_VIDEO_LAYER_ATTR_S),
        "::",
        stringify!(enDstDynamicRange)
        )
    );
}

impl Default for rkVO_VIDEO_LAYER_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_VIDEO_LAYER_ATTR_S = rkVO_VIDEO_LAYER_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_LAYER_PARAM_S {
    pub stAspectRatio: ASPECT_RATIO_S,
}

#[test]
fn bindgen_test_layout_rkVO_LAYER_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_LAYER_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_LAYER_PARAM_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVO_LAYER_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_LAYER_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_LAYER_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAspectRatio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_LAYER_PARAM_S),
        "::",
        stringify!(stAspectRatio)
        )
    );
}

impl Default for rkVO_LAYER_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_LAYER_PARAM_S = rkVO_LAYER_PARAM_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVO_ZOOM_RATIO_S {
    pub u32XRatio: RK_U32,
    pub u32YRatio: RK_U32,
    pub u32WRatio: RK_U32,
    pub u32HRatio: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVO_ZOOM_RATIO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_ZOOM_RATIO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_ZOOM_RATIO_S>(),
        16usize,
        concat!("Size of: ", stringify!(rkVO_ZOOM_RATIO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_ZOOM_RATIO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_ZOOM_RATIO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32XRatio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_ZOOM_RATIO_S),
        "::",
        stringify!(u32XRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32YRatio) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_ZOOM_RATIO_S),
        "::",
        stringify!(u32YRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32WRatio) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_ZOOM_RATIO_S),
        "::",
        stringify!(u32WRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32HRatio) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_ZOOM_RATIO_S),
        "::",
        stringify!(u32HRatio)
        )
    );
}

pub type VO_ZOOM_RATIO_S = rkVO_ZOOM_RATIO_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVO_ZOOM_ATTR_S {
    pub enZoomType: VO_ZOOM_IN_E,
    pub __bindgen_anon_1: rkVO_ZOOM_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVO_ZOOM_ATTR_S__bindgen_ty_1 {
    pub stZoomRect: RECT_S,
    pub stZoomRatio: VO_ZOOM_RATIO_S,
}

#[test]
fn bindgen_test_layout_rkVO_ZOOM_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_ZOOM_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_ZOOM_ATTR_S__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(rkVO_ZOOM_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_ZOOM_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_ZOOM_ATTR_S__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stZoomRect) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_ZOOM_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stZoomRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stZoomRatio) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_ZOOM_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stZoomRatio)
        )
    );
}

impl Default for rkVO_ZOOM_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVO_ZOOM_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_ZOOM_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_ZOOM_ATTR_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVO_ZOOM_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_ZOOM_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_ZOOM_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enZoomType) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_ZOOM_ATTR_S),
        "::",
        stringify!(enZoomType)
        )
    );
}

impl Default for rkVO_ZOOM_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_ZOOM_ATTR_S = rkVO_ZOOM_ATTR_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_CSC_S {
    pub enCscMatrix: VO_CSC_MATRIX_E,
    pub u32Luma: RK_U32,
    pub u32Contrast: RK_U32,
    pub u32Hue: RK_U32,
    pub u32Satuature: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVO_CSC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_CSC_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_CSC_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVO_CSC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_CSC_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_CSC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCscMatrix) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CSC_S),
        "::",
        stringify!(enCscMatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Luma) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CSC_S),
        "::",
        stringify!(u32Luma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Contrast) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CSC_S),
        "::",
        stringify!(u32Contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Hue) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CSC_S),
        "::",
        stringify!(u32Hue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Satuature) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CSC_S),
        "::",
        stringify!(u32Satuature)
        )
    );
}

impl Default for rkVO_CSC_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_CSC_S = rkVO_CSC_S;

#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_REGION_INFO_S {
    pub u32RegionNum: RK_U32,
    pub __bindgen_padding_0: [u32; 3usize],
    pub pstRegion: *mut RECT_S,
}

#[test]
fn bindgen_test_layout_rkVO_REGION_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_REGION_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_REGION_INFO_S>(),
        32usize,
        concat!("Size of: ", stringify!(rkVO_REGION_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_REGION_INFO_S>(),
        16usize,
        concat!("Alignment of ", stringify!(rkVO_REGION_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32RegionNum) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_REGION_INFO_S),
        "::",
        stringify!(u32RegionNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pstRegion) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_REGION_INFO_S),
        "::",
        stringify!(pstRegion)
        )
    );
}

impl Default for rkVO_REGION_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_REGION_INFO_S = rkVO_REGION_INFO_S;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVO_LAYER_BOUNDARY_S {
    pub u32Width: RK_U32,
    pub u32Color: [RK_U32; 2usize],
}

#[test]
fn bindgen_test_layout_rkVO_LAYER_BOUNDARY_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_LAYER_BOUNDARY_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_LAYER_BOUNDARY_S>(),
        12usize,
        concat!("Size of: ", stringify!(rkVO_LAYER_BOUNDARY_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_LAYER_BOUNDARY_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_LAYER_BOUNDARY_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_LAYER_BOUNDARY_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Color) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_LAYER_BOUNDARY_S),
        "::",
        stringify!(u32Color)
        )
    );
}

pub type VO_LAYER_BOUNDARY_S = rkVO_LAYER_BOUNDARY_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_CHN_BOUNDARY_S {
    pub bBoundaryEn: RK_BOOL,
    pub u32ColorIndex: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVO_CHN_BOUNDARY_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_CHN_BOUNDARY_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_CHN_BOUNDARY_S>(),
        8usize,
        concat!("Size of: ", stringify!(rkVO_CHN_BOUNDARY_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_CHN_BOUNDARY_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_CHN_BOUNDARY_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bBoundaryEn) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_BOUNDARY_S),
        "::",
        stringify!(bBoundaryEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32ColorIndex) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_CHN_BOUNDARY_S),
        "::",
        stringify!(u32ColorIndex)
        )
    );
}

impl Default for rkVO_CHN_BOUNDARY_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_CHN_BOUNDARY_S = rkVO_CHN_BOUNDARY_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_MOD_PARAM_S {
    pub bTransparentTransmit: RK_BOOL,
    pub bExitDev: RK_BOOL,
    pub bWbcBgBlackEn: RK_BOOL,
    pub bDevClkExtEn: RK_BOOL,
    pub bSaveBufMode: [RK_BOOL; 1usize],
}

#[test]
fn bindgen_test_layout_rkVO_MOD_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_MOD_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_MOD_PARAM_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVO_MOD_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_MOD_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_MOD_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bTransparentTransmit) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_MOD_PARAM_S),
        "::",
        stringify!(bTransparentTransmit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bExitDev) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_MOD_PARAM_S),
        "::",
        stringify!(bExitDev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bWbcBgBlackEn) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_MOD_PARAM_S),
        "::",
        stringify!(bWbcBgBlackEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bDevClkExtEn) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_MOD_PARAM_S),
        "::",
        stringify!(bDevClkExtEn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSaveBufMode) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_MOD_PARAM_S),
        "::",
        stringify!(bSaveBufMode)
        )
    );
}

impl Default for rkVO_MOD_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_MOD_PARAM_S = rkVO_MOD_PARAM_S;

pub const rkVO_CLK_SOURCE_E_VO_CLK_SOURCE_PLL: rkVO_CLK_SOURCE_E = 0;
pub const rkVO_CLK_SOURCE_E_VO_CLK_SOURCE_LCDMCLK: rkVO_CLK_SOURCE_E = 1;
pub const rkVO_CLK_SOURCE_E_VO_CLK_SOURCE_BUTT: rkVO_CLK_SOURCE_E = 2;

pub type rkVO_CLK_SOURCE_E = ::std::os::raw::c_uint;

pub use self::rkVO_CLK_SOURCE_E as VO_CLK_SOURCE_E;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rkVO_USER_INTFSYNC_PLL_S {
    pub u32Fbdiv: RK_U32,
    pub u32Frac: RK_U32,
    pub u32Refdiv: RK_U32,
    pub u32Postdiv1: RK_U32,
    pub u32Postdiv2: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVO_USER_INTFSYNC_PLL_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_USER_INTFSYNC_PLL_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_USER_INTFSYNC_PLL_S>(),
        20usize,
        concat!("Size of: ", stringify!(rkVO_USER_INTFSYNC_PLL_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_USER_INTFSYNC_PLL_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_USER_INTFSYNC_PLL_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Fbdiv) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_PLL_S),
        "::",
        stringify!(u32Fbdiv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Frac) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_PLL_S),
        "::",
        stringify!(u32Frac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Refdiv) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_PLL_S),
        "::",
        stringify!(u32Refdiv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Postdiv1) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_PLL_S),
        "::",
        stringify!(u32Postdiv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Postdiv2) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_PLL_S),
        "::",
        stringify!(u32Postdiv2)
        )
    );
}

pub type VO_USER_INTFSYNC_PLL_S = rkVO_USER_INTFSYNC_PLL_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVO_USER_INTFSYNC_ATTR_S {
    pub enClkSource: VO_CLK_SOURCE_E,
    pub __bindgen_anon_1: rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1 {
    pub stUserSyncPll: VO_USER_INTFSYNC_PLL_S,
    pub u32LcdMClkDiv: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1>(),
        20usize,
        concat!(
        "Size of: ",
        stringify!(rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stUserSyncPll) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(stUserSyncPll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32LcdMClkDiv) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1),
        "::",
        stringify!(u32LcdMClkDiv)
        )
    );
}

impl Default for rkVO_USER_INTFSYNC_ATTR_S__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_rkVO_USER_INTFSYNC_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_USER_INTFSYNC_ATTR_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_USER_INTFSYNC_ATTR_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVO_USER_INTFSYNC_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_USER_INTFSYNC_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_USER_INTFSYNC_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enClkSource) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_ATTR_S),
        "::",
        stringify!(enClkSource)
        )
    );
}

impl Default for rkVO_USER_INTFSYNC_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_USER_INTFSYNC_ATTR_S = rkVO_USER_INTFSYNC_ATTR_S;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct rkVO_USER_INTFSYNC_INFO_S {
    pub stUserIntfSyncAttr: VO_USER_INTFSYNC_ATTR_S,
    pub u32PreDiv: RK_U32,
    pub u32DevDiv: RK_U32,
    pub bClkReverse: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rkVO_USER_INTFSYNC_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_USER_INTFSYNC_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_USER_INTFSYNC_INFO_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkVO_USER_INTFSYNC_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_USER_INTFSYNC_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_USER_INTFSYNC_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stUserIntfSyncAttr) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_INFO_S),
        "::",
        stringify!(stUserIntfSyncAttr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32PreDiv) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_INFO_S),
        "::",
        stringify!(u32PreDiv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32DevDiv) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_INFO_S),
        "::",
        stringify!(u32DevDiv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bClkReverse) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_USER_INTFSYNC_INFO_S),
        "::",
        stringify!(bClkReverse)
        )
    );
}

impl Default for rkVO_USER_INTFSYNC_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_USER_INTFSYNC_INFO_S = rkVO_USER_INTFSYNC_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVO_GFX_FRAME_INFO_S {
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
    pub u32VirWidth: RK_U32,
    pub u32VirHeight: RK_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32FgAlpha: RK_U32,
    pub u32BgAlpha: RK_U32,
    pub pData: *mut ::std::os::raw::c_void,
    pub u32Size: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVO_GFX_FRAME_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVO_GFX_FRAME_INFO_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVO_GFX_FRAME_INFO_S>(),
        36usize,
        concat!("Size of: ", stringify!(rkVO_GFX_FRAME_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVO_GFX_FRAME_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVO_GFX_FRAME_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(u32Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirWidth) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(u32VirWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32VirHeight) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(u32VirHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FgAlpha) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(u32FgAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32BgAlpha) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(u32BgAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(pData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Size) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVO_GFX_FRAME_INFO_S),
        "::",
        stringify!(u32Size)
        )
    );
}

impl Default for rkVO_GFX_FRAME_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_FRAME_INFO_S = rkVO_GFX_FRAME_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rk_VO_EDID_S {
    pub bEdidValid: RK_BOOL,
    pub u32Edidlength: RK_U32,
    pub u8Edid: [RK_U8; 512usize],
}

#[test]
fn bindgen_test_layout_rk_VO_EDID_S() {
    const UNINIT: ::std::mem::MaybeUninit<rk_VO_EDID_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rk_VO_EDID_S>(),
        520usize,
        concat!("Size of: ", stringify!(rk_VO_EDID_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rk_VO_EDID_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rk_VO_EDID_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEdidValid) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_EDID_S),
        "::",
        stringify!(bEdidValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Edidlength) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_EDID_S),
        "::",
        stringify!(u32Edidlength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8Edid) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_EDID_S),
        "::",
        stringify!(u8Edid)
        )
    );
}

impl Default for rk_VO_EDID_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_EDID_S = rk_VO_EDID_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rk_VO_SINK_CAPABILITY_S {
    pub bConnected: RK_BOOL,
    pub bSupportYCbCr: RK_BOOL,
    pub bSupportHDMI: RK_BOOL,
}

#[test]
fn bindgen_test_layout_rk_VO_SINK_CAPABILITY_S() {
    const UNINIT: ::std::mem::MaybeUninit<rk_VO_SINK_CAPABILITY_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rk_VO_SINK_CAPABILITY_S>(),
        12usize,
        concat!("Size of: ", stringify!(rk_VO_SINK_CAPABILITY_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rk_VO_SINK_CAPABILITY_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rk_VO_SINK_CAPABILITY_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bConnected) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_SINK_CAPABILITY_S),
        "::",
        stringify!(bConnected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSupportYCbCr) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_SINK_CAPABILITY_S),
        "::",
        stringify!(bSupportYCbCr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bSupportHDMI) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_SINK_CAPABILITY_S),
        "::",
        stringify!(bSupportHDMI)
        )
    );
}

impl Default for rk_VO_SINK_CAPABILITY_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_SINK_CAPABILITY_S = rk_VO_SINK_CAPABILITY_S;
#[doc = " hpd event handling callback function"]
pub type RK_VO_CallBack =
::std::option::Option<unsafe extern "C" fn(pPrivateData: *mut ::std::os::raw::c_void)>;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rk_VO_CALLBACK_FUNC_S {
    pub pfnEventCallback: RK_VO_CallBack,
    pub pPrivateData: *mut ::std::os::raw::c_void,
}

#[test]
fn bindgen_test_layout_rk_VO_CALLBACK_FUNC_S() {
    const UNINIT: ::std::mem::MaybeUninit<rk_VO_CALLBACK_FUNC_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rk_VO_CALLBACK_FUNC_S>(),
        8usize,
        concat!("Size of: ", stringify!(rk_VO_CALLBACK_FUNC_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rk_VO_CALLBACK_FUNC_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rk_VO_CALLBACK_FUNC_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnEventCallback) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_CALLBACK_FUNC_S),
        "::",
        stringify!(pfnEventCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrivateData) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_CALLBACK_FUNC_S),
        "::",
        stringify!(pPrivateData)
        )
    );
}

impl Default for rk_VO_CALLBACK_FUNC_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type RK_VO_CALLBACK_FUNC_S = rk_VO_CALLBACK_FUNC_S;

pub const rkVO_GFX_MODE_E_VO_MODE_NORMAL: rkVO_GFX_MODE_E = 0;
pub const rkVO_GFX_MODE_E_VO_MODE_GFX_PRE_CREATED: rkVO_GFX_MODE_E = 1;

pub type rkVO_GFX_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVO_GFX_MODE_E as VO_GFX_MODE_E;

pub const rkVO_HDMI_MODE_E_VO_HDMI_MODE_AUTO: rkVO_HDMI_MODE_E = 0;
pub const rkVO_HDMI_MODE_E_VO_HDMI_MODE_HDMI: rkVO_HDMI_MODE_E = 1;
pub const rkVO_HDMI_MODE_E_VO_HDMI_MODE_DVI: rkVO_HDMI_MODE_E = 2;

pub type rkVO_HDMI_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVO_HDMI_MODE_E as VO_HDMI_MODE_E;

pub const rkVO_HDMI_COLOR_FMT_E_VO_HDMI_COLOR_FORMAT_RGB: rkVO_HDMI_COLOR_FMT_E = 0;
pub const rkVO_HDMI_COLOR_FMT_E_VO_HDMI_COLOR_FORMAT_YCBCR444: rkVO_HDMI_COLOR_FMT_E = 1;
pub const rkVO_HDMI_COLOR_FMT_E_VO_HDMI_COLOR_FORMAT_YCBCR422: rkVO_HDMI_COLOR_FMT_E = 2;
pub const rkVO_HDMI_COLOR_FMT_E_VO_HDMI_COLOR_FORMAT_YCBCR420: rkVO_HDMI_COLOR_FMT_E = 3;
pub const rkVO_HDMI_COLOR_FMT_E_VO_HDMI_COLOR_FORMT_AUTO: rkVO_HDMI_COLOR_FMT_E = 4;
pub const rkVO_HDMI_COLOR_FMT_E_VO_HDMI_COLOR_FORMAT_BUTT: rkVO_HDMI_COLOR_FMT_E = 5;

pub type rkVO_HDMI_COLOR_FMT_E = ::std::os::raw::c_uint;

pub use self::rkVO_HDMI_COLOR_FMT_E as VO_HDMI_COLOR_FMT_E;

pub const rkVO_HDMI_QUANT_RANGE_E_VO_HDMI_QUANT_RANGE_AUTO: rkVO_HDMI_QUANT_RANGE_E = 0;
pub const rkVO_HDMI_QUANT_RANGE_E_VO_HDMI_QUANT_RANGE_LIMITED: rkVO_HDMI_QUANT_RANGE_E = 1;
pub const rkVO_HDMI_QUANT_RANGE_E_VO_HDMI_QUANT_RANGE_FULL: rkVO_HDMI_QUANT_RANGE_E = 2;
pub const rkVO_HDMI_QUANT_RANGE_E_VO_HDMI_QUANT_RANGE_BUTT: rkVO_HDMI_QUANT_RANGE_E = 3;

pub type rkVO_HDMI_QUANT_RANGE_E = ::std::os::raw::c_uint;

pub use self::rkVO_HDMI_QUANT_RANGE_E as VO_HDMI_QUANT_RANGE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rk_VO_HDMI_PARAM_S {
    pub enHdmiMode: VO_HDMI_MODE_E,
    pub enColorFmt: VO_HDMI_COLOR_FMT_E,
    pub enQuantRange: VO_HDMI_QUANT_RANGE_E,
}

#[test]
fn bindgen_test_layout_rk_VO_HDMI_PARAM_S() {
    const UNINIT: ::std::mem::MaybeUninit<rk_VO_HDMI_PARAM_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rk_VO_HDMI_PARAM_S>(),
        12usize,
        concat!("Size of: ", stringify!(rk_VO_HDMI_PARAM_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rk_VO_HDMI_PARAM_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rk_VO_HDMI_PARAM_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enHdmiMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_HDMI_PARAM_S),
        "::",
        stringify!(enHdmiMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enColorFmt) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_HDMI_PARAM_S),
        "::",
        stringify!(enColorFmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enQuantRange) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rk_VO_HDMI_PARAM_S),
        "::",
        stringify!(enQuantRange)
        )
    );
}

impl Default for rk_VO_HDMI_PARAM_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VO_HDMI_PARAM_S = rk_VO_HDMI_PARAM_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVPSS_GRP_ATTR_S {
    pub u32MaxW: RK_U32,
    pub u32MaxH: RK_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub stFrameRate: FRAME_RATE_CTRL_S,
    pub enCompressMode: COMPRESS_MODE_E,
}

#[test]
fn bindgen_test_layout_rkVPSS_GRP_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVPSS_GRP_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVPSS_GRP_ATTR_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkVPSS_GRP_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVPSS_GRP_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVPSS_GRP_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxW) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_GRP_ATTR_S),
        "::",
        stringify!(u32MaxW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32MaxH) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_GRP_ATTR_S),
        "::",
        stringify!(u32MaxH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_GRP_ATTR_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDynamicRange) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_GRP_ATTR_S),
        "::",
        stringify!(enDynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stFrameRate) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_GRP_ATTR_S),
        "::",
        stringify!(stFrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_GRP_ATTR_S),
        "::",
        stringify!(enCompressMode)
        )
    );
}

impl Default for rkVPSS_GRP_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VPSS_GRP_ATTR_S = rkVPSS_GRP_ATTR_S;

pub const rkVPSS_CHN_MODE_E_VPSS_CHN_MODE_USER: rkVPSS_CHN_MODE_E = 0;
pub const rkVPSS_CHN_MODE_E_VPSS_CHN_MODE_AUTO: rkVPSS_CHN_MODE_E = 1;
pub const rkVPSS_CHN_MODE_E_VPSS_CHN_MODE_PASSTHROUGH: rkVPSS_CHN_MODE_E = 2;
pub const rkVPSS_CHN_MODE_E_VPSS_CHN_MODE_BUTT: rkVPSS_CHN_MODE_E = 3;

pub type rkVPSS_CHN_MODE_E = ::std::os::raw::c_uint;

pub use self::rkVPSS_CHN_MODE_E as VPSS_CHN_MODE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVPSS_CHN_ATTR_S {
    pub enChnMode: VPSS_CHN_MODE_E,
    pub u32Width: RK_U32,
    pub u32Height: RK_U32,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub stFrameRate: FRAME_RATE_CTRL_S,
    pub bMirror: RK_BOOL,
    pub bFlip: RK_BOOL,
    pub u32Depth: RK_U32,
    pub stAspectRatio: ASPECT_RATIO_S,
    pub u32FrameBufCnt: RK_U32,
}

#[test]
fn bindgen_test_layout_rkVPSS_CHN_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVPSS_CHN_ATTR_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVPSS_CHN_ATTR_S>(),
        76usize,
        concat!("Size of: ", stringify!(rkVPSS_CHN_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVPSS_CHN_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVPSS_CHN_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enChnMode) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(enChnMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Width) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(u32Width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Height) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(u32Height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enVideoFormat) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(enVideoFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enPixelFormat) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(enPixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enDynamicRange) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(enDynamicRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCompressMode) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(enCompressMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stFrameRate) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(stFrameRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMirror) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(bMirror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFlip) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(bFlip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32Depth) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(u32Depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stAspectRatio) as usize - ptr as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(stAspectRatio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32FrameBufCnt) as usize - ptr as usize },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CHN_ATTR_S),
        "::",
        stringify!(u32FrameBufCnt)
        )
    );
}

impl Default for rkVPSS_CHN_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VPSS_CHN_ATTR_S = rkVPSS_CHN_ATTR_S;

pub const rkVPSS_CROP_COORDINATE_E_VPSS_CROP_RATIO_COOR: rkVPSS_CROP_COORDINATE_E = 0;
pub const rkVPSS_CROP_COORDINATE_E_VPSS_CROP_ABS_COOR: rkVPSS_CROP_COORDINATE_E = 1;

pub type rkVPSS_CROP_COORDINATE_E = ::std::os::raw::c_uint;

pub use self::rkVPSS_CROP_COORDINATE_E as VPSS_CROP_COORDINATE_E;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVPSS_CROP_INFO_S {
    pub bEnable: RK_BOOL,
    pub enCropCoordinate: VPSS_CROP_COORDINATE_E,
    pub stCropRect: RECT_S,
}

#[test]
fn bindgen_test_layout_rkVPSS_CROP_INFO_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVPSS_CROP_INFO_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVPSS_CROP_INFO_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkVPSS_CROP_INFO_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVPSS_CROP_INFO_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVPSS_CROP_INFO_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CROP_INFO_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enCropCoordinate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CROP_INFO_S),
        "::",
        stringify!(enCropCoordinate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stCropRect) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_CROP_INFO_S),
        "::",
        stringify!(stCropRect)
        )
    );
}

impl Default for rkVPSS_CROP_INFO_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VPSS_CROP_INFO_S = rkVPSS_CROP_INFO_S;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkVPSS_ROTATION_EX_ATTR_S {
    pub bEnable: RK_BOOL,
    pub stRotationEx: ROTATION_EX_S,
}

#[test]
fn bindgen_test_layout_rkVPSS_ROTATION_EX_ATTR_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkVPSS_ROTATION_EX_ATTR_S> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkVPSS_ROTATION_EX_ATTR_S>(),
        28usize,
        concat!("Size of: ", stringify!(rkVPSS_ROTATION_EX_ATTR_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkVPSS_ROTATION_EX_ATTR_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkVPSS_ROTATION_EX_ATTR_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bEnable) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_ROTATION_EX_ATTR_S),
        "::",
        stringify!(bEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stRotationEx) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkVPSS_ROTATION_EX_ATTR_S),
        "::",
        stringify!(stRotationEx)
        )
    );
}

impl Default for rkVPSS_ROTATION_EX_ATTR_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type VPSS_ROTATION_EX_ATTR_S = rkVPSS_ROTATION_EX_ATTR_S;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __quad_t = ::std::os::raw::c_longlong;
pub type __u_quad_t = ::std::os::raw::c_ulonglong;
pub type __dev_t = __u_quad_t;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = __u_quad_t;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = __quad_t;
pub type __pid_t = ::std::os::raw::c_int;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}

#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__fsid_t),
        "::",
        stringify!(__val)
        )
    );
}

pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = __u_quad_t;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __swblk_t = ::std::os::raw::c_long;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = __quad_t;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = __u_quad_t;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = __u_quad_t;
pub type __ssize_t = ::std::os::raw::c_int;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __t_scalar_t = ::std::os::raw::c_long;
pub type __t_uscalar_t = ::std::os::raw::c_ulong;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = __STDIO_FILE_STRUCT;
pub type __FILE = __STDIO_FILE_STRUCT;
pub type wint_t = ::std::os::raw::c_uint;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mbstate_t {
    pub __mask: u32,
    pub __wc: u32,
}

#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__mbstate_t),
        "::",
        stringify!(__mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wc) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(__mbstate_t),
        "::",
        stringify!(__wc)
        )
    );
}

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __STDIO_fpos_t {
    pub __pos: __off_t,
    pub __mbstate: __mbstate_t,
    pub __mblen_pending: ::std::os::raw::c_int,
}

#[test]
fn bindgen_test_layout___STDIO_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<__STDIO_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__STDIO_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(__STDIO_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__STDIO_fpos_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__STDIO_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_fpos_t),
        "::",
        stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_fpos_t),
        "::",
        stringify!(__mbstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mblen_pending) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_fpos_t),
        "::",
        stringify!(__mblen_pending)
        )
    );
}

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __STDIO_fpos64_t {
    pub __pos: __off64_t,
    pub __mbstate: __mbstate_t,
    pub __mblen_pending: ::std::os::raw::c_int,
}

#[test]
fn bindgen_test_layout___STDIO_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<__STDIO_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__STDIO_fpos64_t>(),
        24usize,
        concat!("Size of: ", stringify!(__STDIO_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__STDIO_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__STDIO_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_fpos64_t),
        "::",
        stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_fpos64_t),
        "::",
        stringify!(__mbstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mblen_pending) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_fpos64_t),
        "::",
        stringify!(__mblen_pending)
        )
    );
}

pub type __offmax_t = __off64_t;
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __bufsize: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __bufsize: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __offmax_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: __io_read_fn,
    pub write: __io_write_fn,
    pub seek: __io_seek_fn,
    pub close: __io_close_fn,
}

#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        16usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_cookie_io_functions_t),
        "::",
        stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_cookie_io_functions_t),
        "::",
        stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_cookie_io_functions_t),
        "::",
        stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(_IO_cookie_io_functions_t),
        "::",
        stringify!(close)
        )
    );
}

pub type cookie_read_function_t = __io_read_fn;
pub type cookie_write_function_t = __io_write_fn;
pub type cookie_seek_function_t = __io_seek_fn;
pub type cookie_close_function_t = __io_close_fn;
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type pthread_t = ::std::os::raw::c_ulong;

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 36usize],
    pub __align: ::std::os::raw::c_long,
}

#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        36usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_attr_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_attr_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}

#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        4usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__pthread_internal_slist),
        "::",
        stringify!(__next)
        )
    );
}

impl Default for __pthread_internal_slist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type __pthread_slist_t = __pthread_internal_slist;

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 24usize],
    pub __align: ::std::os::raw::c_long,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __kind: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: pthread_mutex_t___pthread_mutex_s__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 {
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_slist_t,
}

#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>(),
        4usize,
        concat!(
        "Size of: ",
        stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1),
        "::",
        stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1),
        "::",
        stringify!(__list)
        )
    );
}

impl Default for pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t___pthread_mutex_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        4usize,
        concat!(
        "Alignment of ",
        stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t___pthread_mutex_s),
        "::",
        stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t___pthread_mutex_s),
        "::",
        stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t___pthread_mutex_s),
        "::",
        stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t___pthread_mutex_s),
        "::",
        stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t___pthread_mutex_s),
        "::",
        stringify!(__nusers)
        )
    );
}

impl Default for pthread_mutex_t___pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t),
        "::",
        stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutex_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_long,
}

#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutexattr_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_mutexattr_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}

#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t__bindgen_ty_1),
        "::",
        stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__futex) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t__bindgen_ty_1),
        "::",
        stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__total_seq) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t__bindgen_ty_1),
        "::",
        stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wakeup_seq) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t__bindgen_ty_1),
        "::",
        stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__woken_seq) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t__bindgen_ty_1),
        "::",
        stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mutex) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t__bindgen_ty_1),
        "::",
        stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nwaiters) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t__bindgen_ty_1),
        "::",
        stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__broadcast_seq) as usize - ptr as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t__bindgen_ty_1),
        "::",
        stringify!(__broadcast_seq)
        )
    );
}

impl Default for pthread_cond_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t),
        "::",
        stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_cond_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_long,
}

#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_condattr_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_condattr_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_condattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __flags: ::std::os::raw::c_uchar,
    pub __shared: ::std::os::raw::c_uchar,
    pub __pad1: ::std::os::raw::c_uchar,
    pub __pad2: ::std::os::raw::c_uchar,
    pub __writer: ::std::os::raw::c_int,
}

#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nr_readers) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers_wakeup) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writer_wakeup) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nr_readers_queued) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nr_writers_queued) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        25usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        26usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        27usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writer) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t__bindgen_ty_1),
        "::",
        stringify!(__writer)
        )
    );
}

#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t),
        "::",
        stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlock_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}

#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlockattr_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_rwlockattr_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type pthread_spinlock_t = ::std::os::raw::c_int;

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 20usize],
    pub __align: ::std::os::raw::c_long,
}

#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        20usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_barrier_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_barrier_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}

#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_barrierattr_t),
        "::",
        stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(pthread_barrierattr_t),
        "::",
        stringify!(__align)
        )
    );
}

impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct __STDIO_FILE_STRUCT {
    pub __modeflags: ::std::os::raw::c_ushort,
    pub __ungot_width: [::std::os::raw::c_uchar; 2usize],
    pub __filedes: ::std::os::raw::c_int,
    pub __bufstart: *mut ::std::os::raw::c_uchar,
    pub __bufend: *mut ::std::os::raw::c_uchar,
    pub __bufpos: *mut ::std::os::raw::c_uchar,
    pub __bufread: *mut ::std::os::raw::c_uchar,
    pub __bufgetc_u: *mut ::std::os::raw::c_uchar,
    pub __bufputc_u: *mut ::std::os::raw::c_uchar,
    pub __nextopen: *mut __STDIO_FILE_STRUCT,
    pub __ungot: [u32; 2usize],
    pub __state: __mbstate_t,
    pub __user_locking: ::std::os::raw::c_int,
    pub __lock: pthread_mutex_t,
}

#[test]
fn bindgen_test_layout___STDIO_FILE_STRUCT() {
    const UNINIT: ::std::mem::MaybeUninit<__STDIO_FILE_STRUCT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__STDIO_FILE_STRUCT>(),
        80usize,
        concat!("Size of: ", stringify!(__STDIO_FILE_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<__STDIO_FILE_STRUCT>(),
        4usize,
        concat!("Alignment of ", stringify!(__STDIO_FILE_STRUCT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__modeflags) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__modeflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ungot_width) as usize - ptr as usize },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__ungot_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__filedes) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__filedes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bufstart) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__bufstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bufend) as usize - ptr as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__bufend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bufpos) as usize - ptr as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__bufpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bufread) as usize - ptr as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__bufread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bufgetc_u) as usize - ptr as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__bufgetc_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bufputc_u) as usize - ptr as usize },
        28usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__bufputc_u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nextopen) as usize - ptr as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__nextopen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ungot) as usize - ptr as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__ungot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__user_locking) as usize - ptr as usize },
        52usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__user_locking)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(__STDIO_FILE_STRUCT),
        "::",
        stringify!(__lock)
        )
    );
}

impl Default for __STDIO_FILE_STRUCT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

extern "C" {
    pub fn __fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn __fputc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub static mut __stdin: *mut FILE;
}

extern "C" {
    pub static mut __stdout: *mut FILE;
}

pub type __gnuc_va_list = u32;
pub type fpos_t = __STDIO_fpos_t;
pub type fpos64_t = __STDIO_fpos64_t;

extern "C" {
    pub static mut stdin: *mut FILE;
}

extern "C" {
    pub static mut stdout: *mut FILE;
}

extern "C" {
    pub static mut stderr: *mut FILE;
}

extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn tmpfile() -> *mut FILE;
}

extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}

extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}

extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}

extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}

extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}

extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}

extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}

extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}

extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
                  -> *mut FILE;
}

extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: _IO_cookie_io_functions_t,
    ) -> *mut FILE;
}

extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}

extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}

extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}

extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}

extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}

extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
                          -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}

extern "C" {
    pub fn gets(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}

extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}

extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}

extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}

extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}

extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}

extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}

extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}

extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}

extern "C" {
    pub fn rewind(__stream: *mut FILE);
}

extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}

extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}

extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}

extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}

extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}

extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}

extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}

extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}

extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}

extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}

pub type va_list = __gnuc_va_list;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rkLOG_LEVEL_CONF_S {
    pub enModId: MOD_ID_E,
    pub s32Level: RK_S32,
    pub cModName: [RK_CHAR; 16usize],
}

#[test]
fn bindgen_test_layout_rkLOG_LEVEL_CONF_S() {
    const UNINIT: ::std::mem::MaybeUninit<rkLOG_LEVEL_CONF_S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rkLOG_LEVEL_CONF_S>(),
        24usize,
        concat!("Size of: ", stringify!(rkLOG_LEVEL_CONF_S))
    );
    assert_eq!(
        ::std::mem::align_of::<rkLOG_LEVEL_CONF_S>(),
        4usize,
        concat!("Alignment of ", stringify!(rkLOG_LEVEL_CONF_S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enModId) as usize - ptr as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLOG_LEVEL_CONF_S),
        "::",
        stringify!(enModId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32Level) as usize - ptr as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLOG_LEVEL_CONF_S),
        "::",
        stringify!(s32Level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cModName) as usize - ptr as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(rkLOG_LEVEL_CONF_S),
        "::",
        stringify!(cModName)
        )
    );
}

impl Default for rkLOG_LEVEL_CONF_S {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type LOG_LEVEL_CONF_S = rkLOG_LEVEL_CONF_S;

extern "C" {
    pub fn RK_LOG(
        level: RK_S32,
        modId: RK_S32,
        fmt: *const ::std::os::raw::c_char,
        fname: *const ::std::os::raw::c_char,
        row: RK_U32,
        ...
    );
}

extern "C" {
    pub fn RK_MPI_ADEC_CreateChn(AdChn: ADEC_CHN, pstAttr: *const ADEC_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_DestroyChn(AdChn: ADEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_SendStream(
        AdChn: ADEC_CHN,
        pstStream: *const AUDIO_STREAM_S,
        bBlock: RK_BOOL,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_ClearChnBuf(AdChn: ADEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_GetFrame(
        AdChn: ADEC_CHN,
        pstFrmInfo: *mut AUDIO_FRAME_INFO_S,
        bBlock: RK_BOOL,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_ReleaseFrame(AdChn: ADEC_CHN, pstFrmInfo: *mut AUDIO_FRAME_INFO_S)
                                    -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_SendEndOfStream(AdChn: ADEC_CHN, bInstant: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_QueryChnStat(
        AdChn: ADEC_CHN,
        pstBufferStatus: *mut ADEC_CHN_STATE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_RegisterDecoder(
        ps32Handle: *mut RK_S32,
        pstDecoder: *const ADEC_DECODER_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_ADEC_UnRegisterDecoder(s32Handle: RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_CreateChn(AeChn: AENC_CHN, pstAttr: *const AENC_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_DestroyChn(AeChn: AENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_SendFrame(
        AeChn: AENC_CHN,
        pstFrm: *const AUDIO_FRAME_S,
        pstAecFrm: *const AEC_FRAME_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_GetStream(
        AeChn: AENC_CHN,
        pstStream: *mut AUDIO_STREAM_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_ReleaseStream(AeChn: AENC_CHN, pstStream: *const AUDIO_STREAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_SetMute(AeChn: AENC_CHN, pstMuteFlag: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_SaveFile(
        AeChn: AENC_CHN,
        pstSaveFileInfo: *const AUDIO_SAVE_FILE_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_QueryFileStatus(
        AeChn: AENC_CHN,
        pstFileStatus: *mut AUDIO_FILE_STATUS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_RegisterEncoder(
        ps32Handle: *mut RK_S32,
        pstEncoder: *const AENC_ENCODER_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_UnRegisterEncoder(s32Handle: RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AENC_GetFd(AeChn: AENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AF_Create(AfChn: AF_CHN, pstAttr: *const AF_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AF_Destroy(AfChn: AF_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AF_SendFrame(
        AfChn: AF_CHN,
        frame: *mut AUDIO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AF_GetFrame(
        AfChn: AF_CHN,
        frame: *mut AUDIO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AF_ReleaseFrame(AfChn: AF_CHN, frame: *mut AUDIO_FRAME_INFO_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AF_SetChnAttr(AfChn: AF_CHN, pstAttr: *const AF_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AF_GetChnAttr(AfChn: AF_CHN, pstAttr: *mut AF_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetPubAttr(AiDevId: AUDIO_DEV, pstAttr: *const AIO_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetPubAttr(AiDevId: AUDIO_DEV, pstAttr: *mut AIO_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_Enable(AiDevId: AUDIO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_Disable(AiDevId: AUDIO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_EnableChn(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_DisableChn(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_EnableDataRead(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_DisableDataRead(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SendFrame(
        AiDevId: AUDIO_DEV,
        AiChn: AO_CHN,
        pstFrm: *const AUDIO_FRAME_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetFrame(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstFrm: *mut AUDIO_FRAME_S,
        pstAecFrm: *mut AEC_FRAME_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_ReleaseFrame(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstFrm: *const AUDIO_FRAME_S,
        pstAecFrm: *const AEC_FRAME_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetChnParam(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstChnParam: *const AI_CHN_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetChnParam(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstChnParam: *mut AI_CHN_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_EnableReSmp(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        enOutSampleRate: AUDIO_SAMPLE_RATE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_DisableReSmp(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetTrackMode(AiDevId: AUDIO_DEV, enTrackMode: AUDIO_TRACK_MODE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetTrackMode(
        AiDevId: AUDIO_DEV,
        penTrackMode: *mut AUDIO_TRACK_MODE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetVolumeCurve(
        AiDevId: AUDIO_DEV,
        pvolumeCurve: *mut AUDIO_VOLUME_CURVE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetVolume(AiDevId: AUDIO_DEV, s32VolumeDb: RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetVolume(AiDevId: AUDIO_DEV, ps32VolumeDb: *mut RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetMute(
        AiDevId: AUDIO_DEV,
        bEnable: RK_BOOL,
        pstFade: *const AUDIO_FADE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetMute(
        AiDevId: AUDIO_DEV,
        pbEnable: *mut RK_BOOL,
        pstFade: *mut AUDIO_FADE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetChnAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstAttrs: *const AI_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetChnAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstAttrs: *mut AI_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_ClrPubAttr(AiDevId: AUDIO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SaveFile(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstSaveFileInfo: *const AUDIO_SAVE_FILE_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_QueryFileStatus(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstFileStatus: *mut AUDIO_FILE_STATUS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetFd(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetVqeAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstVqeConfig: *const AI_VQE_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetVqeAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstVqeConfig: *mut AI_VQE_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_EnableVqe(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_DisableVqe(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetAedAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstAedConfig: *const AI_AED_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetAedAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstAedConfig: *mut AI_AED_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_EnableAed(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_DisableAed(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetAedResult(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstAedResult: *mut AI_AED_RESULT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetBcdAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstBcdConfig: *const AI_BCD_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetBcdAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstBcdConfig: *mut AI_BCD_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_EnableBcd(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_DisableBcd(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetBcdResult(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstBcdResult: *mut AI_BCD_RESULT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetBuzAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstBuzConfig: *const AI_BUZ_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetBuzAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstBuzConfig: *mut AI_BUZ_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_EnableBuz(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_DisableBuz(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetBuzResult(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstBuzResult: *mut AI_BUZ_RESULT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_SetGbsAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstGbsConfig: *const AI_GBS_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetGbsAttr(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstGbsConfig: *mut AI_GBS_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_EnableGbs(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_DisableGbs(AiDevId: AUDIO_DEV, AiChn: AI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AI_GetGbsResult(
        AiDevId: AUDIO_DEV,
        AiChn: AI_CHN,
        pstGbsResult: *mut AI_GBS_RESULT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AMIX_ListContents(AmixDevId: AUDIO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AMIX_ListControls(AmixDevId: AUDIO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AMIX_SetControl(
        AmixDevId: AUDIO_DEV,
        control: *const ::std::os::raw::c_char,
        values: *mut ::std::os::raw::c_char,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AMIX_GetControl(
        AmixDevId: AUDIO_DEV,
        control: *const ::std::os::raw::c_char,
        values: *mut ::std::os::raw::c_char,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SetPubAttr(AoDevId: AUDIO_DEV, pstAttr: *const AIO_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_GetPubAttr(AoDevId: AUDIO_DEV, pstAttr: *mut AIO_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_Enable(AoDevId: AUDIO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_Disable(AoDevId: AUDIO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_EnableChn(AoDevId: AUDIO_DEV, AoChn: AO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_DisableChn(AoDevId: AUDIO_DEV, AoChn: AO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SendFrame(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstData: *const AUDIO_FRAME_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_EnableReSmp(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        enInSampleRate: AUDIO_SAMPLE_RATE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_DisableReSmp(AoDevId: AUDIO_DEV, AoChn: AO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_PauseChn(AoDevId: AUDIO_DEV, AoChn: AO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_ResumeChn(AoDevId: AUDIO_DEV, AoChn: AO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_ClearChnBuf(AoDevId: AUDIO_DEV, AoChn: AO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_QueryChnStat(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstStatus: *mut AO_CHN_STATE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SetTrackMode(AoDevId: AUDIO_DEV, enTrackMode: AUDIO_TRACK_MODE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_GetTrackMode(
        AoDevId: AUDIO_DEV,
        penTrackMode: *mut AUDIO_TRACK_MODE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SetVolumeCurve(
        AoDevId: AUDIO_DEV,
        pvolumeCurve: *mut AUDIO_VOLUME_CURVE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SetVolume(AoDevId: AUDIO_DEV, s32VolumeDb: RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_GetVolume(AoDevId: AUDIO_DEV, ps32VolumeDb: *mut RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SetMute(
        AoDevId: AUDIO_DEV,
        bEnable: RK_BOOL,
        pstFade: *const AUDIO_FADE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_GetMute(
        AoDevId: AUDIO_DEV,
        pbEnable: *mut RK_BOOL,
        pstFade: *mut AUDIO_FADE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SetChnAttr(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstAttrs: *const AO_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_GetChnAttr(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstAttrs: *mut AO_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SetChnParams(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstParams: *const AO_CHN_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_GetChnParams(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstParams: *mut AO_CHN_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SaveFile(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstSaveFileInfo: *mut AUDIO_SAVE_FILE_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_QueryFileStatus(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstFileStatus: *mut AUDIO_FILE_STATUS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_ClrPubAttr(AoDevId: AUDIO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_EnableVqe(AoDevId: AUDIO_DEV, AoChn: AO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_DisableVqe(AoDevId: AUDIO_DEV, AoChn: AO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_SetVqeAttr(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstVqeConfig: *mut AO_VQE_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_GetVqeAttr(
        AoDevId: AUDIO_DEV,
        AoChn: AO_CHN,
        pstVqeConfig: *mut AO_VQE_CONFIG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AO_WaitEos(AoDevId: AUDIO_DEV, AoChn: AO_CHN, s32MilliSec: RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_CreateGrp(AVSGrp: AVS_GRP, pstGrpAttr: *const AVS_GRP_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_DestroyGrp(AVSGrp: AVS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_StartGrp(AVSGrp: AVS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_StopGrp(AVSGrp: AVS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_ResetGrp(AVSGrp: AVS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_GetGrpAttr(AVSGrp: AVS_GRP, pstGrpAttr: *mut AVS_GRP_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_SetGrpAttr(AVSGrp: AVS_GRP, pstGrpAttr: *const AVS_GRP_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_SendPipeFrame(
        AVSGrp: AVS_GRP,
        AVSPipe: AVS_PIPE,
        pstVideoFrame: *const VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_GetPipeFrame(
        AVSGrp: AVS_GRP,
        AVSPipe: AVS_PIPE,
        pstVideoFrame: *mut VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_ReleasePipeFrame(
        AVSGrp: AVS_GRP,
        AVSPipe: AVS_PIPE,
        pstVideoFrame: *const VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_SetChnAttr(
        AVSGrp: AVS_GRP,
        AVSChn: AVS_CHN,
        pstChnAttr: *const AVS_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_GetChnAttr(
        AVSGrp: AVS_GRP,
        AVSChn: AVS_CHN,
        pstChnAttr: *mut AVS_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_EnableChn(AVSGrp: AVS_GRP, AVSChn: AVS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_DisableChn(AVSGrp: AVS_GRP, AVSChn: AVS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_GetChnFrame(
        AVSGrp: AVS_GRP,
        AVSChn: AVS_CHN,
        pstVideoFrame: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_ReleaseChnFrame(
        AVSGrp: AVS_GRP,
        AVSChn: AVS_CHN,
        pstVideoFrame: *const VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_SetModParam(pstModParam: *const AVS_MOD_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_GetModParam(pstModParam: *mut AVS_MOD_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_AVS_GetFinalLut(AVSGrp: AVS_GRP, pstFinalLut: *mut AVS_FINAL_LUT_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_CAL_COMM_GetPicBufferSize(
        pstBufAttr: *const PIC_BUF_ATTR_S,
        pstPicCal: *mut MB_PIC_CAL_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_CAL_TDE_GetPicBufferSize(
        pstBufAttr: *const PIC_BUF_ATTR_S,
        pstPicCal: *mut MB_PIC_CAL_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_CAL_VGS_GetPicBufferSize(
        pstBufAttr: *const PIC_BUF_ATTR_S,
        pstPicCal: *mut MB_PIC_CAL_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_CAL_VDEC_GetPicBufferSize(
        pstBufAttr: *const VDEC_PIC_BUF_ATTR_S,
        pstPicCal: *mut MB_PIC_CAL_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_CAL_AVS_GetFinalLutBufferSize(
        pstBufAttr: *const PIC_BUF_ATTR_S,
        pstPicCal: *mut MB_PIC_CAL_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_CAL_VGS_GetPicVirWidth(u32Width: RK_U32, enPixelFormat: PIXEL_FORMAT_E)
                                         -> RK_U32;
}

extern "C" {
    pub fn RK_MPI_CAL_VGS_GetPicVirHeight(
        u32Height: RK_U32,
        enPixelFormat: PIXEL_FORMAT_E,
    ) -> RK_U32;
}

extern "C" {
    pub fn RK_MPI_CAL_VDEC_GetVirWidth(pstBufAttr: *const VDEC_PIC_BUF_ATTR_S) -> RK_U32;
}

extern "C" {
    pub fn RK_MPI_CAL_VDEC_GetVirHeight(pstBufAttr: *const VDEC_PIC_BUF_ATTR_S) -> RK_U32;
}

extern "C" {
    pub fn RK_MPI_CAL_COMM_GetHorStride(
        u32VirWidth: RK_U32,
        enPixelFormat: PIXEL_FORMAT_E,
    ) -> RK_U32;
}

extern "C" {
    pub fn RK_MPI_CAL_COMM_GetVirWidth(
        u32HorStride: RK_U32,
        enPixelFormat: PIXEL_FORMAT_E,
    ) -> RK_U32;
}

extern "C" {
    pub fn RK_MPI_IVS_Init() -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_Exit() -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_CreateChn(IvsChn: IVS_CHN, pstAttr: *mut IVS_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_DestroyChn(IvsChn: IVS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_SetChnAttr(IvsChn: IVS_CHN, pstAttr: *mut IVS_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_GetChnAttr(IvsChn: IVS_CHN, pstAttr: *mut IVS_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_SetMdAttr(IvsChn: IVS_CHN, pstMdAttr: *mut IVS_MD_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_GetMdAttr(IvsChn: IVS_CHN, pstMdAttr: *mut IVS_MD_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_SendFrame(
        VdChn: IVS_CHN,
        pstFrame: *const VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_GetResults(
        VdChn: IVS_CHN,
        pstResults: *mut IVS_RESULT_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_IVS_ReleaseResults(IvsChn: IVS_CHN, pstResults: *mut IVS_RESULT_INFO_S)
                                     -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_CreatePool(pstMbPoolCfg: *mut MB_POOL_CONFIG_S) -> MB_POOL;
}

extern "C" {
    pub fn RK_MPI_MB_DestroyPool(pool: MB_POOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_GetMB(pool: MB_POOL, u64Size: RK_U64, block: RK_BOOL) -> MB_BLK;
}

extern "C" {
    pub fn RK_MPI_MB_ReleaseMB(mb: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_Handle2PhysAddr(mb: MB_BLK) -> RK_U64;
}

extern "C" {
    pub fn RK_MPI_MB_Handle2VirAddr(mb: MB_BLK) -> *mut ::std::os::raw::c_void;
}

extern "C" {
    pub fn RK_MPI_MB_Handle2Fd(mb: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_Handle2PoolId(mb: MB_BLK) -> MB_POOL;
}

extern "C" {
    pub fn RK_MPI_MB_Handle2UniqueId(mb: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_GetSize(mb: MB_BLK) -> RK_U64;
}

extern "C" {
    pub fn RK_MPI_MB_VirAddr2Handle(pstVirAddr: *mut ::std::os::raw::c_void) -> MB_BLK;
}

extern "C" {
    pub fn RK_MPI_MB_UniqueId2Fd(s32UniqueId: RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_InquireUserCnt(mb: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_AddUserCnt(mb: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_SetModPoolConfig(enMbUid: MB_UID_E, pstMbConfig: *const MB_CONFIG_S)
                                      -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_GetModPoolConfig(enMbUid: MB_UID_E, pstMbConfig: *mut MB_CONFIG_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MB_SetBufferStride(
        mb: MB_BLK,
        u32HorStride: RK_U32,
        u32VerStride: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_Alloc(pBlk: *mut MB_BLK, u32Length: RK_U32, u32Flags: RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_Free(blk: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_Handle2PhysAddr(blk: MB_BLK) -> RK_U64;
}

extern "C" {
    pub fn RK_MPI_MMZ_Handle2VirAddr(blk: MB_BLK) -> *mut ::std::os::raw::c_void;
}

extern "C" {
    pub fn RK_MPI_MMZ_Handle2Fd(blk: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_GetSize(blk: MB_BLK) -> RK_U64;
}

extern "C" {
    pub fn RK_MPI_MMZ_Fd2Handle(u32Fd: RK_S32) -> MB_BLK;
}

extern "C" {
    pub fn RK_MPI_MMZ_VirAddr2Handle(pVirAddr: *mut ::std::os::raw::c_void) -> MB_BLK;
}

extern "C" {
    pub fn RK_MPI_MMZ_PhyAddr2Handle(u64phyAddr: RK_U64) -> MB_BLK;
}

extern "C" {
    pub fn RK_MPI_MMZ_IsCacheable(blk: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_FlushCacheStart(
        blk: MB_BLK,
        u32Offset: RK_U32,
        u32Length: RK_U32,
        u32Flags: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_FlushCacheEnd(
        blk: MB_BLK,
        u32Offset: RK_U32,
        u32Length: RK_U32,
        u32Flags: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_FlushCacheVaddrStart(
        pVirAddr: *mut ::std::os::raw::c_void,
        u32Length: RK_U32,
        u32Flags: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_FlushCacheVaddrEnd(
        pVirAddr: *mut ::std::os::raw::c_void,
        u32Length: RK_U32,
        u32Flags: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_FlushCachePaddrStart(
        u64phyAddr: RK_U64,
        u32Length: RK_U32,
        u32Flags: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_MMZ_FlushCachePaddrEnd(
        u64phyAddr: RK_U64,
        u32Length: RK_U32,
        u32Flags: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_Create(Handle: RGN_HANDLE, pstRegion: *const RGN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_Destroy(Handle: RGN_HANDLE) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_GetAttr(Handle: RGN_HANDLE, pstRegion: *mut RGN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_SetAttr(Handle: RGN_HANDLE, pstRegion: *const RGN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_SetBitMap(Handle: RGN_HANDLE, pstBitmap: *const BITMAP_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_AttachToChn(
        Handle: RGN_HANDLE,
        pstChn: *const MPP_CHN_S,
        pstChnAttr: *const RGN_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_DetachFromChn(Handle: RGN_HANDLE, pstChn: *const MPP_CHN_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_SetDisplayAttr(
        Handle: RGN_HANDLE,
        pstChn: *const MPP_CHN_S,
        pstChnAttr: *const RGN_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_GetDisplayAttr(
        Handle: RGN_HANDLE,
        pstChn: *const MPP_CHN_S,
        pstChnAttr: *mut RGN_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_GetCanvasInfo(
        Handle: RGN_HANDLE,
        pstCanvasInfo: *mut RGN_CANVAS_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_RGN_UpdateCanvas(Handle: RGN_HANDLE) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_Init() -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_Exit() -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_WaitFreeMB() -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_RelasePhyMemory() -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_Bind(pstSrcChn: *const MPP_CHN_S, pstDestChn: *const MPP_CHN_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_UnBind(pstSrcChn: *const MPP_CHN_S, pstDestChn: *const MPP_CHN_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_GetBindbyDest(
        pstDestChn: *const MPP_CHN_S,
        pstSrcChn: *mut MPP_CHN_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_GetBindbySrc(
        pstSrcChn: *const MPP_CHN_S,
        pstBindDest: *mut MPP_BIND_DEST_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_MmzAlloc(
        pBlk: *mut MB_BLK,
        pstrMmb: *const RK_CHAR,
        pstrZone: *const RK_CHAR,
        u32Len: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_MmzAlloc_Cached(
        pBlk: *mut MB_BLK,
        pstrMmb: *const RK_CHAR,
        pstrZone: *const RK_CHAR,
        u32Len: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_MmzAllocEx(
        pBlk: *mut MB_BLK,
        pstrMmb: *const RK_CHAR,
        pstrZone: *const RK_CHAR,
        u32Len: RK_U32,
        u32HeapFlags: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_MmzFree(blk: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_MmzFlushCache(blk: MB_BLK, bReadOnly: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_Malloc(pBlk: *mut MB_BLK, u32Len: RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_Free(blk: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_CreateMB(pBlk: *mut MB_BLK, pstMbExtConfig: *mut MB_EXT_CONFIG_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_GetCurPTS(pu64CurPTS: *mut RK_U64) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_InitPTSBase(u64PTSBase: RK_U64) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_SyncPTS(u64PTSBase: RK_U64) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_SYS_SetChnInputMode(pstChn: *const MPP_CHN_S, mode: CHN_INPUT_MODE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_LOG_SetLevelConf(pstConf: *mut LOG_LEVEL_CONF_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_LOG_GetLevelConf(pstConf: *mut LOG_LEVEL_CONF_S) -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_Open() -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_Close();
}

extern "C" {
    pub fn RK_TDE_BeginJob() -> TDE_HANDLE;
}

extern "C" {
    pub fn RK_TDE_EndJob(
        s32Handle: TDE_HANDLE,
        bSync: RK_BOOL,
        bBlock: RK_BOOL,
        u32TimeOut: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_CancelJob(s32Handle: TDE_HANDLE) -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_WaitForDone(s32Handle: TDE_HANDLE) -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_WaitAllDone() -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_QuickCopy(
        s32Handle: TDE_HANDLE,
        pstSrc: *const TDE_SURFACE_S,
        pstSrcRect: *const TDE_RECT_S,
        pstDst: *const TDE_SURFACE_S,
        pstDstRect: *const TDE_RECT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_QuickResize(
        s32Handle: TDE_HANDLE,
        pstSrc: *const TDE_SURFACE_S,
        pstSrcRect: *const TDE_RECT_S,
        pstDst: *const TDE_SURFACE_S,
        pstDstRect: *const TDE_RECT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_Bitblit(
        s32Handle: TDE_HANDLE,
        pstBackGround: *const TDE_SURFACE_S,
        pstBackGroundRect: *const TDE_RECT_S,
        pstForeGround: *const TDE_SURFACE_S,
        pstForeGroundRect: *const TDE_RECT_S,
        pstDst: *const TDE_SURFACE_S,
        pstDstRect: *const TDE_RECT_S,
        pstOpt: *const TDE_OPT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_QuickFill(
        s32Handle: TDE_HANDLE,
        pstDst: *mut TDE_SURFACE_S,
        pstDstRect: *mut TDE_RECT_S,
        u32FillData: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_TDE_Rotate(
        s32Handle: TDE_HANDLE,
        pstSrc: *mut TDE_SURFACE_S,
        pstSrcRect: *mut TDE_RECT_S,
        pstDst: *mut TDE_SURFACE_S,
        pstDstRect: *mut TDE_RECT_S,
        enRotateAngle: ROTATION_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_CreateChn(VdChn: VDEC_CHN, pstAttr: *const VDEC_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_DestroyChn(VdChn: VDEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_GetChnAttr(VdChn: VDEC_CHN, pstAttr: *mut VDEC_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_SetChnAttr(VdChn: VDEC_CHN, pstAttr: *const VDEC_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_StartRecvStream(VdChn: VDEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_StopRecvStream(VdChn: VDEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_ResetChn(VdChn: VDEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_SendStream(
        VdChn: VDEC_CHN,
        pstStream: *const VDEC_STREAM_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_GetFrame(
        VdChn: VDEC_CHN,
        pstFrameInfo: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_ReleaseFrame(
        VdChn: VDEC_CHN,
        pstFrameInfo: *const VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_SetRotation(VdChn: VDEC_CHN, enRotation: ROTATION_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_GetRotation(VdChn: VDEC_CHN, penRotation: *mut ROTATION_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_GetModParam(pstModParam: *mut VDEC_MOD_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_SetModParam(pstModParam: *const VDEC_MOD_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_SetDisplayMode(
        VdChn: VDEC_CHN,
        enDisplayMode: VIDEO_DISPLAY_MODE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_GetDisplayMode(
        VdChn: VDEC_CHN,
        penDisplayMode: *mut VIDEO_DISPLAY_MODE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_QueryStatus(VdChn: VDEC_CHN, pstStatus: *mut VDEC_CHN_STATUS_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_SetChnParam(VdChn: VDEC_CHN, pstParam: *const VDEC_CHN_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_GetChnParam(VdChn: VDEC_CHN, pstParam: *mut VDEC_CHN_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_GetFd(VdChn: VDEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_CloseFd(VdChn: VDEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_AttachMbPool(VdChn: VDEC_CHN, hMbPool: MB_POOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_DetachMbPool(VdChn: VDEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_SetUserPic(VdChn: VDEC_CHN, pstUsrPic: *const VIDEO_FRAME_INFO_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_EnableUserPic(VdChn: VDEC_CHN, bInstant: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VDEC_DisableUserPic(VdChn: VDEC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_CreateChn(VeChn: VENC_CHN, pstAttr: *const VENC_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_DestroyChn(VeChn: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_ResetChn(VeChn: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetSceneMode(VeChn: VENC_CHN, enSceneMode: VENC_SCENE_MODE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetSceneMode(
        VeChn: VENC_CHN,
        penSceneMode: *mut VENC_SCENE_MODE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_StartRecvFrame(
        VeChn: VENC_CHN,
        pstRecvParam: *const VENC_RECV_PIC_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_StopRecvFrame(VeChn: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_QueryStatus(VeChn: VENC_CHN, pstStatus: *mut VENC_CHN_STATUS_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_EnableSvc(VeChn: VENC_CHN, bEnable: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_EnableMotionDeblur(VeChn: VENC_CHN, bEnable: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_EnableMotionStaticSwitch(VeChn: VENC_CHN, bEnable: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetChnAttr(VeChn: VENC_CHN, pstChnAttr: *const VENC_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetChnAttr(VeChn: VENC_CHN, pstChnAttr: *mut VENC_CHN_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetChnBufWrapAttr(
        VeChn: VENC_CHN,
        pstVencChnBufWrap: *const VENC_CHN_BUF_WRAP_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetChnBufWrapAttr(
        VeChn: VENC_CHN,
        pstVencChnBufWrap: *mut VENC_CHN_BUF_WRAP_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetChnRefBufShareAttr(
        VeChn: VENC_CHN,
        pstVencChnRefBufShare: *const VENC_CHN_REF_BUF_SHARE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetChnRefBufShareAttr(
        VeChn: VENC_CHN,
        pstVencChnRefBufShare: *mut VENC_CHN_REF_BUF_SHARE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetComboAttr(
        VeChn: VENC_CHN,
        pstComboAttr: *mut VENC_COMBO_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetComboAttr(
        VeChn: VENC_CHN,
        pstComboAttr: *mut VENC_COMBO_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_EnableThumbnail(VeChn: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_ThumbnailBind(VeChn: VENC_CHN, VeChnTb: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_ThumbnailRequest(VeChn: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetChnParam(VeChn: VENC_CHN, pstChnParam: *const VENC_CHN_PARAM_S)
                                   -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetChnParam(VeChn: VENC_CHN, pstChnParam: *mut VENC_CHN_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SendFrame(
        VeChn: VENC_CHN,
        pstFrame: *const VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SendFrameEx(
        VeChn: VENC_CHN,
        pstFrame: *const USER_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetStream(
        VeChn: VENC_CHN,
        pstStream: *mut VENC_STREAM_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_ReleaseStream(VeChn: VENC_CHN, pstStream: *mut VENC_STREAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_RequestIDR(VeChn: VENC_CHN, bInstant: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetRoiAttr(VeChn: VENC_CHN, pstRoiAttr: *const VENC_ROI_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetRoiAttr(
        VeChn: VENC_CHN,
        u32Index: RK_U32,
        pstRoiAttr: *mut VENC_ROI_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetRcParam(VeChn: VENC_CHN, pstRcParam: *const VENC_RC_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetRcParam(VeChn: VENC_CHN, pstRcParam: *mut VENC_RC_PARAM_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetRcAdvParam(
        VeChn: VENC_CHN,
        pstRcAdvParam: *const VENC_RC_ADVPARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetRcAdvParam(
        VeChn: VENC_CHN,
        pstRcAdvParam: *mut VENC_RC_ADVPARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetFrameLostStrategy(
        VeChn: VENC_CHN,
        pstFrmLostParam: *const VENC_FRAMELOST_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetFrameLostStrategy(
        VeChn: VENC_CHN,
        pstFrmLostParam: *mut VENC_FRAMELOST_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetSuperFrameStrategy(
        VeChn: VENC_CHN,
        pstSuperFrmParam: *const VENC_SUPERFRAME_CFG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetSuperFrameStrategy(
        VeChn: VENC_CHN,
        pstSuperFrmParam: *mut VENC_SUPERFRAME_CFG_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetIntraRefresh(
        VeChn: VENC_CHN,
        pstIntraRefresh: *const VENC_INTRA_REFRESH_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetIntraRefresh(
        VeChn: VENC_CHN,
        pstIntraRefresh: *mut VENC_INTRA_REFRESH_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetHierarchicalQp(
        VeChn: VENC_CHN,
        pstHierarchicalQp: *const VENC_HIERARCHICAL_QP_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetHierarchicalQp(
        VeChn: VENC_CHN,
        pstHierarchicalQp: *mut VENC_HIERARCHICAL_QP_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetDeBreathEffect(
        VeChn: VENC_CHN,
        pstDeBreathEffect: *const VENC_DEBREATHEFFECT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetDeBreathEffect(
        VeChn: VENC_CHN,
        pstDeBreathEffect: *mut VENC_DEBREATHEFFECT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetJpegParam(
        VeChn: VENC_CHN,
        pstJpegParam: *const VENC_JPEG_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetFd(VeChn: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_CloseFd(VeChn: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_InsertUserData(
        VeChn: VENC_CHN,
        pu8Data: *mut RK_U8,
        u32Len: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetChnRotation(VeChn: VENC_CHN, enRotation: ROTATION_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetChnRotation(VeChn: VENC_CHN, enRotation: *mut ROTATION_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetQpmap(VeChn: VENC_CHN, blk: MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetQpmap(VeChn: VENC_CHN, pBlk: *mut MB_BLK) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_AttachMbPool(VeChn: VENC_CHN, hMbPool: MB_POOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_DetachMbPool(VeChn: VENC_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH264IntraPred(
        VeChn: VENC_CHN,
        pstH264IntraPred: *const VENC_H264_INTRA_PRED_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH264IntraPred(
        VeChn: VENC_CHN,
        pstH264IntraPred: *mut VENC_H264_INTRA_PRED_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH264Trans(
        VeChn: VENC_CHN,
        pstH264Trans: *const VENC_H264_TRANS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH264Trans(
        VeChn: VENC_CHN,
        pstH264Trans: *mut VENC_H264_TRANS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH264Entropy(
        VeChn: VENC_CHN,
        pstH264EntropyEnc: *const VENC_H264_ENTROPY_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH264Entropy(
        VeChn: VENC_CHN,
        pstH264EntropyEnc: *mut VENC_H264_ENTROPY_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH264Dblk(VeChn: VENC_CHN, pstH264Dblk: *const VENC_H264_DBLK_S)
                                   -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH264Dblk(VeChn: VENC_CHN, pstH264Dblk: *mut VENC_H264_DBLK_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH264Vui(VeChn: VENC_CHN, pstH264Vui: *const VENC_H264_VUI_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH264Vui(VeChn: VENC_CHN, pstH264Vui: *mut VENC_H264_VUI_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH265Trans(
        VeChn: VENC_CHN,
        pstH265Trans: *const VENC_H265_TRANS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH265Trans(
        VeChn: VENC_CHN,
        pstH265Trans: *mut VENC_H265_TRANS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH265Entropy(
        VeChn: VENC_CHN,
        pstH265EntropyEnc: *const VENC_H265_ENTROPY_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH265Entropy(
        VeChn: VENC_CHN,
        pstH265EntropyEnc: *mut VENC_H265_ENTROPY_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH265Dblk(VeChn: VENC_CHN, pstH265Dblk: *const VENC_H265_DBLK_S)
                                   -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH265Dblk(VeChn: VENC_CHN, pstH265Dblk: *mut VENC_H265_DBLK_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH265Sao(VeChn: VENC_CHN, pstH265Sao: *const VENC_H265_SAO_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH265Sao(VeChn: VENC_CHN, pstH265Sao: *mut VENC_H265_SAO_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH265PredUnit(
        VeChn: VENC_CHN,
        pstPredUnit: *const VENC_H265_PU_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH265PredUnit(VeChn: VENC_CHN, pstPredUnit: *mut VENC_H265_PU_S)
                                       -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetH265Vui(VeChn: VENC_CHN, pstH265Vui: *const VENC_H265_VUI_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetH265Vui(VeChn: VENC_CHN, pstH265Vui: *mut VENC_H265_VUI_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_SetMjpegParam(
        VeChn: VENC_CHN,
        pstMjpegParam: *const VENC_MJPEG_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VENC_GetMjpegParam(
        VeChn: VENC_CHN,
        pstMjpegParam: *mut VENC_MJPEG_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_BeginJob\nDescription  : Begin a vgs job,then add task into the job,vgs will finish all the task in the job.\nInput        : VGS_HANDLE *phHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_BeginJob(phHandle: *mut VGS_HANDLE) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_EndJob\nDescription  : End a job,all tasks in the job will be submmitted to vgs\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_EndJob(hHandle: VGS_HANDLE) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_CancelJob\nDescription  : Cancel a job,then all tasks in the job will not be submmitted to vgs\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_CancelJob(hHandle: VGS_HANDLE) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddScaleTask\nDescription  : Add a Scale task to a vgs job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddScaleTask(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        enScaleCoefMode: VGS_SCLCOEF_MODE_E,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddRotationTask\nDescription  : add a Rotation task into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddRotationTask(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        enRotationAngle: ROTATION_E,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddCropTask\nDescription  : add crop task into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddCropTask(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        pstVgsCrop: *const VGS_CROP_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddDrawLineTask\nDescription  : add a draw line task into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddDrawLineTask(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        pstVgsDrawLine: *const VGS_DRAW_LINE_S,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddCoverTask\nDescription  : add a Cover task into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddCoverTask(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        pstVgsAddCover: *const VGS_ADD_COVER_S,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddOsdTask\nDescription  : add a Osd task into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddOsdTask(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        pstVgsAddOsd: *const VGS_ADD_OSD_S,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddMosaicTask\nDescription  : add mosaic task into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddMosaicTask(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        pstVgsMosaic: *const VGS_MOSAIC_S,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddDrawLineTaskArray\nDescription  : add draw line tasks into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddDrawLineTaskArray(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        astVgsDrawLine: *const VGS_DRAW_LINE_S,
        u32ArraySize: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddCoverTaskArray\nDescription  : add cover tasks into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddCoverTaskArray(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        astVgsAddCover: *const VGS_ADD_COVER_S,
        u32ArraySize: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddOsdTaskArray\nDescription  : add osd tasks into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddOsdTaskArray(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        astVgsAddOsd: *const VGS_ADD_OSD_S,
        u32ArraySize: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    #[doc = "Prototype    : RK_MPI_VGS_AddMosaicTask\nDescription  : add mosaic tasks into a job\nInput        : VGS_HANDLE hHandle\nOutput       : None\nReturn Value :\nCalls        :\nCalled By    :"]
    pub fn RK_MPI_VGS_AddMosaicTaskArray(
        hHandle: VGS_HANDLE,
        pstTask: *const VGS_TASK_ATTR_S,
        astVgsMosaic: *const VGS_MOSAIC_S,
        u32ArraySize: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_SetDevAttr(ViDev: VI_DEV, pstDevAttr: *const VI_DEV_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetDevAttr(ViDev: VI_DEV, pstDevAttr: *mut VI_DEV_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_EnableDev(ViDev: VI_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_DisableDev(ViDev: VI_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_SetDevBindPipe(
        ViDev: VI_DEV,
        pstDevBindPipe: *const VI_DEV_BIND_PIPE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetDevBindPipe(
        ViDev: VI_DEV,
        pstDevBindPipe: *mut VI_DEV_BIND_PIPE_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetDevIsEnable(ViDev: VI_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_QueryDevStatus(Videv: VI_DEV, pstDevStatus: *mut VI_DEV_STATUS_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_StartPipe(ViPipe: VI_PIPE) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_StopPipe(ViPipe: VI_PIPE) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_SetChnAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstChnAttr: *const VI_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetChnAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstChnAttr: *mut VI_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_EnableChn(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_EnableChnExt(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_DisableChn(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_DisableChnExt(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_PauseChn(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_ResumeChn(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetChnFrame(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstFrameInfo: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_ReleaseChnFrame(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstFrameInfo: *const VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_ChnSaveFile(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstSaveFileInfo: *mut VI_SAVE_FILE_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_QueryChnStatus(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstChnStatus: *mut VI_CHN_STATUS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetChnWrapBufAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstViWrap: *mut VI_CHN_BUF_WRAP_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_SetChnWrapBufAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstViWrap: *const VI_CHN_BUF_WRAP_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetChnFd(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_CloseChnFd(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_SetChnFreeze(ViPipe: VI_PIPE, ViChn: VI_CHN, bFreeze: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetChnFreeze(ViPipe: VI_PIPE, ViChn: VI_CHN, pbFreeze: *mut RK_BOOL)
                                  -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_AttachMbPool(ViPipe: VI_PIPE, ViChn: VI_CHN, hMbPool: MB_POOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_DetachMbPool(ViPipe: VI_PIPE, ViChn: VI_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetChnMirrorFlip(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstMirrFlip: *mut VI_ISP_MIRROR_FLIP_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_SetChnMirrorFlip(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        stMirrFlip: VI_ISP_MIRROR_FLIP_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_GetEptz(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        stCropInfo: *mut VI_CROP_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VI_SetEptz(ViPipe: VI_PIPE, ViChn: VI_CHN, stCropInfo: VI_CROP_INFO_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetPubAttr(VoDev: VO_DEV, pstPubAttr: *const VO_PUB_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetPubAttr(VoDev: VO_DEV, pstPubAttr: *mut VO_PUB_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetPostProcessParam(VoDev: VO_DEV, pstParam: *mut VO_CSC_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetPostProcessParam(VoDev: VO_DEV, pstParam: *mut VO_CSC_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_Enable(VoDev: VO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_Disable(VoDev: VO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetHdmiParam(
        enIntfType: RK_U32,
        u32Id: RK_U32,
        pstHDMIParam: *mut VO_HDMI_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetHdmiParam(
        enIntfType: RK_U32,
        u32Id: RK_U32,
        pstHDMIParam: *const VO_HDMI_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_Get_Edid(
        enIntfType: RK_U32,
        u32Id: RK_U32,
        pstEdidData: *mut VO_EDID_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetSinkCapability(
        enIntfType: RK_U32,
        u32Id: RK_U32,
        pstSinkCap: *mut VO_SINK_CAPABILITY_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_RegCallbackFunc(
        enIntfType: RK_U32,
        u32Id: RK_U32,
        pstCallbackFunc: *mut RK_VO_CALLBACK_FUNC_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_UnRegCallbackFunc(
        enIntfType: RK_U32,
        u32Id: RK_U32,
        pstCallbackFunc: *mut RK_VO_CALLBACK_FUNC_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_CloseFd() -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_CreateGraphicsFrameBuffer(
        Width: RK_U32,
        Height: RK_U32,
        Format: RK_U32,
        fd: *mut *mut ::std::os::raw::c_void,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_DestroyGraphicsFrameBuffer(fd: *mut ::std::os::raw::c_void) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetGraphicsFrameBuffer(
        fd: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}

extern "C" {
    pub fn RK_MPI_VO_GetFrameInfo(
        pMblk: *mut ::std::os::raw::c_void,
        pstFrame: *mut VO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetGFxMode(u32Mode: VO_GFX_MODE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetGfxFrameBuffer(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstFrame: *mut VO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_UpdateGfxFrameBuffer(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstFrame: *mut VO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_ReleaseGfxFrameBuffer(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_ClearLayersBinding() -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_BindLayer(VoLayer: VO_LAYER, VoDev: VO_DEV, Mode: VO_LAYER_MODE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_UnBindLayer(VoLayer: VO_LAYER, VoDev: VO_DEV) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetLayerAttr(
        VoLayer: VO_LAYER,
        pstLayerVideoAttr: *const VO_VIDEO_LAYER_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetLayerAttr(
        VoLayer: VO_LAYER,
        pstLayerAttr: *mut VO_VIDEO_LAYER_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_EnableLayer(VoLayer: VO_LAYER) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_DisableLayer(VoLayer: VO_LAYER) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetLayerPriority(VoLayer: VO_LAYER, u32Priority: RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetLayerPriority(VoLayer: VO_LAYER, pu32Priority: *mut RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetLayerCSC(VoLayer: VO_LAYER, pstVideoCSC: *const VO_CSC_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetLayerCSC(VoLayer: VO_LAYER, pstVideoCSC: *mut VO_CSC_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetLayerDispBufLen(VoLayer: VO_LAYER, u32BufLen: RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetLayerDispBufLen(VoLayer: VO_LAYER, pu32BufLen: *mut RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetLayerFrame(
        VoLayer: VO_LAYER,
        pstVFrame: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_ReleaseLayerFrame(
        VoLayer: VO_LAYER,
        pstVFrame: *mut VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SendLayerFrame(
        VoLayer: VO_LAYER,
        pstVFrame: *mut VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetCursorPostion(VoLayer: VO_LAYER, x: RK_U32, y: RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetCursorLogicalRect(
        VoLayer: VO_LAYER,
        maxWidth: RK_U32,
        maxHeight: RK_U32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_EnableChn(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_DisableChn(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetChnAttr(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstChnAttr: *const VO_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetChnAttr(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstChnAttr: *mut VO_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetChnParam(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstChnParam: *const VO_CHN_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetChnParam(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstChnParam: *mut VO_CHN_PARAM_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetChnDispPos(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstDispPos: *const POINT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetChnDispPos(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstDispPos: *mut POINT_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetChnFrame(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstFrame: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_ReleaseChnFrame(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstFrame: *const VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetChnFrameRate(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        s32ChnFrmRate: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetChnFrameRate(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        ps32ChnFrmRate: *mut RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_PauseChn(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_ResumeChn(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_StepChn(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_RefreshChn(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_ShowChn(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_HideChn(VoLayer: VO_LAYER, VoChn: VO_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SendFrame(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstVFrame: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_ClearChnBuffer(VoLayer: VO_LAYER, VoChn: VO_CHN, bClrAll: RK_BOOL) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetChnBorder(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstBorder: *const VO_BORDER_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetChnBorder(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstBorder: *mut VO_BORDER_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetChnPts(VoLayer: VO_LAYER, VoChn: VO_CHN, pu64ChnPts: *mut RK_U64)
                               -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_QueryChnStat(
        VoLayer: VO_LAYER,
        VoChn: VO_CHN,
        pstStatus: *mut VO_QUERY_STATUS_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetWbcSource(VoWbc: VO_WBC, pstWbcSource: *const VO_WBC_SOURCE_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetWbcSource(VoWbc: VO_WBC, pstWbcSources: *mut VO_WBC_SOURCE_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_EnableWbc(VoWbc: VO_WBC) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_DisableWbc(VoWbc: VO_WBC) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetWbcAttr(VoWbc: VO_WBC, pstWbcAttr: *const VO_WBC_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetWbcAttr(VoWbc: VO_WBC, pstWbcAttr: *mut VO_WBC_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetWbcMode(VoWbc: VO_WBC, enWbcMode: VO_WBC_MODE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetWbcMode(VoWbc: VO_WBC, penWbcMode: *mut VO_WBC_MODE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetWbcDepth(VoWbc: VO_WBC, u32Depth: RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetWbcDepth(VoWbc: VO_WBC, pu32Depth: *mut RK_S32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetWbcFrame(
        VoWbc: VO_WBC,
        pstVFrame: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_ReleaseWbcFrame(VoWbc: VO_WBC, pstVFrame: *mut VIDEO_FRAME_INFO_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_SetLayerSpliceMode(
        VoLayer: VO_LAYER,
        enSpliceMode: VO_SPLICE_MODE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VO_GetLayerSpliceMode(
        VoLayer: VO_LAYER,
        enSpliceMode: *mut VO_SPLICE_MODE_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_CreateGrp(VpssGrp: VPSS_GRP, pstGrpAttr: *const VPSS_GRP_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_DestroyGrp(VpssGrp: VPSS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_StartGrp(VpssGrp: VPSS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_StopGrp(VpssGrp: VPSS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_ResetGrp(VpssGrp: VPSS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetGrpAttr(VpssGrp: VPSS_GRP, pstGrpAttr: *mut VPSS_GRP_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SetGrpAttr(VpssGrp: VPSS_GRP, pstGrpAttr: *const VPSS_GRP_ATTR_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SetGrpCrop(
        VpssGrp: VPSS_GRP,
        pstCropInfo: *const VPSS_CROP_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetGrpCrop(VpssGrp: VPSS_GRP, pstCropInfo: *mut VPSS_CROP_INFO_S) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SendFrame(
        VpssGrp: VPSS_GRP,
        VpssGrpPipe: VPSS_GRP_PIPE,
        pstVideoFrame: *const VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetGrpFrame(
        VpssGrp: VPSS_GRP,
        VpssGrpPipe: VPSS_GRP_PIPE,
        pstVideoFrame: *mut VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_ReleaseGrpFrame(
        VpssGrp: VPSS_GRP,
        VpssGrpPipe: VPSS_GRP_PIPE,
        pstVideoFrame: *const VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_EnableBackupFrame(VpssGrp: VPSS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_DisableBackupFrame(VpssGrp: VPSS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SetGrpDelay(VpssGrp: VPSS_GRP, u32Delay: RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetGrpDelay(VpssGrp: VPSS_GRP, pu32Delay: *mut RK_U32) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_EnableUserFrameRateCtrl(VpssGrp: VPSS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_DisableUserFrameRateCtrl(VpssGrp: VPSS_GRP) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SetChnAttr(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstChnAttr: *const VPSS_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetChnAttr(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstChnAttr: *mut VPSS_CHN_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_EnableChn(VpssGrp: VPSS_GRP, VpssChn: VPSS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_DisableChn(VpssGrp: VPSS_GRP, VpssChn: VPSS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SetChnCrop(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstCropInfo: *const VPSS_CROP_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetChnCrop(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstCropInfo: *mut VPSS_CROP_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SetChnRotation(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        enRotation: ROTATION_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetChnRotation(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        penRotation: *mut ROTATION_E,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SetChnRotationEx(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstRotationExAttr: *const VPSS_ROTATION_EX_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetChnRotationEx(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstRotationExAttr: *mut VPSS_ROTATION_EX_ATTR_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetChnFrame(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstVideoFrame: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_ReleaseChnFrame(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstVideoFrame: *const VIDEO_FRAME_INFO_S,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetRegionLuma(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        pstRegionInfo: *const VIDEO_REGION_INFO_S,
        pu64LumaData: *mut RK_U64,
        s32MilliSec: RK_S32,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_AttachMbPool(
        VpssGrp: VPSS_GRP,
        VpssChn: VPSS_CHN,
        hVbPool: MB_POOL,
    ) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_DetachMbPool(VpssGrp: VPSS_GRP, VpssChn: VPSS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_EnableBufferShare(VpssGrp: VPSS_GRP, VpssChn: VPSS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_DisableBufferShare(VpssGrp: VPSS_GRP, VpssChn: VPSS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetChnFd(VpssGrp: VPSS_GRP, VpssChn: VPSS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_CloseFd(VpssGrp: VPSS_GRP, VpssChn: VPSS_CHN) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_SetVProcDev(VpssGrp: VPSS_GRP, enVProcDev: VIDEO_PROC_DEV_TYPE_E) -> RK_S32;
}

extern "C" {
    pub fn RK_MPI_VPSS_GetVProcDev(
        VpssGrp: VPSS_GRP,
        enVProcDev: *mut VIDEO_PROC_DEV_TYPE_E,
    ) -> RK_S32;
}

extern "C" {
    #[doc = " @brief Create VENC_STREAM_S and allocate memory\n\n @return VENC_STREAM_S*"]
    #[link_name = "\u{1}_Z18newVencStreamFramev"]
    pub fn newVencStreamFrame() -> *mut VENC_STREAM_S;
}

extern "C" {
    #[doc = " @brief Free VENC_STREAM_S and release memory\n\n @param stFrame"]
    #[link_name = "\u{1}_Z19freeVencStreamFrameP15rkVENC_STREAM_S"]
    pub fn freeVencStreamFrame(stFrame: *mut VENC_STREAM_S);
}
